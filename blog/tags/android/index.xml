<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on Jordan Wright</title>
    <link>https://jordan-wright.com/blog/tags/android/</link>
    <description>Recent content in Android on Jordan Wright</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Aug 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jordan-wright.com/blog/tags/android/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Decompiling Android Apps the Easy Way</title>
      <link>https://jordan-wright.com/blog/2014/08/10/decompiling-android-apps-the-easy-way/</link>
      <pubDate>Sun, 10 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://jordan-wright.com/blog/2014/08/10/decompiling-android-apps-the-easy-way/</guid>
      <description>&lt;img src=&#34;https://jordan-wright.com/blog/blog/images/headers/android_apps.png&#34; alt=&#34;&#34; class=&#34;pure-img&#34; &gt;


&lt;h3 id=&#34;introduction&#34;&gt;Introduction&lt;/h3&gt;

&lt;p&gt;Mobile applications are often viewed as black-box applications. However, these applications often suffer from the same (or similar) vulnerabilities as their web application counterparts.&lt;/p&gt;

&lt;p&gt;In a &lt;a href=&#34;http://jordan-wright.github.io/blog/2013/11/07/how-to-pentest-iphone-apps-with-burp/&#34;&gt;previous post&lt;/a&gt;, I showed how we can perform dynamic analysis on iPhone applications by intercepting the inbound/outbound traffic with the Burp proxy. In this post, we&amp;rsquo;ll explore static analysis of Android apps by looing at a couple of online tools that make decompiling apps into equivalent Java and Smali code trivial.
&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>